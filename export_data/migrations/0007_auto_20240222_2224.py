# Generated by Django 4.2.1 on 2024-02-22 16:54

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("export_data", "0006_auto_20240219_1605"),
    ]

    operations = [
        migrations.RunSQL("""drop function if exists public.replace_ids_with_text"""),
        migrations.RunSQL("""CREATE OR REPLACE FUNCTION public.replace_ids_with_text(param_survey_id integer, param_in_type_qid integer, param_table_name character varying, param_partner_exists boolean, param_survey_type integer, param_ben_type integer)
                            RETURNS jsonb
                            LANGUAGE plpgsql
                            AS $function$
                            DECLARE 
                                -- Change log - v1.2a
                                -- a) corrected the issue in choice text update when - is stored for Checkbox (qtype C) type questions with no selected value
                                -- filename: replace_id_with_text_v1.2a.sql
                                lcl_sql_query varchar := '';
                                lcl_loop_row RECORD;
                                lcl_counter integer := 1;
                                --lcl_key_where varchar := '';
                                lcl_group_cols varchar := '';
                                lcl_boundary_level_names varchar[];
                                lcl_boundarylevel_count integer := 0;
                                lcl_max_boundary_level_code integer := 0;
                                lcl_set_boundary_id_str varchar := '';
                                lcl_loop_set_boundary_id_str varchar := '';
                                lcl_t_start varchar := '';
                                lcl_t_choice_text varchar := '';
                                lcl_t_user_info varchar := '';
                                lcl_t_people_ai_boundary varchar := '';
                                lcl_t_ben_type varchar := '';
                                lcl_t_ben_type_2_4 varchar := '';
                                lcl_t_ben_type_11_1 varchar := '';
                                lcl_t_ben_type_11_1_1 varchar := '';
                                lcl_t_act_type varchar := '';
                                lcl_t_partner_info varchar := '';
                                lcl_t_project_info varchar := '';
                                lcl_t_cluster_boundary_info varchar := '';
                                lcl_t_aw_info varchar := '';
                                lcl_row_key varchar := '';
                                lcl_row_where_cond varchar := '';
                            BEGIN 
                                lcl_t_start := CLOCK_TIMESTAMP();
                                if param_in_type_qid = 0 then
                                    select format('select concat(''response.'', a.id, case when gd_rows.id is null then '''' else ''.'' || gd_rows.id::text || ''.'' end, 
                                                    case when gd_cols.id is null then '''' else gd_cols.id::text end) as q_id, 
                                                    (case when a.qtype = ''GD'' then gd_cols.col_type else a.qtype end) as qtype,
                                                    (case when a.qtype = ''GD'' then coalesce(gd_cols.select_multiple,''false'') else coalesce(a.api_json->>''select_multiple''::text,''false'') end) as select_multiple
                                        from survey_question a
                                        inner join survey_block b on a.block_id = b.id and b.survey_id = %s
                                        left outer join (select x1.id, x1.parent_id, coalesce(x1.api_json->>''select_multiple''::text,''false'') as select_multiple
                                                    from survey_question x1
                                                    inner join survey_block x2 on x1.block_id = x2.id and x2.survey_id = %s
                                                    where parent_id is not null
                                                    and is_grid = true  order by x2.block_order, x1.question_order
                                        ) as gd_rows on gd_rows.parent_id = a.id
                                        left outer join (
                                                    select x1.id, x1.parent_id, x1.qtype as col_type, coalesce(x1.api_json->>''select_multiple''::text,''false'') as select_multiple
                                                    from survey_question x1
                                                    inner join survey_block x2 on x1.block_id = x2.id and x2.survey_id = %s
                                                    where parent_id is not null
                                                    and is_grid = false order by x2.block_order, x1.question_order
                                        )  as gd_cols on gd_rows.parent_id = gd_cols.parent_id 
                                        where (a.qtype in (''R'',''S'',''C'',''SM'') or (a.qtype = ''GD'' and gd_cols.col_type in (''R'',''S'',''C'',''SM'')))
                                        and a.active != 0
                                        and a.parent_id is null',param_survey_id, param_survey_id, param_survey_id) into lcl_sql_query;
                                    -- select format(' %s.id = x1.id ', param_table_name) into lcl_key_where;
                                else 
                                    select format('select concat(''row_data.'', a.id) as q_id, a.qtype, coalesce(a.api_json->>''select_multiple''::text,''false'') as select_multiple
                                        from survey_question a
                                        inner join survey_block b on a.block_id = b.id and b.survey_id = %s
                                        where qtype in (''R'',''S'',''C'',''SM'')
                                        and a.active != 0
                                        and (a.id = %s or a.parent_id = %s )', param_survey_id, param_in_type_qid, param_in_type_qid) into lcl_sql_query;
                                    -- select format(' %s.response_id = x1.response_id and %s.row_id = x1.row_id ', param_table_name, param_table_name) into lcl_key_where;
                                end if;

                                -- RAISE NOTICE'--------1';
                                for lcl_loop_row IN EXECUTE lcl_sql_query
                                LOOP 
                                    -- RAISE NOTICE'--------1--%-%-%',lcl_loop_row.q_id,lcl_loop_row.qtype,lower(lcl_loop_row.select_multiple);
                                    if lcl_loop_row.qtype = 'R' or (lcl_loop_row.qtype = 'S' and lower(lcl_loop_row.select_multiple) = 'false') then
                                        lcl_row_key := '';
                                        if param_in_type_qid = 0 then 
                                            lcl_row_key := 'a.id as resp_id, ';
                                            lcl_row_where_cond := format('%1$s.id = x2.resp_id and ',param_table_name);
                                        else 
                                            lcl_row_key := 'a.response_creation_key as resp_creation_key, a.row_id as resp_row_id, ';
                                            lcl_row_where_cond := format('%1$s.response_creation_key = x2.resp_creation_key and %1$s.row_id = x2.resp_row_id and ',param_table_name);
                                        end if;
                                        EXECUTE format( 'update %1$s
                                            set "%2$s" = x2.ch_text
                                            from (select %3$s a."%2$s" as ch_id, coalesce(b.text,'''') as ch_text
                                                from %1$s a
                                                left outer join survey_choice b on a."%2$s" = b.id::text
                                            ) as x2 
                                            where %4$s %1$s."%2$s" = x2.ch_id', param_table_name, lcl_loop_row.q_id, lcl_row_key, lcl_row_where_cond );
                                    elsif param_in_type_qid = 0 and (lcl_loop_row.qtype in ('C') or (lcl_loop_row.qtype = 'S' and lower(lcl_loop_row.select_multiple) = 'true')) then 
                                        -- handle for checkbox type   
                                        create temp table if not exists export_choice_data_temp (
                                            id integer NOT NULL,
                                            row_id integer NOT NULL,
                                            choice_id varchar NOT NULL 
                                        );
                                        truncate table export_choice_data_temp;
                                        -- case statement to handle all scenarios of checkbox value - "", "0", "123" and "[123,124,125]"
                                        EXECUTE format( 'insert into export_choice_data_temp(id,row_id, choice_id)
                                                        (select id, 0, json_array_elements(replace(replace((case when "%s" in ('''',''0'',''-'') then ''[]'' when "%s" ~ ''^[1-9][0-9,]*$'' then concat(''['',"%s",'']'') else "%s" end),''"'',''''),'''''''','''')::json) as choice_id 
                                                        from %s
                                                        where %s."%s" is not null
                                                        )', lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, param_table_name, param_table_name, lcl_loop_row.q_id);
                                        EXECUTE format( 'update %s
                                            set "%s" = x.choice_text
                                            from  (select x1.id, x1.row_id, coalesce(array_to_json(array_agg(x2.text)),''[]''::json) as choice_text
                                                    from export_choice_data_temp x1
                                                    inner join survey_choice x2 on x1.choice_id::text = x2.id::text 
                                                    group by x1.id, x1.row_id
                                            ) as x
                                            where x.id = %s.id ', param_table_name, lcl_loop_row.q_id, param_table_name);
                                    elsif param_in_type_qid = 0 and lcl_loop_row.qtype in ('SM') then 
                                        -- handle for checkbox type   
                                        create temp table if not exists export_choice_data_temp (
                                            id integer NOT NULL,
                                            row_id integer NOT NULL,
                                            choice_id varchar NOT NULL 
                                        );
                                        truncate table export_choice_data_temp;
                                        -- case statement to handle all scenarios of checkbox value - "", "0", "123" and "[123,124,125]"
                                        EXECUTE format( 'insert into export_choice_data_temp(id,row_id, choice_id)
                                                        (select id, 0, json_array_elements(replace(replace((case when "%s" in ('''',''0'',''-'') then ''[]'' when "%s" ~ ''^[1-9][0-9,]*$'' then concat(''['',"%s",'']'') else "%s" end),''"'',''''),'''''''','''')::json) as choice_id 
                                                        from %s
                                                        where %s."%s" is not null
                                                        )', lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, param_table_name, param_table_name, lcl_loop_row.q_id);
                                        EXECUTE format( 'update %s
                                            set "%s" = x.choice_text
                                            from  (select x1.id, x1.row_id, coalesce(array_to_json(array_agg(x2.name)),''[]''::json) as choice_text
                                                    from export_choice_data_temp x1
                                                    inner join masterdata_masterlookup x2 on x1.choice_id::text = x2.id::text 
                                                    group by x1.id, x1.row_id
                                            ) as x
                                            where x.id = %s.id ', param_table_name, lcl_loop_row.q_id, param_table_name);    
                                        if lcl_loop_row.select_multiple = 'false' then
                                            EXECUTE format( 'update %s
                                            set "%s" = replace(replace(replace("%s",''['',''''),'']'',''''),''"'','''')', param_table_name, lcl_loop_row.q_id, lcl_loop_row.q_id);
                                        end if;
                                    elsif param_in_type_qid != 0 and (lcl_loop_row.qtype in ('C') or (lcl_loop_row.qtype = 'S' and lower(lcl_loop_row.select_multiple) = 'true')) then 
                                        -- handle for checkbox type   
                                        create temp table if not exists export_choice_data_temp (
                                            id integer NOT NULL,
                                            row_id integer NOT NULL,
                                            choice_id varchar NOT NULL 
                                        );

                                        truncate table export_choice_data_temp;
                                        EXECUTE format( 'update %s
                                                            set "%s" = (case when "%s"::text is null or "%s"::text = ''0'' or "%s"::text = ''-'' then ''"[]"''
                                                                when "%s" ~ ''^"{0,1}[0-9]*"{0,1}$'' then concat(''"['',replace("%s" ,''"'',''''),'']"'')::text
                                                                else "%s" end)
                                                            ', param_table_name, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, 
                                                        lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id);
                                        -- (select response_id, row_id, json_array_elements(replace(replace("%s",''"'',''''),'''''''','''')::json) as choice_id                             
                                        EXECUTE format( 'insert into export_choice_data_temp(id,row_id, choice_id)
                                                        (select creation_key, row_id, json_array_elements(replace(replace((case when "%s" in ('''',''0'',''-'') then ''[]'' when "%s" ~ ''^[1-9][0-9,]*$'' then concat(''['',"%s",'']'') else "%s" end),''"'',''''),'''''''','''')::json) as choice_id 
                                                        from %s
                                                        where %s."%s" is not null
                                                        )', lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, param_table_name, param_table_name, lcl_loop_row.q_id);
                                        EXECUTE format( 'update %s
                                            set "%s" = x.choice_text
                                            from  (select x1.creation_key, x1.row_id, coalesce(array_to_json(array_agg(x2.text)),''[]''::json) as choice_text
                                                    from export_choice_data_temp x1
                                                    inner join survey_choice x2 on x1.choice_id::text = x2.id::text 
                                                    group by x1.creation_key, x1.row_id
                                            ) as x
                                            where x.creation_key = %s.creation_key and x.row_id = %s.row_id', param_table_name, lcl_loop_row.q_id, param_table_name, param_table_name);
                                    elsif param_in_type_qid != 0 and lcl_loop_row.qtype in ('SM') then 
                                        -- handle for checkbox type   
                                        create temp table if not exists export_choice_data_temp (
                                            id integer NOT NULL,
                                            row_id integer NOT NULL,
                                            choice_id varchar NOT NULL 
                                        );

                                        truncate table export_choice_data_temp;
                                        EXECUTE format( 'update %s
                                                            set "%s" = (case when "%s"::text is null or "%s"::text = ''0'' or "%s"::text = ''-'' then ''"[]"''
                                                                when "%s" ~ ''^"{0,1}[0-9]*"{0,1}$'' then concat(''"['',replace("%s" ,''"'',''''),'']"'')::text
                                                                else "%s" end)
                                                            ', param_table_name, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, 
                                                        lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id);
                                        -- (select response_id, row_id, json_array_elements(replace(replace("%s",''"'',''''),'''''''','''')::json) as choice_id                             
                                        EXECUTE format( 'insert into export_choice_data_temp(id,row_id, choice_id)
                                                        (select creation_key, row_id, json_array_elements(replace(replace((case when "%s" in ('''',''0'',''-'') then ''[]'' when "%s" ~ ''^[1-9][0-9,]*$'' then concat(''['',"%s",'']'') else "%s" end),''"'',''''),'''''''','''')::json) as choice_id 
                                                        from %s
                                                        where %s."%s" is not null
                                                        )', lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, lcl_loop_row.q_id, param_table_name, param_table_name, lcl_loop_row.q_id);
                                        EXECUTE format( 'update %s
                                            set "%s" = x.choice_text
                                            from  (select x1.creation_key, x1.row_id, coalesce(array_to_json(array_agg(x2.name)),''[]''::json) as choice_text
                                                    from export_choice_data_temp x1
                                                    inner join masterdata_masterlookup x2 on x1.choice_id::text = x2.id::text 
                                                    group by x1.creation_key, x1.row_id
                                            ) as x
                                            where x.creation_key = %s.creation_key and x.row_id = %s.row_id', param_table_name, lcl_loop_row.q_id, param_table_name, param_table_name);        
                                        if lcl_loop_row.select_multiple = 'false' then
                                            EXECUTE format( 'update %s
                                            set "%s" = replace(replace(replace("%s",''['',''''),'']'',''''),''"'','''')', param_table_name, lcl_loop_row.q_id, lcl_loop_row.q_id);
                                        end if;
                                    end if;

                                end LOOP;
                                lcl_t_choice_text := CLOCK_TIMESTAMP();

                            --update user_id - user_id column is required only in the main excel sheet and not the intype questions sheets 
                            -- q_id will be 0 for the main sheet
                            if param_in_type_qid = 0 then
                                -- RAISE NOTICE'--------2';
                                EXECUTE format( 'update %s
                                        set user_id_ref_username = x2.username, 
                                        user_id_ref_name = coalesce(x2.first_name,'''') || (case when x2.first_name is not null or x2.last_name is not null then '' '' else '''' end) || coalesce(x2.last_name,'''')
                                        from auth_user x2 where %s.user_id::text = x2.id::text', param_table_name, param_table_name);
                            end if;
                            lcl_t_user_info := CLOCK_TIMESTAMP();

                            --update beneficiary_type and beneficiary reference name
                            -- survey_type 0 is beneficiary 1 is extended activity
                            -- in type questions of beneficiary type survey will not have 
                            if param_survey_id = 73 and param_in_type_qid = 0 then
                                -- Individual survey - address to be picked from Household survey (70) OR  beneficiaryresposne of the Individual already has the address
                                EXECUTE format( 'update %s
                                        set "parent_ben.json_id" = x2.json_answer_id,
                                        "ai_question.2.1" = x2.address_1::text,
                                        "ai_question.2.2" = x2.address_2::text,
                                        "ai_question.2.3" = x2.address_3::text,
                                        "ai_question.2.4" = x2.address_4::text,
                                        "ai_question.2.5" = x2.address_5::text,
                                        "ai_question.3" = coalesce(x3.response->>''3''::text,''''), 
                                        "ai_question.5" = coalesce(x3.response->>''5''::text,''''),
                                        "ai_question.8" = coalesce(sc8.text,''''),
                                        "ai_question.9" = coalesce(x3.response->>''9''::text,''''), 
                                        "ai_question.10" = coalesce(x3.response->>''10''::text,''''), 
                                        "ai_question.11" = coalesce(x3.response->>''11''::text,''''), 
                                        "address.1__id__" = x2.address_1,
                                        "address.2__id__" = x2.address_2,
                                        "address.3__id__" = x2.address_3,
                                        "address.4__id__" = x2.address_4,
                                        "address.5__id__" = x2.address_5
                                        from beneficiary_beneficiaryresponse x2 
                                        inner join survey_jsonanswer x3 on x2.json_answer_id = x3.id
                                        left outer join survey_choice sc8 on x3.response->>''8''::text = sc8.id::text
                                        where %s."response.16" = x2.creation_key', param_table_name, param_table_name);
                                        -- update individual - household data (2 of household) address widgets
                                        select format('select concat(''ai_question.2.'',code) as q_id
                                                from masterdata_boundarylevel 
                                                where active != 0 
                                                order by code', param_survey_id) into lcl_sql_query;
                                        for lcl_loop_row IN EXECUTE lcl_sql_query
                                        LOOP 
                                            -- RAISE NOTICE'--------2a--%',lcl_loop_row.q_id;
                                            EXECUTE format( 'update %s
                                                set "%s" = x2.name 
                                                from masterdata_boundary x2 
                                                where %s."%s"::text = x2.id::text and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                        end LOOP;              
                            elsif param_survey_id = 602 and param_in_type_qid = 0 then
                                -- Asset survey - address to be picked from Household survey (70) OR  beneficiaryresposne of the Asset already has the address
                                EXECUTE format( 'update %s
                                        set "parent_ben.json_id" = x2.json_answer_id,
                                        "ai_question.2.1" = x2.address_1::text,
                                        "ai_question.2.2" = x2.address_2::text,
                                        "ai_question.2.3" = x2.address_3::text,
                                        "ai_question.2.4" = x2.address_4::text,
                                        "ai_question.2.5" = x2.address_5::text,
                                        "ai_question.3" = coalesce(x3.response->>''3''::text,''''), 
                                        "ai_question.5" = coalesce(x3.response->>''5''::text,''''),
                                        "ai_question.8" = coalesce(sc8.text,''''),
                                        "ai_question.9" = coalesce(x3.response->>''9''::text,''''), 
                                        "ai_question.10" = coalesce(x3.response->>''10''::text,''''), 
                                        "ai_question.11" = coalesce(x3.response->>''11''::text,''''), 
                                        "address.1__id__" = x2.address_1,
                                        "address.2__id__" = x2.address_2,
                                        "address.3__id__" = x2.address_3,
                                        "address.4__id__" = x2.address_4,
                                        "address.5__id__" = x2.address_5
                                        from beneficiary_beneficiaryresponse x2 
                                        inner join survey_jsonanswer x3 on x2.json_answer_id = x3.id
                                        left outer join survey_choice sc8 on x3.response->>''8''::text = sc8.id::text
                                        where %s."response.53" = x2.creation_key', param_table_name, param_table_name);
                                        -- update individual - household data (2 of household) address widgets
                                        select format('select concat(''ai_question.2.'',code) as q_id
                                                from masterdata_boundarylevel 
                                                where active != 0 
                                                order by code', param_survey_id) into lcl_sql_query;
                                        for lcl_loop_row IN EXECUTE lcl_sql_query
                                        LOOP 
                                            -- RAISE NOTICE'--------2a--%',lcl_loop_row.q_id;
                                            EXECUTE format( 'update %s
                                                set "%s" = x2.name 
                                                from masterdata_boundary x2 
                                                where %s."%s"::text = x2.id::text and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                        end LOOP;  
                            elsif param_survey_type = 0 and param_in_type_qid = 0 then
                                EXECUTE format( 'update %s
                                    set "address.1__id__" = x2.address_1,
                                    "address.2__id__" = x2.address_2,
                                    "address.3__id__" = x2.address_3,
                                    "address.4__id__" = x2.address_4,
                                    "address.5__id__" = x2.address_5
                                    from beneficiary_beneficiaryresponse x2 
                                    where %s."creation_key" = x2.creation_key', param_table_name, param_table_name);
                                lcl_t_ben_type := CLOCK_TIMESTAMP();
                            elsif param_survey_type = 1 and param_ben_type != 0 then 
                                if param_in_type_qid = 0 then 
                                    EXECUTE format( 'update %1$s
                                    set "voucher_type" = (case when trim(voucher_type) = ''1'' then ''Account Approval Need add''
                                        when trim(voucher_type) = ''2'' then ''JV''
                                        when trim(voucher_type) = ''3'' then ''PV''
                                        when trim(voucher_type) = ''4'' then ''Reciept''
                                        when trim(voucher_type) = ''5'' then ''Contra'' else ''-'' end)
                                    where 1=1', param_table_name);
                                end if;
                                if param_in_type_qid = 0 and param_ben_type = 2 then
                                -- RAISE NOTICE'--------3';
                                -- beneficiary Household - survey_id 70
                                    EXECUTE format( 'update %s
                                    set "cluster.beneficiary_type_ref_name" = x3.name,
                                        "ben.json_id" = x2.json_answer_id,
                                        "ben_type_question.2.1" = x2.address_1::text,
                                        "ben_type_question.2.2" = x2.address_2::text,
                                        "ben_type_question.2.3" = x2.address_3::text,
                                        "ben_type_question.2.4" = x2.address_4::text,
                                        "ben_type_question.2.5" = x2.address_5::text,
                                        "ben_type_question.3" = coalesce(x4.response->>''3''::text,''''), 
                                        "ben_type_question.5" = coalesce(x4.response->>''5''::text,''''),
                                        "ben_type_question.8" = coalesce(sc8.text,''''),
                                        "ben_type_question.9" = coalesce(x4.response->>''9''::text,''''), 
                                        "ben_type_question.10" = coalesce(x4.response->>''10''::text,''''), 
                                        "ben_type_question.11" = coalesce(x4.response->>''11''::text,''''), 
                                        "address.1__id__" = x2.address_1,
                                        "address.2__id__" = x2.address_2,
                                        "address.3__id__" = x2.address_3,
                                        "address.4__id__" = x2.address_4,
                                        "address.5__id__" = x2.address_5
                                    from beneficiary_beneficiaryresponse x2 
                                    inner join beneficiary_beneficiarytype x3 on x2.beneficiary_type_id = x3.id
                                    inner join survey_jsonanswer x4 on x2.json_answer_id = x4.id
                                    left outer join survey_choice sc8 on x4.response->>''8''::text = sc8.id::text
                                    where %s."cluster.BeneficiaryResponse" = x2.creation_key ', param_table_name, param_table_name);
                                    -- update Household (qid 2) address widgets
                                    select format('select concat(''ben_type_question.2.'',code) as q_id
                                            from masterdata_boundarylevel 
                                            where active != 0 
                                            order by code', param_survey_id) into lcl_sql_query;
                                    for lcl_loop_row IN EXECUTE lcl_sql_query
                                    LOOP 
                                        -- RAISE NOTICE'--------3--%',lcl_loop_row.q_id;
                                        EXECUTE format( 'update %s
                                            set "%s" = x2.name 
                                            from masterdata_boundary x2 
                                            where %s."%s" = x2.id::text 
                                            and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                    end LOOP;  
                                    lcl_t_ben_type_2_4 := CLOCK_TIMESTAMP();
                                elsif param_in_type_qid = 0 and param_ben_type = 11 then
                                    -- RAISE NOTICE'--------5';
                                    -- beneficiary Individual - survey_id = 73
                                    EXECUTE format( 'update %s
                                    set "ben.json_id" = x2.json_answer_id,
                                        "parent_ben.creation_key" = x4.response->>''16''::text,
                                        "cluster.beneficiary_type_ref_name" = x3.name,
                                        "ben_type_question.17" = x4.response->>''17''::text,
                                        "ben_type_question.19" = x4.response->>''19''::text,
                                        "ben_type_question.20" = x4.response->>''20''::text,
                                        "ben_type_question.21" = x4.response->>''21''::text,
                                        "ben_type_question.2884" = x4.response->>''2884''::text
                                    from beneficiary_beneficiaryresponse x2 
                                    inner join beneficiary_beneficiarytype x3 on x2.beneficiary_type_id = x3.id
                                    inner join survey_jsonanswer x4 on x2.json_answer_id = x4.id
                                    where %s."cluster.BeneficiaryResponse" = x2.creation_key', param_table_name, param_table_name);
                                    
                                    -- update the Household beneficiary details of the Individual 
                                    EXECUTE format( 'update %s
                                    set 
                                        "parent_ben.json_id" = x5.json_answer_id,
                                        "ben_type_question.2.1" = x5.address_1::text,
                                        "ben_type_question.2.2" = x5.address_2::text,
                                        "ben_type_question.2.3" = x5.address_3::text,
                                        "ben_type_question.2.4" = x5.address_4::text,
                                        "ben_type_question.2.5" = x5.address_5::text,
                                        "ben_type_question.3" = coalesce(x6.response->>''3''::text,''''), 
                                        "ben_type_question.5" = coalesce(x6.response->>''5''::text,''''),
                                        "ben_type_question.8" = coalesce(sc8.text,''''),
                                        "ben_type_question.9" = coalesce(x6.response->>''9''::text,''''), 
                                        "ben_type_question.10" = coalesce(x6.response->>''10''::text,''''), 
                                        "ben_type_question.11" = coalesce(x6.response->>''11''::text,''''), 
                                        "address.1__id__" = x5.address_1,
                                        "address.2__id__" = x5.address_2,
                                        "address.3__id__" = x5.address_3,
                                        "address.4__id__" = x5.address_4,
                                        "address.5__id__" = x5.address_5
                                    from beneficiary_beneficiaryresponse x5 
                                    left outer join survey_jsonanswer x6 on x5.json_answer_id = x6.id
                                    left outer join survey_choice sc8 on x6.response->>''8''::text = sc8.id::text
                                    where %s."parent_ben.creation_key" = x5.creation_key::text', param_table_name,param_table_name);
                                    lcl_t_ben_type_11_1 := CLOCK_TIMESTAMP();
                                    -- update Individual - Household data (qid 2 of Household - 16 of Individual) address widgets
                                    select format('select concat(''ben_type_question.2.'',code) as q_id
                                            from masterdata_boundarylevel 
                                            where active != 0 
                                            order by code', param_survey_id) into lcl_sql_query;
                                    for lcl_loop_row IN EXECUTE lcl_sql_query
                                    LOOP 
                                        -- RAISE NOTICE'--------5a--%',lcl_loop_row.q_id;
                                        EXECUTE format( 'update %s
                                            set "%s" = x2.name 
                                            from masterdata_boundary x2
                                            where %s."%s" = x2.id::text and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                    end LOOP;  
                                    lcl_t_ben_type_11_1_1 := CLOCK_TIMESTAMP();
                                elsif param_in_type_qid = 0 and param_ben_type = 12 then
                                    -- RAISE NOTICE'--------5';
                                    -- beneficiary Asset - survey_id = 602
                                    EXECUTE format( 'update %s
                                    set "ben.json_id" = x2.json_answer_id,
                                        "parent_ben.creation_key" = x4.response->>''53''::text,
                                        "cluster.beneficiary_type_ref_name" = x3.name,
                                        "ben_type_question.54" = x4.response->>''54''::text,
                                        "ben_type_question.55" = x4.response->>''55''::text
                                    from beneficiary_beneficiaryresponse x2 
                                    inner join beneficiary_beneficiarytype x3 on x2.beneficiary_type_id = x3.id
                                    inner join survey_jsonanswer x4 on x2.json_answer_id = x4.id
                                    where %s."cluster.BeneficiaryResponse" = x2.creation_key', param_table_name, param_table_name);
                                    
                                    -- update the Household beneficiary details of the Asset 
                                    EXECUTE format( 'update %s
                                    set                         
                                        "ben_type_question.2.1" = x5.address_1::text,
                                        "ben_type_question.2.2" = x5.address_2::text,
                                        "ben_type_question.2.3" = x5.address_3::text,
                                        "ben_type_question.2.4" = x5.address_4::text,
                                        "ben_type_question.2.5" = x5.address_5::text,
                                        "ben_type_question.3" = coalesce(x6.response->>''3''::text,''''), 
                                        "ben_type_question.5" = coalesce(x6.response->>''5''::text,''''),
                                        "ben_type_question.8" = coalesce(sc8.text,''''),
                                        "ben_type_question.9" = coalesce(x6.response->>''9''::text,''''), 
                                        "ben_type_question.10" = coalesce(x6.response->>''10''::text,''''), 
                                        "ben_type_question.11" = coalesce(x6.response->>''11''::text,''''), 
                                        "address.1__id__" = x5.address_1,
                                        "address.2__id__" = x5.address_2,
                                        "address.3__id__" = x5.address_3,
                                        "address.4__id__" = x5.address_4,
                                        "address.5__id__" = x5.address_5
                                    from beneficiary_beneficiaryresponse x5 
                                    left outer join survey_jsonanswer x6 on x5.json_answer_id = x6.id
                                    left outer join survey_choice sc8 on x6.response->>''8''::text = sc8.id::text
                                    where %s."ben_type_question.53" = x5.creation_key::text', param_table_name,param_table_name);
                                    lcl_t_ben_type_11_1 := CLOCK_TIMESTAMP();
                                    -- update Asset - Household data (qid 2 of Household - 53 of Asset) address widgets
                                    select format('select concat(''ben_type_question.2.'',code) as q_id
                                            from masterdata_boundarylevel 
                                            where active != 0 
                                            order by code', param_survey_id) into lcl_sql_query;
                                    for lcl_loop_row IN EXECUTE lcl_sql_query
                                    LOOP 
                                        -- RAISE NOTICE'--------5a--%',lcl_loop_row.q_id;
                                        EXECUTE format( 'update %s
                                            set "%s" = x2.name 
                                            from masterdata_boundary x2
                                            where %s."%s" = x2.id::text and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                    end LOOP;  
                                    lcl_t_ben_type_11_1_1 := CLOCK_TIMESTAMP();
                                elsif param_in_type_qid = 0 and param_ben_type = 3 then
                                -- RAISE NOTICE'--------3';
                                -- beneficiary Group - survey_id 71
                                    EXECUTE format( 'update %s
                                    set "cluster.beneficiary_type_ref_name" = x3.name,
                                        "ben.json_id" = x2.json_answer_id,
                                        "ben_type_question.4.1" = x2.address_1::text,
                                        "ben_type_question.4.2" = x2.address_2::text,
                                        "ben_type_question.4.3" = x2.address_3::text,
                                        "ben_type_question.4.4" = x2.address_4::text,
                                        "ben_type_question.4.5" = x2.address_5::text,
                                        "ben_type_question.24" = coalesce(sc24.text,''''),
                                        "ben_type_question.25" = coalesce(x4.response->>''25''::text,''''),
                                        "ben_type_question.26" = to_date(x4.response->>''26''::text,''DD-MM-YYYY''),
                                        "ben_type_question.2756" = coalesce(sc2756.text,''''),
                                        "ben_type_question.2757" = coalesce(x4.response->>''10''::text,''''), 
                                        "ben_type_question.2758" = coalesce(sc2758.text,''''),
                                        "ben_type_question.2760" = coalesce(sc2760.text,''''),
                                        "address.1__id__" = x2.address_1,
                                        "address.2__id__" = x2.address_2,
                                        "address.3__id__" = x2.address_3,
                                        "address.4__id__" = x2.address_4,
                                        "address.5__id__" = x2.address_5
                                    from beneficiary_beneficiaryresponse x2 
                                    inner join beneficiary_beneficiarytype x3 on x2.beneficiary_type_id = x3.id
                                    inner join survey_jsonanswer x4 on x2.json_answer_id = x4.id
                                    left outer join survey_choice sc24 on x4.response->>''24''::text = sc24.id::text
                                    left outer join survey_choice sc2756 on x4.response->>''2756''::text = sc2756.id::text
                                    left outer join survey_choice sc2758 on x4.response->>''2758''::text = sc2758.id::text
                                    left outer join survey_choice sc2760 on x4.response->>''2760''::text = sc2760.id::text
                                    where %s."cluster.BeneficiaryResponse" = x2.creation_key ', param_table_name, param_table_name);
                                    -- update Household (qid 2) address widgets
                                    select format('select concat(''ben_type_question.4.'',code) as q_id
                                            from masterdata_boundarylevel 
                                            where active != 0 
                                            order by code', param_survey_id) into lcl_sql_query;
                                    for lcl_loop_row IN EXECUTE lcl_sql_query
                                    LOOP 
                                        -- RAISE NOTICE'--------3--%',lcl_loop_row.q_id;
                                        EXECUTE format( 'update %s
                                            set "%s" = x2.name 
                                            from masterdata_boundary x2 
                                            where %s."%s" = x2.id::text 
                                            and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                    end LOOP;  
                                    lcl_t_ben_type_2_4 := CLOCK_TIMESTAMP();                    
                                end if;
                                if param_in_type_qid = 0 then
                                    -- END - COMMENTED FOR FURTHER CHANGES FOR OTHER PROJECTS
                                    -- RAISE NOTICE'--------7';
                                    EXECUTE format( 'update %s
                                        set "cluster.beneficiary_type_ref_name" = x3.name
                                        from beneficiary_beneficiaryresponse x2 
                                        inner join beneficiary_beneficiarytype x3 on x2.beneficiary_type_id = x3.id
                                        where %s."cluster.BeneficiaryResponse" = x2.creation_key ', param_table_name, param_table_name);
                                    lcl_t_act_type := CLOCK_TIMESTAMP();
                                end if;
                            end if;

                            -- update partner_details
                            -- only if the partners are managed in the program and if the data is for the main sheet
                            if param_partner_exists = true and param_in_type_qid = 0 then
                                -- RAISE NOTICE'--------8';
                                EXECUTE format( 'update %s
                                    set "cluster.partner_id_ref_name" = x2.name
                                    from partner_partner x2 
                                    where %s."cluster.partner_id" = x2.id::text ', param_table_name, param_table_name);
                            end if;

                            lcl_t_partner_info := CLOCK_TIMESTAMP();

                            if param_in_type_qid = 0 and param_survey_type = 1 then
                                
                                lcl_t_project_info := CLOCK_TIMESTAMP();
                                -- RAISE NOTICE'--------10';
                                EXECUTE format( 'update %s
                                    set "cluster.boundary_level" = x3.name
                                    from masterdata_boundary x2
                                    inner join masterdata_boundarylevel x3 on x2.boundary_level_type_id = x3.id
                                    where %s."cluster.Boundary"::integer = x2.id ', param_table_name, param_table_name);
                                if param_ben_type = 0 then 
                                    EXECUTE format('select max(c.code) 
                                                    from %s a 
                                                    inner join masterdata_boundary b on a."cluster.Boundary"::integer = b.id 
                                                    inner join masterdata_boundarylevel c on c.id = b.boundary_level_type_id', param_table_name) into lcl_max_boundary_level_code;
                                    lcl_boundary_level_names := Array(select lower(name) as name 
                                                    from masterdata_boundarylevel 
                                                    where code <= lcl_max_boundary_level_code and active != 0 order by code);
                                    -- RAISE NOTICE'Array: %', lcl_boundary_level_names;
                                    lcl_boundarylevel_count := array_length(lcl_boundary_level_names,1);
                                    -- RAISE NOTICE'Array: %', lcl_boundary_level_names;
                                    if lcl_boundary_level_names is not null and lcl_boundarylevel_count > 0 then
                                        if param_ben_type = 0 then
                                            lcl_set_boundary_id_str := ',"address.%s__id__" = x2.id,';
                                        else 
                                            lcl_set_boundary_id_str := ',';
                                        end if;
                                        -- RAISE NOTICE'--------11--%',lcl_set_boundary_id_str;
                                        FOR counter IN REVERSE lcl_boundarylevel_count..1 LOOP
                                            if lcl_set_boundary_id_str != '' then
                                                lcl_loop_set_boundary_id_str := format(lcl_set_boundary_id_str, counter);
                                            end if;
                                            -- RAISE NOTICE'--------11a--%',lcl_loop_set_boundary_id_str;
                                            if counter = lcl_boundarylevel_count then
                                                EXECUTE format( 'update %s
                                                    set "cluster.boundary_%s" = x2.name
                                                        %s                    
                                                        "cluster.boundary_%s" = x2.parent_id
                                                    from masterdata_boundary x2 
                                                    where  %s."cluster.Boundary"::integer = x2.id ', param_table_name, lcl_boundary_level_names[(counter)], lcl_loop_set_boundary_id_str, lcl_boundary_level_names[(counter-1)], param_table_name);
                                            elsif counter = 1 then
                                                -- RAISE NOTICE'--------11b--%',left(lcl_loop_set_boundary_id_str,-1);
                                                EXECUTE format( 'update %s
                                                    set "cluster.boundary_%s" = x2.name
                                                    %s
                                                    from masterdata_boundary x2 
                                                    where %s."cluster.boundary_%s" = x2.id::text ', param_table_name, lcl_boundary_level_names[(counter)], left(lcl_loop_set_boundary_id_str,-1), param_table_name, lcl_boundary_level_names[(counter)]);
                                            else 
                                                EXECUTE format( 'update %s
                                                    set "cluster.boundary_%s" = x2.name
                                                        %s
                                                        "cluster.boundary_%s" = x2.parent_id
                                                    from masterdata_boundary x2 
                                                    where %s."cluster.boundary_%s" = x2.id::text ', param_table_name, lcl_boundary_level_names[(counter)], lcl_loop_set_boundary_id_str, lcl_boundary_level_names[(counter-1)], param_table_name,lcl_boundary_level_names[(counter)]);
                                            end if;
                                        END LOOP;
                                    end if;
                                end if;
                                lcl_t_cluster_boundary_info := CLOCK_TIMESTAMP();
                            end if;

                            if param_in_type_qid = 0 then
                            --- update address widgets
                                -- RAISE NOTICE'--------12';
                                select format('select concat(''response.address.1.'', a.id, ''.'',c.code) as q_id
                                        from survey_question a
                                        inner join survey_block b on a.block_id = b.id and b.survey_id = %s
                                        inner join masterdata_boundarylevel c on true
                                        where a.qtype = ''AW''
                                        and a.active != 0 and c.active != 0
                                        order by c.code', param_survey_id) into lcl_sql_query;
                                lcl_set_boundary_id_str := '';
                                if param_survey_id = 7 then
                                    lcl_set_boundary_id_str := ',"address.%s__id__" = coalesce(x2.id,''0'')::int';
                                end if;
                                lcl_counter := 1;
                                for lcl_loop_row IN EXECUTE lcl_sql_query
                                LOOP 
                                    if lcl_set_boundary_id_str != '' then
                                        lcl_loop_set_boundary_id_str := format(lcl_set_boundary_id_str, lcl_counter);
                                    end if;
                                    -- RAISE NOTICE'--------12--%',lcl_loop_row.q_id;
                                    EXECUTE format( 'update %s
                                    set "%s" = x2.name
                                    %s
                                    from masterdata_boundary x2 
                                    where %s."%s" = x2.id::text and %s."%s" is not null and %s."%s" != ''''', param_table_name, lcl_loop_row.q_id, lcl_loop_set_boundary_id_str, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id, param_table_name, lcl_loop_row.q_id);
                                    lcl_counter := lcl_counter + 1;
                                end LOOP;  
                            end if;

                            lcl_t_aw_info := CLOCK_TIMESTAMP();
                            return jsonb_build_object('1-lcl_t_start', lcl_t_start, '2-lcl_t_choice_text', lcl_t_choice_text, '3-lcl_t_user_info', lcl_t_user_info,
                                '4-lcl_t_people_ai_boundary', lcl_t_people_ai_boundary, '5-lcl_t_ben_type', lcl_t_ben_type, 
                                '5f-lcl_t_act_type', lcl_t_act_type, '6-lcl_t_partner_info', lcl_t_partner_info,
                                '7-lcl_t_project_info',lcl_t_project_info, '8-lcl_t_cluster_boundary_info',lcl_t_cluster_boundary_info,
                                '9-lcl_t_aw_info',lcl_t_aw_info);

                            END;
                            $function$""")
    ]
