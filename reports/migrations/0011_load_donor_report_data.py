# Generated by Django 4.2.13 on 2024-09-02 06:18

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('reports', '0010_quarterlyreport'),
    ]

    operations = [
        migrations.RunSQL(
            """
            DROP TABLE IF EXISTS student_screening_data;    
            CREATE TABLE student_screening_data(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT Null,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    student_district_id INTEGER NULL,
                    -- student_district TEXT NULL,
                    student_state_id INTEGER NULL,
                    -- student_state TEXT NULL,
                    month TEXT NULL,
                    student_name TEXT NULL,
                    student_creation_key TEXT NULL,
                    school_creation_key TEXT NULL,
                    age TEXT NULL,
                    gender TEXT NULL,
                    school_type TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    remarks TEXT NULL,
                    screening TEXT NULL default 'N',
                    spec_prescriped TEXT NULL default 'N',
                    spec_issued TEXT NULL default 'N',
                    surgery_advised TEXT NULL default 'N',
                    surgery_provided TEXT NULL default 'N'

                );
            """
        ),
        migrations.RunSQL(
            """
            DROP TABLE IF EXISTS surgery_data;
            CREATE TABLE surgery_data(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT NULL,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    student_district_id INTEGER NULL,
                    student_state_id INTEGER NULL,  
                    student_name TEXT NULL,
                    student_creation_key TEXT NULL,
                    school_creation_key TEXT NULL,
                    age TEXT NULL,
                    gender TEXT NULL,
                    school_type TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    type_of_surgery TEXT NULL,
                    date_of_surgery	TEXT NULL,
                    eye_operated_upon TEXT NULL,
                    surgery_provided TEXT NULL,
                    phase TEXT NULL --TODO check with girish sir ,

                );
            """
        ),
        migrations.RunSQL(
            """
            DROP TABLE IF EXISTS spectacle_complaince_data;
                CREATE TABLE spectacle_complaince_data(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT NULL,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    student_district_id INTEGER NULL,
                    student_state_id INTEGER NULL,  
                    student_name TEXT NULL,
                    student_creation_key TEXT NULL,
                    school_creation_key TEXT NULL,
                    age TEXT NULL,
                    gender TEXT NULL,
                    school_type TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    spectacle_provided_on TEXT NULL,
                    follow_up_done_on TEXT NULL,
                    waering_complaince_after_3_month TEXT NULL, -- TODO check with girish sir what is the question id for (spectacle_provided_on,follow_up_done_on)
                    reason_for_not_wearing TEXT NULL,
                    using_spectacles TEXT NULL
                );  
            """
        ),
        migrations.RunSQL(
            """
            DROP TABLE IF EXISTS program_tracker_data;
            CREATE TABLE program_tracker_data(
            id SERIAL PRIMARY KEY,
            district_name varchar NULL,
            district_id INTEGER NULL,
            boundary_district_id INTEGER NULL,
            partner_id INTEGER NULL,
            partner_mission_id INTEGER NULL,
            project_id INTEGER NULL,
            project_name varchar NULL,
            financial_year varchar NULL,
            quarterly_year varchar NULL,
            overall_target INTEGER NULL,
            cummulative_target INTEGER NULL,
            actual_till_date INTEGER NULL,

            children_screened_q_target INTEGER NULL DEFAULT 0,
            children_prescribed_spectacles_q_target INTEGER NULL DEFAULT 0,
            children_provided_spectacles_q_target INTEGER NULL DEFAULT 0,
            children_refered_surgery_q_target INTEGER NULL DEFAULT 0,
            children_provided_surgery_q_target INTEGER NULL DEFAULT 0,
            schools_covered_q_target INTEGER NULL DEFAULT 0,
            teacher_trained_q_target INTEGER NULL DEFAULT 0,
            spectacle_compliance_3_months_q_target INTEGER NULL DEFAULT 0,

            children_screened_male INTEGER DEFAULT 0,
            children_screened_female INTEGER DEFAULT 0,
            children_screened_total INTEGER DEFAULT 0,
            children_screened_ach INTEGER DEFAULT 0,

            children_prescribed_spectacles_male INTEGER DEFAULT 0,
            children_prescribed_spectacles_female INTEGER DEFAULT 0,
            children_prescribed_spectacles_total INTEGER DEFAULT 0,
            children_prescribed_spectacles_ach INTEGER DEFAULT 0,

            children_provided_spectacles_male INTEGER DEFAULT 0,
            children_provided_spectacles_female INTEGER DEFAULT 0,
            children_provided_spectacles_total INTEGER DEFAULT 0,
            children_provided_spectacles_ach INTEGER DEFAULT 0,

            children_refered_surgery_male INTEGER DEFAULT 0,
            children_refered_surgery_female INTEGER DEFAULT 0,
            children_refered_surgery_total INTEGER DEFAULT 0,
            children_refered_surgery_ach INTEGER DEFAULT 0,

            children_provided_surgery_male INTEGER DEFAULT 0,
            children_provided_surgery_female INTEGER DEFAULT 0,
            children_provided_surgery_total INTEGER DEFAULT 0,
            children_provided_surgery_ach INTEGER DEFAULT 0,

            schools_covered_male INTEGER DEFAULT 0,
            schools_covered_female INTEGER DEFAULT 0,
            schools_covered_total INTEGER DEFAULT 0,
            schools_covered_ach INTEGER DEFAULT 0,

            teacher_trained_male INTEGER DEFAULT 0,
            teacher_trained_female INTEGER DEFAULT 0,
            teacher_trained_total INTEGER DEFAULT 0,
            teacher_trained_ach INTEGER DEFAULT 0,

            spectacle_compliance_3_months_male INTEGER DEFAULT 0,
            spectacle_compliance_3_months_female INTEGER DEFAULT 0,
            spectacle_compliance_3_months_total INTEGER DEFAULT 0,
            spectacle_compliance_3_months_ach INTEGER DEFAULT 0
        );
            """
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION load_donor_quarterly_report(academic_year integer, q_year integer)
            RETURNS VOID 
            LANGUAGE plpgsql
            AS $function$

            DECLARE
                lcl_sql_query varchar := '';
                lcl_first_of_reporting_month date;
                lcl_previous_reporting_month_date date;
                lcl_previous_reporting_month varchar := '';
                lcl_previous_reporting_year varchar := '';
                lcl_first_of_next_month date;
                lcl_financial_year varchar;
                lcl_quarter varchar;

            BEGIN
                -- Financial Year
                lcl_financial_year := academic_year || '-' || (academic_year + 1);
                -- Determine the quarter
                CASE
                    WHEN q_year = 1 THEN
                    lcl_quarter := 'Q1';
                    select to_date(academic_year || '-' || '07' || '-01','YYYY-MM-DD') into lcl_first_of_reporting_month;
                    select to_date(academic_year || '-' || '10' || '-01','YYYY-MM-DD') into lcl_first_of_next_month;
                    WHEN q_year = 2 THEN
                        lcl_quarter := 'Q2';
                        select to_date(academic_year || '-' || '10' || '-01','YYYY-MM-DD') into lcl_first_of_reporting_month;
                        select to_date(academic_year+1 || '-' || '01' || '-01','YYYY-MM-DD') into lcl_first_of_next_month;
                    WHEN q_year = 3 THEN
                        lcl_quarter := 'Q3';
                        select to_date(academic_year+1 || '-' || '01' || '-01','YYYY-MM-DD') into lcl_first_of_reporting_month;
                        select to_date(academic_year+1 || '-' || '04' || '-01','YYYY-MM-DD') into lcl_first_of_next_month;
                    WHEN q_year  = 4 THEN
                        lcl_quarter := 'Q4';
                        select to_date(academic_year+1 || '-' || '04' || '-01','YYYY-MM-DD') into lcl_first_of_reporting_month;
                        select to_date(academic_year+1 || '-' || '07' || '-01','YYYY-MM-DD') into lcl_first_of_next_month;
                END CASE;

                RAISE NOTICE 'Financial Year: %', lcl_financial_year;
                RAISE NOTICE 'Quarter: %', lcl_quarter;
                
                DROP TABLE IF EXISTS student_screening_temp;
                CREATE TABLE student_screening_temp(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT Null,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    student_district_id INTEGER NULL,
                    -- student_district TEXT NULL,
                    student_state_id INTEGER NULL,
                    -- student_state TEXT NULL,
                    month TEXT NULL,
                    student_name TEXT NULL,
                    student_creation_key TEXT NULL,
                    school_creation_key TEXT NULL,
                    age TEXT NULL,
                    gender TEXT NULL,
                    school_type TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    remarks TEXT NULL,
                    screening TEXT NULL default 'N',
                    spec_prescriped TEXT NULL default 'N',
                    spec_issued TEXT NULL default 'N',
                    surgery_advised TEXT NULL default 'N',
                    surgery_provided TEXT NULL default 'N'

                );
                RAISE NOTICE 'Table Created - student_screening_temp ....% ',CLOCK_TIMESTAMP();

                ----Screening (Y/N)

                --- suervey id = 4 (secondary screening)
                --- 405 - activity date
                --TODO check 1 quarter multiple screening happen ?

                INSERT INTO student_screening_temp (student_creation_key,month,p_academic_year,p_quarter,screening)
                select "cluster.BeneficiaryResponse" as ben_key ,
                to_char("response.405",'Month') as month ,lcl_financial_year,lcl_quarter,
                'Y' as screening 
                from export_csv_4_0_temp 
                where "response.405" >= lcl_first_of_reporting_month and "response.405" < lcl_first_of_next_month;

                
                --- suervey id = 3 (primary screening)
                --- 405 - activity date
                --TODO check 1 quarter multiple screening happen ?

                INSERT INTO student_screening_temp(student_creation_key,month,p_academic_year,p_quarter,screening)
                select "cluster.BeneficiaryResponse" as ben_key,
                to_char("response.407",'Month') as month ,lcl_financial_year,lcl_quarter,
                'Y' as screening
                from export_csv_3_0_temp 
                where 1=1 
                and "response.407" >= lcl_first_of_reporting_month 
                and "response.407" < lcl_first_of_next_month 
                and "cluster.BeneficiaryResponse" not in (select student_creation_key from student_screening_temp);


                
                --- Update child details
                -- survey_id - 2 (student details)
                
                update student_screening_temp x1
                set student_name = x2."response.238",
                age = x2."response.239",
                gender = x2."response.240",
                school_creation_key = x2."response.237",
                student_district_id = x2."address.2__id__",
                student_state_id = x2."address.1__id__"
                from export_csv_2_0_temp x2
                where x2.creation_key = x1.student_creation_key;


                --- Update school details
                    -- survey_id - 1 (school details)
                
                update student_screening_temp x1
                set school_type = x2."response.232",
                school_name = x2."response.231",
                school_district_id = x2."address.2__id__",
                school_district = x2."response.address.1.234.2",
                school_state_id = x2."address.1__id__",
                school_state = x2."response.address.1.234.1",
                remarks = x2."response.233"
                from export_csv_1_0_temp x2
                where x2.creation_key = x1.school_creation_key;


                ----update project_id  and donor_id

                update student_screening_temp x1
                set project_id = x2.project_id
                from 
                (
                    select t1.id as project_id,t1.district_id as am_district_id,t2.id as district_id 
                    from application_master_project t1 
                    inner join application_master_boundary t2 on t2.code::int = t1.district_id and t2.boundary_level_type_id = 2
                    where t1.active = 2 and t2.active = 2
                ) as x2
                where x2.district_id = x1.school_district_id;
                
                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_mission_mapping_id = x2.partner_mission_mapping_id
                from application_master_project x2
                where x2.district_id = x1.school_district_id;

                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_id = x2.partner_id
                from application_master_partnermissionmapping x2
                where x2.id = x1.partner_mission_mapping_id;


                ---- Update Donor Id 

                update student_screening_temp x1
                set donor_id = x2.donor_id
                from application_master_projectdonormapping x2
                where x2.project_id = x1.project_id;


                UPDATE student_screening_temp x1
                set surgery_advised = 'Y'
                from export_csv_5_0_temp x2
                where trim(lower(x2."response.344"))= 'yes'
                and x2."cluster.BeneficiaryResponse" = x1.student_creation_key;


                --- Sepctacles Prescribed (Y/N)
                    --- suervey id = 4 (secondary screening)
                    -- response.282 --- Prescribed glasses
                    --- 405 - activity date
                
                UPDATE student_screening_temp x1
                set spec_prescriped = 'Y'
                from export_csv_4_0_temp x2
                where trim(lower(x2."response.282"))= 'yes'
                and x2."cluster.BeneficiaryResponse" = x1.student_creation_key;


                -- Spectacles issued (Y/N)

                    -- - suervey id = 11 (spectacle dispensed)
                    -- response.445 --- Spectacle provision date

                Update student_screening_temp x1
                set spec_issued = 'Y'
                from export_csv_11_0_temp x2
                where 
                x2."response.445" >= lcl_first_of_reporting_month and x2."response.445" < lcl_first_of_next_month
                and x2."cluster.BeneficiaryResponse" = x1.student_creation_key;


                --- Surgery Provided (Y/N)
                    -- suervey id = 6 (Surgery Details)
                    -- response.345 surgery provided
                    -- response.346 surgery provided date

                Update student_screening_temp x1
                set surgery_provided = 'Y'
                from export_csv_6_0_temp x2
                where 
                x2."response.346" >= lcl_first_of_reporting_month
                and x2."response.346" < lcl_first_of_next_month
                and trim(lower(x2."response.345"))= 'yes'
                and x2."cluster.BeneficiaryResponse" = x1.student_creation_key;



                DROP TABLE IF EXISTS surgery_temp;
                CREATE TABLE surgery_temp(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT NULL,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    student_district_id INTEGER NULL,
                    student_state_id INTEGER NULL,  
                    student_name TEXT NULL,
                    student_creation_key TEXT NULL,
                    school_creation_key TEXT NULL,
                    age TEXT NULL,
                    gender TEXT NULL,
                    school_type TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    type_of_surgery TEXT NULL,
                    date_of_surgery	TEXT NULL,
                    eye_operated_upon TEXT NULL,
                    surgery_provided TEXT NULL,
                    phase TEXT NULL --TODO check with girish sir ,

                );

                RAISE NOTICE 'Table Created - surgery_temp ....% ',CLOCK_TIMESTAMP();

                -- ---surevy_id 6 (surgery details)
                --     --response.403 --  ACtivity date 
                --     -- response.349 -- Eye operated
                --     --response.347 -- Type of surgery

                INSERT INTO surgery_temp (student_creation_key,type_of_surgery,date_of_surgery,eye_operated_upon,surgery_provided,p_academic_year,p_quarter)
                select "cluster.BeneficiaryResponse" as ben_key,"response.347" as surgery_type , "response.403" as activity_date,"response.349" as eye_operated_upon,"response.345" as surgery_provided,lcl_financial_year,lcl_quarter from export_csv_6_0_temp
                where "response.403" >= lcl_first_of_reporting_month and "response.403" < lcl_first_of_next_month;

                
                --     --- Update child details
                --     -- survey_id - 2 (student details)
                
                update surgery_temp x1
                set student_name = x2."response.238",
                age = x2."response.239",
                gender = x2."response.240",
                school_creation_key = x2."response.237",
                student_district_id = x2."address.2__id__",
                student_state_id = x2."address.1__id__"
                from export_csv_2_0_temp x2
                where x2.creation_key = x1.student_creation_key;


                -- --- Update school details
                --     -- survey_id - 1 (school details)
                
                update surgery_temp x1
                set school_type = x2."response.232",
                school_name = x2."response.231",
                school_district_id = x2."address.2__id__",
                school_district = x2."response.address.1.234.2",
                school_state_id = x2."address.1__id__",
                school_state = x2."response.address.1.234.1"
                from export_csv_1_0_temp x2
                where x2.creation_key = x1.school_creation_key;

                --     ----update project_id and donor_id

                update surgery_temp x1
                set project_id = x2.project_id
                from 
                (
                    select t1.id as project_id,t1.district_id as am_district_id,t2.id as district_id 
                    from application_master_project t1 
                    inner join application_master_boundary t2 on t2.code::int = t1.district_id and t2.boundary_level_type_id = 2
                    where t1.active = 2 and t2.active = 2
                ) as x2
                where x2.district_id = x1.school_district_id;
                
                    ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_mission_mapping_id = x2.partner_mission_mapping_id
                from application_master_project x2
                where x2.district_id = x1.school_district_id;

                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_id = x2.partner_id
                from application_master_partnermissionmapping x2
                where x2.id = x1.partner_mission_mapping_id;

                update surgery_temp x1
                set donor_id = x2.donor_id
                from application_master_projectdonormapping x2
                where x2.project_id = x1.project_id;


                DROP TABLE IF EXISTS teacher_training_temp;
                CREATE TABLE teacher_training_temp(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT NULL,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    school_creation_key TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    month_of_training TEXT NULL,
                    teacher_name TEXT NULL,
                    gender TEXT NULL,
                    trained TEXT default 'N'

                );

                RAISE NOTICE 'Table Created - teacher_training_temp ....% ',CLOCK_TIMESTAMP();

                ---surevy_id 10 (Teacher Training)
                    --response.390 --  month of training 
                    -- response.391 -- Teacher Name
                    -- response.392 -- gender
                    -- response.393 -- Trained

                INSERT INTO teacher_training_temp(school_creation_key,school_name,school_district_id,school_district,school_state_id,school_state,month_of_training,teacher_name,gender,trained,p_academic_year,p_quarter)
                select "cluster.BeneficiaryResponse" as ben_key , "ben_type_question.231" as sch_name , "address.2__id__","ben_type_question.234.2","address.1__id__","ben_type_question.234.1", "response.390" as month_training ,
                "response.391" as teacher_name , "response.392" as gender , (case when lower(trim("response.393")) = 'yes' then 'Y' else 'N' end) as trained,lcl_financial_year,lcl_quarter
                from export_csv_10_0_temp
                where "response.404" >= lcl_first_of_reporting_month and "response.404" < lcl_first_of_next_month;

                --------update project_id and donor_id

                update teacher_training_temp x1
                set project_id = x2.project_id
                from 
                (
                    select t1.id as project_id,t1.district_id as am_district_id,t2.id as district_id 
                    from application_master_project t1 
                    inner join application_master_boundary t2 on t2.code::int = t1.district_id and t2.boundary_level_type_id = 2
                    where t1.active = 2 and t2.active = 2
                ) as x2
                where x2.district_id = x1.school_district_id;
                
                
                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_mission_mapping_id = x2.partner_mission_mapping_id
                from application_master_project x2
                where x2.district_id = x1.school_district_id;

                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_id = x2.partner_id
                from application_master_partnermissionmapping x2
                where x2.id = x1.partner_mission_mapping_id;

                update teacher_training_temp x1
                set donor_id = x2.donor_id
                from application_master_projectdonormapping x2
                where x2.project_id = x1.project_id;


                DROP TABLE IF EXISTS spectacle_complaince_temp;
                CREATE TABLE spectacle_complaince_temp(
                    id SERIAL PRIMARY KEY,
                    p_academic_year TEXT NULL,
                    p_quarter TEXT NULL,
                    donor_id INTEGER NULL,
                    project_id INTEGER NULL,
                    partner_mission_mapping_id INTEGER NULL,
                    partner_id INTEGER NULL,
                    student_district_id INTEGER NULL,
                    student_state_id INTEGER NULL,  
                    student_name TEXT NULL,
                    student_creation_key TEXT NULL,
                    school_creation_key TEXT NULL,
                    age TEXT NULL,
                    gender TEXT NULL,
                    school_type TEXT NULL,
                    school_name TEXT NULL,
                    school_district_id INTEGER NULL,
                    school_district TEXT NULL,
                    school_state_id INTEGER NULL,
                    school_state TEXT NULL,
                    spectacle_provided_on TEXT NULL,
                    follow_up_done_on TEXT NULL,
                    waering_complaince_after_3_month TEXT default 'N', -- TODO check with girish sir what is the question id for (spectacle_provided_on,follow_up_done_on)
                    using_spectacles TEXT NULL,
                    reason_for_not_wearing TEXT NULL 
                );    

                RAISE NOTICE 'Table Created - spectacle_complaince_temp ....% ',CLOCK_TIMESTAMP();

                ---surevy_id 8 (spectacle complaince)
                    --response.408  Activity Date
                    --response.355 Spectacle given
                    --response.358 reason_for_not_wearing

                INSERT INTO spectacle_complaince_temp (student_creation_key,spectacle_provided_on,reason_for_not_wearing,using_spectacles,p_academic_year,p_quarter)
                select "cluster.BeneficiaryResponse" as ben_key,"response.355" as spec_provided_date,"response.358" as reason_for_not_wearing,"response.356" as using_spectacles,lcl_financial_year,lcl_quarter
                from export_csv_8_0_temp
                where "response.408" >= lcl_first_of_reporting_month and "response.408" < lcl_first_of_next_month;

                --- Update child details
                    -- survey_id - 2 (student details)
                
                update spectacle_complaince_temp x1
                set student_name = x2."response.238",
                age = x2."response.239",
                gender = x2."response.240",
                school_creation_key = x2."response.237",
                student_district_id = x2."address.2__id__",
                student_state_id = x2."address.1__id__"
                from export_csv_2_0_temp x2
                where x2.creation_key = x1.student_creation_key;


                ----- update waering_complaince_after_3_month

                update spectacle_complaince_temp x1
                set waering_complaince_after_3_month = 'Y'
                where lower(trim(using_spectacles)) in ('yes','occasionally');

                --- Update school details
                    -- survey_id - 1 (school details)
                
                update spectacle_complaince_temp x1
                set school_type = x2."response.232",
                school_name = x2."response.231",
                school_district_id = x2."address.2__id__",
                school_district = x2."response.address.1.234.2",
                school_state_id = x2."address.1__id__",
                school_state = x2."response.address.1.234.1"
                from export_csv_1_0_temp x2
                where x2.creation_key = x1.school_creation_key;


            --------update project_id and donor_id

                update spectacle_complaince_temp x1
                set project_id = x2.project_id
                from 
                (
                    select t1.id as project_id,t1.district_id as am_district_id,t2.id as district_id 
                    from application_master_project t1 
                    inner join application_master_boundary t2 on t2.code::int = t1.district_id and t2.boundary_level_type_id = 2
                    where t1.active = 2 and t2.active = 2
                ) as x2
                where x2.district_id = x1.school_district_id;
                
                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_mission_mapping_id = x2.partner_mission_mapping_id
                from application_master_project x2
                where x2.district_id = x1.school_district_id;

                ----update partner_mission_mapping_id

                update student_screening_temp x1
                set partner_id = x2.partner_id
                from application_master_partnermissionmapping x2
                where x2.id = x1.partner_mission_mapping_id;

                update spectacle_complaince_temp x1
                set donor_id = x2.donor_id
                from application_master_projectdonormapping x2
                where x2.project_id = x1.project_id;
                
                
                DROP TABLE IF EXISTS program_tracker_data_temp;
                CREATE TABLE program_tracker_data_temp(
                id SERIAL PRIMARY KEY, 
                district_name varchar NULL,
                district_id INTEGER NULL,
                boundary_district_id INTEGER NULL,
                partner_id INTEGER NULL,
                partner_mission_id INTEGER NULL,
                project_id INTEGER NULL,
                project_name varchar NULL,
                financial_year varchar NULL,
                quarterly_year varchar NULL,
                overall_target INTEGER NULL,
                cummulative_target INTEGER NULL,
                actual_till_date INTEGER NULL,

                children_screened_q_target INTEGER NULL DEFAULT 0,
                children_prescribed_spectacles_q_target INTEGER NULL DEFAULT 0,
                children_provided_spectacles_q_target INTEGER NULL DEFAULT 0,
                children_refered_surgery_q_target INTEGER NULL DEFAULT 0,
                children_provided_surgery_q_target INTEGER NULL DEFAULT 0,
                schools_covered_q_target INTEGER NULL DEFAULT 0,
                teacher_trained_q_target INTEGER NULL DEFAULT 0,
                spectacle_compliance_3_months_q_target INTEGER NULL DEFAULT 0,

                children_screened_male INTEGER DEFAULT 0,
                children_screened_female INTEGER DEFAULT 0,
                children_screened_total INTEGER DEFAULT 0,
                children_screened_ach INTEGER DEFAULT 0,

                children_prescribed_spectacles_male INTEGER DEFAULT 0,
                children_prescribed_spectacles_female INTEGER DEFAULT 0,
                children_prescribed_spectacles_total INTEGER DEFAULT 0,
                children_prescribed_spectacles_ach INTEGER DEFAULT 0,

                children_provided_spectacles_male INTEGER DEFAULT 0,
                children_provided_spectacles_female INTEGER DEFAULT 0,
                children_provided_spectacles_total INTEGER DEFAULT 0,
                children_provided_spectacles_ach INTEGER DEFAULT 0,

                children_refered_surgery_male INTEGER DEFAULT 0,
                children_refered_surgery_female INTEGER DEFAULT 0,
                children_refered_surgery_total INTEGER DEFAULT 0,
                children_refered_surgery_ach INTEGER DEFAULT 0,

                children_provided_surgery_male INTEGER DEFAULT 0,
                children_provided_surgery_female INTEGER DEFAULT 0,
                children_provided_surgery_total INTEGER DEFAULT 0,
                children_provided_surgery_ach INTEGER DEFAULT 0,

                schools_covered_male INTEGER DEFAULT 0,
                schools_covered_female INTEGER DEFAULT 0,
                schools_covered_total INTEGER DEFAULT 0,
                schools_covered_ach INTEGER DEFAULT 0,

                teacher_trained_male INTEGER DEFAULT 0,
                teacher_trained_female INTEGER DEFAULT 0,
                teacher_trained_total INTEGER DEFAULT 0,
                teacher_trained_ach INTEGER DEFAULT 0,

                spectacle_compliance_3_months_male INTEGER DEFAULT 0,
                spectacle_compliance_3_months_female INTEGER DEFAULT 0,
                spectacle_compliance_3_months_total INTEGER DEFAULT 0,
                spectacle_compliance_3_months_ach INTEGER DEFAULT 0
            );



            INSERT INTO program_tracker_data_temp(district_id,financial_year,quarterly_year)
            select distinct(district_id),lcl_financial_year,lcl_quarter from application_master_project 
            where active = 2;



            ----update partner_mission_mapping_id

            update program_tracker_data_temp x1
            set partner_id = x2.partner_id
            from application_master_partnermissionmapping x2
            where x2.id = x1.partner_mission_id;


            ---- update target values:


            UPDATE program_tracker_data_temp x2
                SET children_screened_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 512 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;


            UPDATE program_tracker_data_temp x2
                SET children_prescribed_spectacles_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 513 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;

            UPDATE program_tracker_data_temp x2
                SET children_provided_spectacles_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 514 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;

            UPDATE program_tracker_data_temp x2
                SET children_refered_surgery_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 515 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;

            UPDATE program_tracker_data_temp x2
                SET children_provided_surgery_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 516 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;


            UPDATE program_tracker_data_temp x2
                SET schools_covered_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 517 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;

            UPDATE program_tracker_data_temp x2
                SET teacher_trained_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 518 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;


            UPDATE program_tracker_data_temp x2
                SET spectacle_compliance_3_months_q_target = (case when x2.quarterly_year = 'Q1' then x1.q1_target when x2.quarterly_year = 'Q2' then x1.q2_target when x2.quarterly_year = 'Q3' then x1.q3_target when x2.quarterly_year = 'Q4' then x1.q4_target end)
                FROM reports_quarterlyreport x1
                WHERE x1.indicator_id = 519 and x1.academic_year = split_part(x2.financial_year, '-', 1)::int;

            -----Update boundary id 

            update program_tracker_data_temp x2
            set boundary_district_id = x1.id
            from application_master_boundary x1
            where x1.code::int = x2.district_id;

            -----update children_screened -----

            UPDATE program_tracker_data_temp x2
            SET 
                children_screened_male = x1.m_cnt,
                children_screened_female = x1.f_cnt,
                children_screened_total = x1.cnt,
                children_screened_ach = CASE 
                                            WHEN x2.children_screened_q_target != 0 
                                            THEN (x1.cnt::float / x2.children_screened_q_target) * 100 
                                            ELSE 0 
                                        END
                FROM (
                    SELECT 
                        school_district_id as district_id,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(*) AS cnt
                        from student_screening_temp
                    GROUP BY school_district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;

            RAISE NOTICE 'Table Created - spectacle_complaince_temp ....%.....% ',lcl_first_of_reporting_month,lcl_first_of_next_month;


            -----schools_covered ---------

            update program_tracker_data_temp x2
            set 
            schools_covered_total = x1.cnt,
            schools_covered_ach = (CASE WHEN schools_covered_q_target != 0 THEN (x1.cnt::float /              schools_covered_q_target) * 100 ELSE 0 END)

            from(
                select "address.2__id__" as district_id,count(distinct(creation_key)) as cnt
                from export_csv_1_0_temp 
                where 1=1 
                and to_date(to_char(submission_date,'YYYY-MM-DD'),'YYYY-MM-DD') >= lcl_first_of_reporting_month 
                and to_date(to_char(submission_date,'YYYY-MM-DD'),'YYYY-MM-DD') < lcl_first_of_next_month
                group by "address.2__id__"
            ) as x1
            where x1.district_id = x2.boundary_district_id;


            -------teachers_trained (yes/no)

            UPDATE program_tracker_data_temp x2
            SET 
                teacher_trained_male = x1.m_cnt,
                teacher_trained_female = x1.f_cnt,
                teacher_trained_total = x1.cnt,
                teacher_trained_ach = CASE 
                                            WHEN teacher_trained_q_target != 0 
                                            THEN (x1.cnt::float / teacher_trained_q_target) * 100 
                                            ELSE 0 
                                        END
                FROM (
                    SELECT 
                        school_district_id as district_id,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(*) AS cnt
                        from teacher_training_temp 
                        where 1=1 and lower(trim(trained)) = 'y'
                        GROUP BY school_district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;


            ----- children_prescribed_spectacles

            UPDATE program_tracker_data_temp x2
            SET 
                children_prescribed_spectacles_male = x1.m_cnt,
                children_prescribed_spectacles_female = x1.f_cnt,
                children_prescribed_spectacles_total = x1.cnt,
                children_prescribed_spectacles_ach = CASE 
                                            WHEN children_prescribed_spectacles_q_target != 0 
                                            THEN (x1.cnt::float / children_prescribed_spectacles_q_target) * 100 
                                            ELSE 0 
                                        END

                FROM (
                    SELECT 
                        school_district_id as district_id,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(*) AS cnt
                        from student_screening_temp
                        where 1=1 and lower(trim(spec_prescriped)) = 'y'
                    GROUP BY school_district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;

            ---children_provided_spectacles----

            UPDATE program_tracker_data_temp x2
            SET 
                children_provided_spectacles_male = x1.m_cnt,
                children_provided_spectacles_female = x1.f_cnt,
                children_provided_spectacles_total = x1.cnt,
                children_provided_spectacles_ach = CASE 
                                            WHEN children_provided_spectacles_q_target != 0 
                                            THEN (x1.cnt::float / children_provided_spectacles_q_target) * 100 
                                            ELSE 0 
                                        END
                FROM (
                    SELECT 
                        school_district_id as district_id,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(*) AS cnt
                        from spectacle_complaince_temp
                        GROUP BY school_district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;


            --------children_advised_surgery

            UPDATE program_tracker_data_temp x2
            SET 
                children_refered_surgery_male = x1.m_cnt,
                children_refered_surgery_female = x1.f_cnt,
                children_refered_surgery_total = x1.cnt,
                children_refered_surgery_ach = CASE 
                                            WHEN children_refered_surgery_q_target != 0 
                                            THEN (x1.cnt::float / children_refered_surgery_q_target) * 100 
                                            ELSE 0 
                                        END
                FROM (
                    SELECT 
                        t1.district_id,
                        SUM(CASE WHEN LOWER(TRIM(t1.gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(t1.gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(t1.ben_reponse) AS cnt
                    FROM (
                        SELECT DISTINCT ON ("cluster.BeneficiaryResponse") 
                            "cluster.BeneficiaryResponse" AS ben_reponse,
                            "address.2__id__" AS district_id,
                            "ben_type_question.240" AS gender
                        FROM 
                            export_csv_5_0_temp 
                        where 1=1
                        and lower(trim("response.344")) = 'yes'
                        and "response.410" >= lcl_first_of_reporting_month 
                        and "response.410" < lcl_first_of_next_month
                        ORDER BY 
                            "cluster.BeneficiaryResponse", 
                            "response.410" DESC
                    ) AS t1
                    GROUP BY t1.district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;

            ------ children_provided_surgery

            UPDATE program_tracker_data_temp x2
            SET 
                children_provided_surgery_male = x1.m_cnt,
                children_provided_surgery_female = x1.f_cnt,
                children_provided_surgery_total = x1.cnt,
                children_provided_surgery_ach = CASE 
                                            WHEN children_provided_surgery_q_target != 0 
                                            THEN (x1.cnt::float / children_provided_surgery_q_target) * 100 
                                            ELSE 0 
                                        END
                FROM (
                    SELECT 
                        school_district_id AS district_id,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(*) AS cnt
                        FROM surgery_temp
                        where 1=1 and lower(trim(surgery_provided)) = 'yes'
                    GROUP BY district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;

            -----spectacle_compliance_3_months


            UPDATE program_tracker_data_temp x2
            SET 
                spectacle_compliance_3_months_male = x1.m_cnt,
                spectacle_compliance_3_months_female = x1.f_cnt,
                spectacle_compliance_3_months_total = x1.cnt,
                spectacle_compliance_3_months_ach = CASE 
                                            WHEN spectacle_compliance_3_months_q_target != 0 
                                            THEN (x1.cnt::float / spectacle_compliance_3_months_q_target) * 100 
                                            ELSE 0 
                                        END
                FROM (
                    SELECT 
                        school_district_id as district_id,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'male' THEN 1 ELSE 0 END) AS m_cnt,
                        SUM(CASE WHEN LOWER(TRIM(gender)) = 'female' THEN 1 ELSE 0 END) AS f_cnt,
                        COUNT(*) AS cnt
                        FROM spectacle_complaince_temp 
                        where 1=1
                        and lower(trim(using_spectacles)) in ('yes','occasionally')
                    GROUP BY school_district_id
                ) AS x1
            WHERE x1.district_id = x2.boundary_district_id;


            ----- INSERT MAIN TABLE---------------------------------

                delete from student_screening_data where p_academic_year = lcl_financial_year and p_quarter = lcl_quarter;
                delete from surgery_data where p_academic_year = lcl_financial_year and p_quarter = lcl_quarter;
                delete from teacher_training_data where p_academic_year = lcl_financial_year and p_quarter = lcl_quarter;
                delete from spectacle_complaince_data where p_academic_year = lcl_financial_year and p_quarter = lcl_quarter;
                delete from program_tracker_data where financial_year = lcl_financial_year and quarterly_year = lcl_quarter;

                INSERT INTO student_screening_data(p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,student_district_id,student_state_id,month,student_name,student_creation_key,school_creation_key,age,gender,school_type,school_name,school_district_id,school_district,school_state_id,school_state,remarks,screening,spec_prescriped,spec_issued,surgery_advised,surgery_provided)
                select p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,student_district_id,student_state_id,month,student_name,student_creation_key,school_creation_key,age,gender,school_type,school_name,school_district_id,school_district,school_state_id,school_state,remarks,screening,spec_prescriped,spec_issued,surgery_advised,surgery_provided from student_screening_temp;


                INSERT INTO surgery_data(p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,student_district_id,student_state_id,student_name,student_creation_key,school_creation_key,age,gender,school_type,school_name,school_district_id,school_district,school_state_id,school_state,type_of_surgery,date_of_surgery,eye_operated_upon,surgery_provided,phase)
                select p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,student_district_id,student_state_id,  
                student_name,student_creation_key,school_creation_key,age,gender,school_type,school_name,school_district_id,school_district,school_state_id,school_state,type_of_surgery,date_of_surgery,eye_operated_upon,surgery_provided,phase from surgery_temp;


                INSERT INTO teacher_training_data(p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,school_creation_key,school_name,school_district_id,school_district,school_state_id,school_state,month_of_training,teacher_name,gender,trained)
                select p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,school_creation_key,school_name,school_district_id,school_district,school_state_id,school_state,month_of_training,teacher_name,gender,trained from teacher_training_temp;

                INSERT INTO spectacle_complaince_data(p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,student_district_id,student_state_id,student_name,student_creation_key,school_creation_key,age,gender,school_type,school_name,school_district_id,school_district,school_state_id,school_state,spectacle_provided_on,follow_up_done_on,waering_complaince_after_3_month,reason_for_not_wearing,using_spectacles)
                select p_academic_year,p_quarter,donor_id,project_id,partner_mission_mapping_id,partner_id,student_district_id,student_state_id,  
                student_name,student_creation_key,school_creation_key,age,gender,school_type,school_name,school_district_id,school_district,school_state_id,school_state,spectacle_provided_on,follow_up_done_on,waering_complaince_after_3_month,reason_for_not_wearing,using_spectacles 
                from spectacle_complaince_temp;



                INSERT INTO program_tracker_data (district_name,district_id,boundary_district_id,partner_id,partner_mission_id,project_id,project_name,financial_year,quarterly_year,overall_target,cummulative_target,actual_till_date,
                children_screened_q_target,children_prescribed_spectacles_q_target,children_provided_spectacles_q_target,children_refered_surgery_q_target,children_provided_surgery_q_target,schools_covered_q_target,teacher_trained_q_target,spectacle_compliance_3_months_q_target,children_screened_male,children_screened_female,children_screened_total,children_screened_ach,
                children_prescribed_spectacles_male,children_prescribed_spectacles_female,children_prescribed_spectacles_total,children_prescribed_spectacles_ach,
                children_provided_spectacles_male,children_provided_spectacles_female,children_provided_spectacles_total,children_provided_spectacles_ach,children_refered_surgery_male,children_refered_surgery_female,children_refered_surgery_total,children_refered_surgery_ach,children_provided_surgery_male,children_provided_surgery_female,children_provided_surgery_total,children_provided_surgery_ach,
                schools_covered_male,schools_covered_female,schools_covered_total,schools_covered_ach,
                teacher_trained_male,teacher_trained_female,teacher_trained_total,teacher_trained_ach,
                spectacle_compliance_3_months_male,spectacle_compliance_3_months_female,spectacle_compliance_3_months_total,spectacle_compliance_3_months_ach)
                select district_name,district_id,boundary_district_id,partner_id,partner_mission_id,project_id,project_name,financial_year,quarterly_year,overall_target,cummulative_target,actual_till_date,
                children_screened_q_target,children_prescribed_spectacles_q_target,children_provided_spectacles_q_target,children_refered_surgery_q_target,children_provided_surgery_q_target,schools_covered_q_target,teacher_trained_q_target,spectacle_compliance_3_months_q_target,children_screened_male,children_screened_female,children_screened_total,children_screened_ach,
                children_prescribed_spectacles_male,children_prescribed_spectacles_female,children_prescribed_spectacles_total,children_prescribed_spectacles_ach,
                children_provided_spectacles_male,children_provided_spectacles_female,children_provided_spectacles_total,children_provided_spectacles_ach,children_refered_surgery_male,children_refered_surgery_female,children_refered_surgery_total,children_refered_surgery_ach,children_provided_surgery_male,children_provided_surgery_female,children_provided_surgery_total,children_provided_surgery_ach,
                schools_covered_male,schools_covered_female,schools_covered_total,schools_covered_ach,
                teacher_trained_male,teacher_trained_female,teacher_trained_total,teacher_trained_ach,
                spectacle_compliance_3_months_male,spectacle_compliance_3_months_female,spectacle_compliance_3_months_total,spectacle_compliance_3_months_ach
                from program_tracker_data_temp;

            END;
            $function$;
            """
        )

    ]
