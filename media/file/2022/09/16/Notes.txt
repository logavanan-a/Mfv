#####################################################################4-07-2022##################################################################
district.state.id

task_obj = task_obj.filter(user = request.user,start_date__month__lte = below_last_two_month.month, start_date__year__lte = below_last_two_month.year).order_by('listing_order')


def download_file(request, id):
    # import ipdb;ipdb.set_trace()
    # import urllib2
    # from pathlib2 import Path
    from django.http import FileResponse
    from django.conf import settings
    from django.core.files.storage import FileSystemStorage
    # art_center_code = request.GET.get('art_center_code')
    # id = request.GET.get('id')

    if  id and id != '':
        survey = MonthlyMLL.objects.get(id=id)
        #TODO If Location filters are selected then query else return the comple dump file from survey report file_name
        filter_locations = load_user_details_to_session(request)
        file_name = survey.report_file_name

        path = settings.MEDIA_ROOT +"/export_data/"
        response = HttpResponse(content_type='application/text charset=utf-8')
        file_exist = True
        fs = FileSystemStorage(path)
        if file_name is not None and file_name != '' and fs.exists(file_name):
            response = FileResponse(fs.open(file_name, 'rb'), content_type='application/force-download charset=utf-8')
            response['Content-Disposition'] = 'attachment; filename="' + file_name + '"'
            file_exist = True
        else:
            file_exist = False
            response.write("File does not exist")
        return response









/patient/monthlymll/

  input: 'textarea',
  showCancelButton: true,
  confirmButtonText: 'Submit',
  showLoaderOnConfirm: true,
  allowOutsideClick: false

'<input type="textarea" id="swal-input1" placeholder ="altes Kennwort" class="swal2-input">',
data:{status_val:val,remark: document.getElementById('swal-input1').value}, 


dataentry_obj   DataEntryRemark.objects.create(task = task_obj, remark = remark, user_name = request.user)


https://docs.google.com/document/d/1UfV2qpVR5xygLbjOdpK18EsRNwGHRu5n/edit?rtpof=true

/home/mahiti/Documents/Job_Aid/job-aid/media/{{patient.report_file_name}}/
data:{status_val:val, remark : "sdoksd;ok"}, 

c3 web
Username: fossilcc1
Password: c3web@2022

https://c3misstaging.mahiti.org
django admin :
user: 
passwor:c3web@2022 

Ui Page
user:fossilcc1
passwor:c3web@2022
{{s.task.id}}

fossil_po_monthly_report


    health_sessions = AHSession.objects.filter(status=1, adolescent_name__awc__id__in=awc_id, task__id = task_id)


    path('cc/monthly/report/', cc_monthly_report, name="cc_monthly_report"),
    path('po/monthly/report/', po_monthly_report, name="po_monthly_report"),


task_obj = Task.objects.get(status=1, id=task_id)
    user_role = str(get_user(request).groups.last())
    user_report = MisReport.objects.filter(report_to = request.user).values_list('report_person__id', flat=True)
    task  =  Task.objects.filter(user__id__in = user_report).values_list('id', flat=True)
    panchayat_id = CC_AWC_AH.objects.filter(status=1, user=request.user).values_list('awc__village__grama_panchayat__id')
    village_id = CC_AWC_AH.objects.filter(status=1, user=request.user).values_list('awc__village__id')
    school_id = CC_School.objects.filter(status=1, user=request.user).values_list('school__id')
    awc_id = CC_AWC_AH.objects.filter(status=1, user=request.user).values_list('awc__id')
    awc_dl_id = CC_AWC_DL.objects.filter(status=1, user=request.user).values_list('awc__id')

    awc_objs = AWC.objects.filter(id__in = task_obj.awc)
    block_name = awc_objs.values_list('village__grama_panchayat__block__name', flat=True )
    district_name = awc_objs.values_list('village__grama_panchayat__block__district__name', flat=True )
    cc_awc_ah = awc_objs.count()
    participating_meeting = ParticipatingMeeting.objects.filter(user_name=request.user.id, task__id = task_id)
    sessions_monitoring = SessionMonitoring.objects.filter(status=1, task__id = task_id)
    facility_visits = Events.objects.filter(status=1, task__id = task_id)
    
    health_sessions = AHSession.objects.filter(status=1, task__id__in = task)#1
    digital_literacy = DLSession.objects.filter(status=1, task__id__in = task)#2
    vocation =  AdolescentVocationalTraining.objects.filter(status=1, task__id__in = task)#3
    girls_ahwd = GirlsAHWD.objects.filter(status=1, task__id__in = task)#4
    boys_ahwd = BoysAHWD.objects.filter(status=1, task__id__in = task)#5
    adolescents_referred =  AdolescentsReferred.objects.filter(status=1, task__id__in = task)#6
    friendly_club = AdolescentFriendlyClub.objects.filter(status=1, task__id__in = task)#7
    balsansad_meeting = BalSansadMeeting.objects.filter(status=1, task__id__in = task)#8
    activities = CommunityEngagementActivities.objects.filter(status=1, task__id__in = task)#9
    champions =  Champions.objects.filter(status=1, task__id__in = task)#10
    adolescent_reenrolled =  AdolescentRe_enrolled.objects.filter(status=1, task__id__in = task)#11


value="{% if health_sessions.date_of_session == 'health_sessions.date_of_session' %}{{health_sessions.date_of_session|date:'Y-m-d'}}{% endif %}
"


https://docs.google.com/spreadsheets/d/130RISSqWj_u-g0yHMIcCrzMYykuoqsPXYXpSpgeYOJQ/edit#gid=0


project_in_charge

test@123


from mis.models import Task
from application_master.models import Project
from mis.views import *
from django.contrib.auth.models import User

def task_create():
     for user_obj in User.objects.filter(is_superuser = False):
         if user_obj:
             for project_obj in Project.objects.filter(active=2):
		project_name = project_obj.name
		print(project_name)
		
               

task_create()




User.objects.filter(is_superuser = False)







task_create()



window.location.href=`/task-list/`




from mis.models import Task
from application_master.models import Project
from mis.views import *
from django.contrib.auth.models import User
def task_create():
    for user_obj in User.objects.filter(is_superuser = False):
        if user_obj:
            for visio_ncentre in Project.objects.filter(active=2):
                string_cancate = visio_ncentre.name
                print(string_cancate)
		added = Task(project = visio_ncentre,user=user_obj, name = string_cancate, start_date="2022-08-01",end_date= "2022-08-31")
                added.save()
         
task_create()






# def task_create():
#     for user_obj in User.objects.filter(is_superuser = False):
#         if user_obj:
#             for visio_ncentre in Project.objects.filter(active=2):
#                 string_cancate = visio_ncentre.name
#                 print(string_cancate)
#                 added = Task(project = visio_ncentre,user=user_obj, name = string_cancate, start_date="2022-08-01",end_date= "2022-08-31")
#                 added.save()

# task_create()    
















 STATUS_CHOICES = ((1, 'Pending'), (2, 'Submitted for Partner Admin'),(3, 'Submitted for Project In-charge'), (4, 'Approved'), (5,  'Rejected'), (6, 'Cancelled'))


MEETING_CHOICE = (
	(1, 'Monthly Review meeting'),
	(2, 'Quarterly review meeting'),
	(3, 'Event planning meeting'),
	(4, 'Issue based meeting'),
	(5, 'SMC meeting'),
	(6, 'Convergence meeting'),
	(7, 'Others')
	)

    DEPARTMENT = (
	(1, 'Health'),
	(2, 'WCD'),
	(3, 'PRI'),
	(4, 'District administration'),
	(5, 'Block administration'),
	(6, 'Child protection'),
	(7, 'Education'),
	(8, "Partner organization’s meeting"),
	(9, 'Others')
    )

    date = models.DateField()
    user_name = models.ForeignKey(
        User, on_delete=models.DO_NOTHING, blank=True, null=True)
    type_of_meeting = models.CharField(max_length=150)
    # type_of_meeting = models.IntegerField(choices=MEETING_CHOICE, blank=True, null=True)
    department = models.CharField(max_length=150)
    # department = models.IntegerField(choices=DEPARTMENT, blank=True, null=True)


if request.method == 'POST':
        data = request.POST
        name_of_visited = data.get('name_of_visited')
        selected_field_other = data.get('selected_field_other')
        
        if name_of_visited == '1':
            content_type_model='village'
            selected_object_id=data.get('selected_field_village')
        elif name_of_visited == '2':
            content_type_model='awc'
            selected_object_id=data.get('selected_field_awc')
        else:
            content_type_model='school'
            selected_object_id=data.get('selected_field_school')

        date = data.get('date')
        session_attended = data.get('session_attended')
        observation = data.get('observation')
        recommendation = data.get('recommendation')
        task = Task.objects.get(id=task_id)

        sessions_monitoring = SessionMonitoring.objects.create(name_of_visited=name_of_visited, session_attended=session_attended,
        date=date,
        observation=observation, recommendation=recommendation, task=task, site_id = current_site)
        
        if selected_object_id:
            content_type = ContentType.objects.get(model=content_type_model)
            sessions_monitoring.content_type=content_type
            sessions_monitoring.object_id=selected_object_id
        
        if name_of_visited in ['4','5']:
            sessions_monitoring.name_of_place_visited = selected_field_other

        sessions_monitoring.save()


others

(4, 'HSC'),
(5, 'AWC'),
(6, 'HWC'),
(7, 'AFHC'),
(8, 'CHC'),
(9, 'PHC'),
(10, 'Vocational Training Institute'),
(11, 'Other Public Service Institutions'),
(12, 'Others')





   VISITED_CHOICE = ((1, 'Village'), (2, 'AWC'),  (3, 'School'),(4, 'Vocational training institute'),(5, 'Others'))
    # name_of_place_visited = models.CharField(max_length=150, blank=True, null=True)


BoysAHWD

[Yesterday 15:53] Akash T S
Please pull branch model_design to https://c3misdev.mahiti.org
Login | C3 Web Mis 
Premium Multipurpose Admin & Dashboard Template


model_design
>>> from application_master.models import *
>>> upm = UserPartnerMapping.objects.get(user__id = 2)
>>> upm
<UserPartnerMapping: HV Desai Eye hospital (HVDEH)-Pune, Maharashtra>

>>> pmp = PartnerMissionMapping.objects.filter(mission__id__in= [1,2],partner=upm.partner)
>>> pmp
<QuerySet [<PartnerMissionMapping: HV Desai Eye hospital (HVDEH)-Pune, Maharashtra - Mission Roshni>, <PartnerMissionMapping: HV Desai Eye hospital (HVDEH)-Pune, Maharashtra - Mission Disha>]>


request.user.groups.all.0


{% if a.nameactoi == 1 %}{{event_name.name }}{% else %}{{event_name.name}}{% endif %}


event_name.name
python manage.py makemigrations --empty dashboard

migrations.RunSQL('drop view if exists dash_child_cci_category'),










<th>Name of the main Facilitator</th>
<th>Designation (ANM, Sahiya, Sevika, Peer Educator, Cluster Coordinator, Project Officer, Others)</th>

masterlookups_event = MasterLookUp.objects.filter(slug = 'event')
masterlookups_activity = MasterLookUp.objects.filter(slug = 'activities')

<td>{{s.facilitator_name}}</td>
<td>{{s.get_designation_data_display}}</td>

The entry of age should be limited to 18 to 26 years


fossil_dl_session_obj =  FossilDLSessionCategory.objects.filter(fossil_ah_session_category__id = fossil_dl_session_id)

fossil_dl_session_category_id = data.get('fossil_dl_session_category')


<input type="text" pattern="[A-Za-z ]{0,150}" class="form-control"  name='facilitator'  id="facilitator"
                                    placeholder="Enter the Facilitator Name" required>
   

{% if task_obj.task_status == 1 and 'Program Officer' == user_role%}


{% endif %}
user = get_user(request)
user_role = str(user.groups.last())



department = models.IntegerField(choices=DEPARTMENT, blank=True, null=True)
value="{% if health_sessions.date_of_session == 'health_sessions.date_of_session' %}{{health_sessions.date_of_session|date:'Y-m-d'}}{% endif %}
"
pip freeze > requirements.txt

  Meeting with (Department)

pip install Pillow 

from application_master.models import *
Adolescent Name name 
1 show name and village name

  facilitator_name  

c3 web
Username: fossilcc1
Password: c3web@2022

https://c3misstaging.mahiti.org
django admin :
user: 
passwor:c3web@2022 

Ui Page
user:fossilcc1
passwor:c3web@2022

rnpcc1 FOSSIL PO/SPO monthly entry format 


 id='vaction_training_model'
id='other_model'


sudo nano /etc/hosts

request.session['site_id'] = Site.objects.get(domain=request.META['HTTP_HOST']).id

site = request.session.get('site_id')
pip install django-import_export
http://rnp.c3misdev.mahiti.org/
>>>>>>>>>>>>>

from application_master.models import UserPartnerMapping
from  .views import *
UserPartnerMapping.objects.get(id == 6).delete()
obj = UserPartnerMapping.objects.get(id == 6)
obj.delete()

def login_view(request):
    heading = "Login"
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        data = getData(request)
        if UserSiteMapping.objects.filter(site__domain = data.get('site')).exists():

            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return HttpResponseRedirect('/monthly/report/')
            else:
                logout(request)
                error_message = "Invalid Username and Password"

        else:
            logout(request)
            error_message = "Do not have access"




user_site_obj = UserSiteMapping.objects.get(status=1, user=request.user)
    # user_site_obj.site.objects.get_current()
    task  =  Task.objects.filter(status=1, user = user_site_obj.user,)
    
    if user_site_obj.site.domain == 'http://fossilmis':
        report_site = '/fossil/cc/monthly/report/'

>>>>>>>>>>>>>














convene2demo


def getData(request):
    
    """ Get Data of subdomain """

    subDomain = request.META['HTTP_HOST'].lower().split('.')
    i = 0
    if subDomain[0] == 'www':
        i = (i + 1)
    codeobj = slugify(subDomain[i])

    return {

	'code': codeobj,

	}


@ login_required(login_url='/login/')
def monthly_report(request):
    heading="Monthly Report"
    group = request.user.groups.all()
    # current_site = get_current_site(request)
    # current_site1 = getData(request)
    user_site_obj = UserSiteMapping.objects.get(status=1, user=request.user)
    # user_site_obj.site.objects.get_current()
    task  =  Task.objects.filter(status=1, user = user_site_obj.user,)
    
    if user_site_obj.site.domain == 'http://fossilmis':
        report_site = '/fossil/cc/monthly/report/'

    elif user_site_obj.site.domain == 'http://rnp':
        report_site= '/rnp/cc/monthly/report/'
        
    elif user_site_obj.site.domain == 'http://untrust':
        report_site= '/untrust/cc/monthly/report/'
   


def login_view(request):
    heading = "Login"
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        try:
            findUser = User._default_manager.get(username__iexact=username)
        except User.DoesNotExist:
            findUser = None
        if findUser is not None:
            username = findUser.get_username()
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return HttpResponseRedirect('/monthly/report/')
        else:
            logout(request)
            error_message = "Invalid Username and Password"
    return render(request, 'dashboard/login.html', locals())







127.0.0.1       fossil
127.0.0.1       rnp
127.0.0.1       untrust 






data.get('site')

class Site(models.Model):

    domain = models.CharField(_('domain name'), max_length=100,
        validators=[_simple_domain_name_validator])
    name = models.CharField(_('display name'), max_length=50)

def getData(request):

    """ Get Data of subdomain """

    subDomain = request.META['HTTP_HOST'].lower().split('.')
    i = 0
    if subDomain[0] == 'www':
        i = (i + 1)
    codeobj = slugify(subDomain[i])

	site_obj = get_object_or_404(Site, name__iexact=codeobj))

    return {

    'site': site_obj.domain,

    }



def manage_home(request):
    data = getData(request)
    vendor_obj = get_object_or_404(Vendor, name__iexact=str(data['code']))
    country, created = Country.objects.get_or_create(name = "India", 
                                vendor = vendor_obj,
                                defaults = dict(code="IND",
                                        display_name = "India"))
    state = State.objects.filter(country__vendor=vendor_obj).order_by('-name')
    district = District.objects.filter(state__country__vendor=vendor_obj).order_by('-name')
    #return render_to_response('manage_home.html', locals(), context_instance = RequestContext(request))
    master_data = MasterData.objects.filter(parent = None)
    return render(request, 'index.html', locals())













https://c3misdev.mahiti.org/
Login | C3 Web Mis 
Premium Multipurpose Admin & Dashboard Template


https://c3misdev.mahiti.org/static/c3_mis_dev_17aug22.sql.gz
Login | C3 Web Mis 
Premium Multipurpose Admin & Dashboard Template




import base64
def hash_decode(mission, hash_code):
    base64_string = hash_code[:-2] + hash_code[len(hash_code) - 2:].replace('9','=')
    # base64_string=hash_code.replace('9','=')
    base64_bytes = base64_string.encode("ascii")
    sample_string_bytes = base64.b64decode(base64_bytes)
    sample_string = sample_string_bytes.decode("ascii")
    sample_string = sample_string.replace(mission,'')
    # original_id = base64.b64decode(hash_code.replace('9','=').encode("ascii")).decode("ascii").replace(mission,'')

    return sample_string
ArtRegistration

Indubai Shankar Aswale page number 29 inactive

    ipt_ref = IPT.objects.get_or_none(patient__uuid = '05f859ea-0bcc-4038-ac96-c76cf4d6c60f', active=2)

task_id = hash_decode(slug,task_id)

onkeypress='return event.charCode >= 48 && event.charCode <= 57'

id = hash_decode(slug,id)
task_id = hash_decode(slug,task_id)
print(task_id,'idid')

05f859ea-0bcc-4038-ac96-c76cf4d6c60f

{% id_to_hash_code task.project.partner_mission_mapping.mission.slug task.id %}
    search_fields = ['patient__uuid']


 <td><b><a href="/mission_edit/{{task.project.partner_mission_mapping.mission.slug}}/{{task.id}}/{{task.get_task.id}}/">{% if task.task_status == 2 or task.task_status == 3 %}View{% else %}Edit{% endif %}</a></b></td>
                                                    {% else %}
                                                    <td><b><a href="/{{task.project.partner_mission_mapping.mission.slug}}/monthly-report/{{task.id}}/">Add</a></b></td>
                                                    {% endif %}
shatabdi.jobaidtest.com:8000

shatabdi.mdacs-jobaid.com:8000
agarwal.jobaidtest.com:8000
onkeypress="return /[0-9]/i.test(event.key)"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

s = '10'

h = sha256()
h.update(s.encode())
out = h.digest().hex()
print(out)


import hashlib
print(hashlib.md5(b"H").hexdigest())



from hashlib import sha256
h = sha256()
h.update(b'2')
hash = h.hexdigest()
print(hash)


def hash_decode(mission, hash_code):
    original_id = base64.b64decode(hash_code.replace('9','=').encode("ascii")).decode("ascii").replace(mission,'')
    return original_id


try:
        base64_string=hash_code.replace('1','=')
        sample_string = base64_string.decode("ascii")
    except:   
        base64_bytes = hash_code.encode("ascii")

    sample_string_bytes = base64.b64decode(base64_bytes)
    sample_string = sample_string_bytes.decode("ascii")


                                                    <td><b><a href="/{{task.project.partner_mission_mapping.mission.slug}}/monthly-report/{% id_to_hash_code task.project.partner_mission_mapping.mission.slug  task.id %}/">Add</a></b></td>




from base64 import b64decode

def hash_decode(mission, hash_code):
    original_id = base64.b64decode(hash_code.replace('9','=').encode("ascii")).decode("ascii").replace(mission,'')
    return original_id


  print(task_id)
    task_id = hash_decode(slug, task_id)
    
    task_id = 12

import base64
hex_data ='57696C6C20796F7520636F6E76657274207468697320484558205468696E6720696E746F20415343494920666F72206D653F2E202E202E202E506C656565656173652E2E2E212121'
ascii_string = str(base64.b16decode(hex_data))[2:-1]
print (ascii_string)


x = 'b4c9a289323b21a01c3e940f150eb9b8c542587f1abfd8f0e1cc1ffc5e475514'
base64.b64encode(bytes.fromhex(x)).decode()



project__partner_mission_mapping__partner



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    project_objs = Project.objects.filter(active=2).order_by('name')


        project_objs = project_objs.filter(partner_mission_mapping__mission__id = mission)





<td>     
                                            {% disply_indicator_values mission_respose_obj.id sub_category.id  'total_' as total %}                                  
                                            <input type="number" id="txtresult"  name="total_{{sub_category.id}}" value="{{total}}" class="form-control row_total" readonly > 
                                        </td>
                                       <td>
                                            {% disply_indicator_values mission_respose_obj.id sub_category.id  'adult_male_' as adult_male %} 
                                            <input type="number" name="adult_male_{{sub_category.id}}" value="{{adult_male}}"  class="form-control adult_male" id="adult_male_id" >
                                        </td>
                                        <td>
                                            {% disply_indicator_values mission_respose_obj.id sub_category.id  'adult_female_' as adult_female %} 
                                            <input type="number" name="adult_female_{{sub_category.id}}" value="{{adult_female}}" class="form-control adult_female" id="adult_female_id" >
                                        </td>


















UserRoles.objects.get(user=user)

def get_location_type(self):
        loc_ = []
        get_organization = OrganizationLocation.objects.filter(
            active=2, user=self).values_list('location__id').order_by('-id')
        if get_organization:
            loc_ = list(chain.from_iterable(list(get_organization)))
        return loc_

projectobj = Project.objects.get_or_none(id=176)

BtypeWithCountListing

[<Survey: Households>, <Survey: Groups>, <Survey: People>, <Survey: Institutions>]

s_obj = Survey.objects.all()
b_obj = BeneficiaryType.objects.all()

answers = JsonAnswer.objects.all()

b_obj = BeneficiaryType.objects.filter(id__in = [2,3,11,13])


from application_master.models import Project
from mis.views import *  
from datetime import datetime
import csv
# Project report 
def projects_report():
    file_name = "Project_Export_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['id', 'Project_Name', 'Partner_id', 'Partner_Name','Mission_id', 'Mission_Name']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 
        for p_obj in Project.objects.filter(active=2):
            writer.writerow({'id': p_obj.id, 'Project_Name': p_obj.name, 'Partner_id':  p_obj.partner_mission_mapping.partner.id, 'Partner_Name':  p_obj.partner_mission_mapping.partner.name,'Mission_id': p_obj.partner_mission_mapping.mission.id, 'Mission_Name': p_obj.partner_mission_mapping.mission.name})  
            print(p_obj.id)
        print("Writing complete")  
projects_report()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
from application_master.models import MissionIndicator
from mis.views import *  
from datetime import datetime

import csv
# Mission Indicator report 
def report():
    file_name = "mission_indicator_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['id', 'name', 'mission_indicator_category', 'mission']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 
        for mi_obj in MissionIndicator.objects.all():
            writer.writerow({'id': mi_obj.id, 'name': mi_obj.name, 'mission_indicator_category':  mi_obj.category.name,'mission':mi_obj.category.mission})  
            print(mi_obj.id)
        print("Writing complete")  
report()

  



  
data_to_be_deleted = MissionIndicatorTarget.objects.all()
data_to_be_deleted.delete()

from application_master.models import MissionIndicatorTarget,MissionIndicator, Project
from django.contrib.auth.models import User
from mis.views import *    
  
data_to_be_deleted = MissionIndicatorTarget.objects.all()
data_to_be_deleted.delete()


for bl in range(1,(max_boundary_level_code+1)):
        filter_condition = ""
        if not request.user.is_superuser and locations_data[bl-1] and locations_data[bl-1][3] == True:
            if widget_obj.query_type == 'SQL':
                filter_condition = ' and ' + filter_table_name + '"address.' + str(bl) + '__id__" in (' + ','.join([str(loc[0]) for loc in locations_data[bl-1][2]]) + ') '
        # sql_query = sql_query.replace('@@' + boundary_level_names.get(str(bl)) + '_filter', filter_condition)
        sql_query = sql_query.replace('@@' + boundary_level_names.get(str(bl)) + '_in_filter', filter_condition)
    if request.method  == 'POST':
        from datetime import datetime
        # from_date = datetime.strptime(request.POST.get('from_date'), '%Y-%m-%d')
        from_date_value = datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y").strftime("%Y-%m-%d")
        to_date_value = datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y").strftime("%Y-%m-%d")
        from_date = " and submission_date >= " + "'" + from_date_value + "'"
        to_date = " and submission_date <= " + "'" + to_date_value + "'"
        from_deactivate_date = " and (deactivated_date is null or deactivated_date >= '" + from_date_value + "') "
    # import ipdb; ipdb.set_trace()
    project_list = request.session.get('user_project_list')
    project_filter = ''
    if project_list:
        project_filter = ' and project_id in (' + ','.join([str(project) for project in project_list]) + ') '
    user_survey_list = request.session.get('survey_list')
    user_survey_filter = ''
    if user_survey_list:
        user_survey_filter = ' and survey_id in (' + ','.join([str(survey) for survey in user_survey_list]) + ') '
    sql_query = sql_query.replace('@@survey_in_filter',user_survey_filter)
    sql_query = sql_query.replace('@@from_activity_date',from_date)
    sql_query = sql_query.replace('@@to_activity_date',to_date)
    sql_query = sql_query.replace('@@project_in_filter',project_filter)
    sql_query = sql_query.replace('@@from_submission_date',from_date)
    sql_query = sql_query.replace('@@to_submission_date',to_date)
    sql_query = sql_query.replace('@@from_deactivated_date',from_deactivate_date)
    print(sql_query)        







def mission_indicator_target():
    user_obj = User.objects.get(id = 1)
    p_list = Project.objects.filter(active=2)
    for project in p_list:
        for mis_indicat in MissionIndicator.objects.all():
            MissionIndicatorTarget.objects.create(mission_indicator = mis_indicat,project = project, target=300, periodicity_date = '2023-04-01', created_by = user_obj)
            print('start')

mission_indicator_target()

MissionIndicatorTarget.objects.delete()

Awareness generation with parents (nos)
ALLIED OPHTHALMIC PERSONNEL (AOP) as sanctioned? as per MoU
ALLIED OPHTHALMIC PERSONNEL (AOP) enrolled in Beginning
Blood investigations
Number of NEW babies who received screening


#f8f9fa ==== #b6d0eb

class="btn btn-light btn-sm"


category__mission__name









https://mfvmisdev.mahiti.org/
role :	Partner Data Entry Operator
username: partner_operator
password: test@123

https://mfvmisdev.mahiti.org/admin/
django admin 
username : mahiti
password: admin@2022


{'sql_query':'select id,name,report_generated from survey_survey where active != 0 @@searchfilter order by name','headers':['Form ID','Data Collection Form','File Created On','Download']}




https://mfvmisdev.mahiti.org/
user name :

<div class="user-nav d-sm-flex d-none"><span class="user-name font-weight-bolder mb-0"> {% if request.user.is_superuser %}  {{ request.user.username }} {% else %} {{request.user.get_full_name}} {% endif %}</span>
                               <span class="user-status">{{request.session.user_role_type}}</span>
                               <span class="user-status">{{request|location_data}}</span>
                               
                           </div>


https://mfvmisdev.mahiti.org/
mfv admin
user name: mahiti
password: admin@2022

partner_data_entry_operator
user name:partner_data_entry_operator
password:test@123



# def task_create():
#     for user_obj in User.objects.filter(is_superuser = False):
#         if user_obj:
#             for visio_ncentre in Project.objects.filter(active=2):
#                 string_cancate = visio_ncentre.partner_mission_mapping.mission.name +" "+visio_ncentre.name+" June 2022"
#                 print(string_cancate)
#                 added = Task(project = visio_ncentre,user=user_obj, name = string_cancate, start_date="2022-06-01",end_date= "2022-06-30")
#                 added.save()



Nayan
Mission Jeevan
Mission Roshni
Mission Netra
Mission Disha
HOSPITAL

Expenses – camp - Any other costs (Please provide details of Expenses in Comments)



Saksham

Finance data
Disha
1.Screening cost for camp
2.Travel
3.Loca
4.Outstation
5.IEC (Banners, etc)
6.Refreshments/Food
7.PPE
8.Spectacles


MISSION ROSHNI
1.Screening Cost
2.Spectacles
3.IEC
4.Vision Corner
5.Training Events
6.Trave
7.Project Managemen




def get_sub_menus(self):
        # model method to filter menus based parent id
        return Menus.objects.filter(parent=self, active=2)


{% elif submenus.slug == 'reporting-month' %}?month_year=CurrentMonth(){% endif %}"


{% for i in menu %}
            {% if i.get_sub_menus %}
            <li>
              <a href="javascript: void(0);" class="waves-effect">
                <i class="bx bx-home-circle"></i
                ><span class="badge rounded-pill bg-info float-end"></span>
                <span key="t-dashboards">{{i.name}}</span>
              </a>
              <ul class="sub-menu" aria-expanded="false">
                  {% for sub_menus in i.get_sub_menus %}
                  <li><a href="{{sub_menus.app_link}}" key="t-default" class="waves-effect">{{sub_menus.name}}</a></li>
                  {% endfor %}
              </ul>
                </li>
            {% else % }
                <li>
                  <a href="{{i.app_link}}" class="waves-effect">
                    <i class="{{i.icon}}"></i>
                    <span key="t-file-manager">{{i.name}}</span>
                  </a>
              </li>
            {% endif %}

material-icons icon_image dash bord icone
<div class="card " style="padding:20px; float:left; width:100%">



value="{{project.id}}" {% if project.id == project_objs.id %}selected{% endif %}

{% for project in project_objs %}
                                                                        <option value="{{project.id}}" >{{project.name}}</option> 
                                                                    {% endfor %}

<div class="col-sm-6">
                                                        <div class="form-group">
                                                          <label for="year">Year</label>
                                                            <select id="year", name="year">
                                                                <option value="2015">2015</option>
                                                                <option value="2016">2016</option>
                                                                <option value="2017">2017</option>
                                                                <option value="2018">2018</option>
                                                                <option value="2019">2019</option>
                                                                <option value="2020">2020</option>
                                                                <option value="2021">2021</option>
                                                                <option value="2022">2022</option>
                                                                <option value="2023">2023</option>
                                                                <option value="2024">2024</option>
                                                                <option value="2025">2025</option>
                                                                <option value="2026">2026</option>
                                                            </select>
                                                         </div>


function TS()
{
    var today = new Date();
    var date = today.getFullYear()+'-'+(today.getMonth()+1)
    alert(date)
};

onclick="location.href='?month_year=2022-07'"
start_yaer = today.year
start_month = today.month
onclick="location.href='?month_year=2022-07'"
    
<div class="row">
                                            <div class="col">
                                                <button class="btn btn-primary" type="button" data-bs-toggle="" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                                                    Current Month
                                                </button>
                                            </div>
                                            <div class="col">
                                                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                                                    Past Month
                                                </button>
                                            </div>
                                          </div>




 <div class="form-group" style="display:inline-block; width:48%;padding-right: 5%;">
                                            <label for="glossary_entry_input_1">Lemma IT</label>
                                            <input type="text" class="form-control" id="glossary_entry_input_1" placeholder="">              
                                          </div>
                                          
                                          <div class="form-group" style="display:inline-block; width:48%; padding-left: 5%; float: right;">
                                                  <label for="glossary_entry_input_2">Lemma CH</label>
                                                  <input type="text" class="form-control" id="glossary_entry_input_2" placeholder="">              
                                          </div>



In the Income and Expenses tables only Particulars/ Amount/ Comment columns should be there


 {% if request.user.is_superuser %}
        <li {% if 'User Management' == heading %}class='mm-active'{% endif %}>
            <a href="javascript: void(0);" class="has-arrow waves-effect ">
             <i class="bx bx-cog"></i>
             <span key="t-ui-elements">Settings</span>
            </a>
        <ul class="sub-menu" aria-expanded="false">
        <li>
            <a href="/user-listing/" class="waves-effect {% if 'User Management' == heading %}mm-active{% endif %}" >
              <i class="fas fa-user-cog"></i>
             <span key="t-dashboards ">User Management</span>
            </a>
        </li>
        </ul>
        </li>
        {% endif %}In the Information section on top, can we display 'No. of Days Project Functional during the month' only for Mission Jyot? In that case the wording will be 'Number of days the Vision Centre was open' 




<p class="text-justify">Ambitioni dedisse scripsisse iudicaretur. Cras mattis iudicium purus sit amet fermentum. Donec sed odio operae, eu vulputate felis rhoncus. Praeterea iter est quasdam res quas ex communi. At nos hinc posthac, sitientis piros Afros. Petierunt uti sibi concilium totius Galliae in diem certam indicere. Cras mattis iudicium purus sit amet fermentum.</p>



The Finance table replace the word 'indicator' with 'Particulars'








{{request.user.groups.all.0}}

 <div class="row">
                    <div class="col-md-6">
                        <h5 ><b class="card-title">Project : </b><span style="font-size: 14px;">{{task_obj.project.name}}</span></h5>
                        <h5><b class="card-title">Dist. & State : </b><span style="font-size: 14px;">{{task_obj.project.district.name}}, {{task_obj.project.district.state.name}}</span></h5>
                        <h5><b class="card-title">Project funded by : </b><span style="font-size: 14px;"> {{task_obj.project.get_project_donor_mapping}}</span></h5>
                    </div>

                    <div class="col-md-6">
                        <h5 id="right_side"><b class="card-title">Partner : </b><span style="font-size: 14px;">{{task_obj.project.partner_mission_mapping.partner.name}}, {{task_obj.project.district.name}}, {{task_obj.project.district.state.name}}</span></h5>
                        <h5 id="right_side"><b class="card-title">Month : </b><span style="font-size: 14px;">{{task_obj.start_date|date:"F Y"}}</span></h5>

                        {% disply_financial_year task_obj.start_date as financial_year %} 
                        <h5 id="right_side" > <b class="card-title">Financial year : </b> <span style="font-size: 14px;">{{financial_year}}</span></h5>
                    </div>



<p ><strong>Project:</strong> {{task_obj.project.name}}</p>

partner_mission_mapping

                        <!-- {% disply_financial_year task_obj.start_date as financial_year %}   -->

body[data-sidebar=dark].vertical-collpsed .vertical-menu #sidebar-menu>ul ul {
    background-color: #f1821a9c   #2a3042
}


body[data-sidebar=dark] .vertical-menu {
    background: #f1821a9c  #2a3042
}




<div class="container">
<h1>Bootstrap Table</h1>
<p> Mémo pour les options du Bootstrap Table : <a href="http://bootstrap-table.wenzhixin.net.cn/documentation/">Bootstrap Table Documentation</a></p>
<p>Eléments de Bootstrap Table utilisés : <a href="http://jsfiddle.net/wenyi/e3nk137y/3178/">Data Checkbox</a>, pour cocher les éléments à sélectionner, <a href="https://github.com/wenzhixin/bootstrap-table-examples/blob/master/extensions/filter-control.html">extension Filter control</a>, pour les filtres via les colonnes, <a href="https://github.com/kayalshri/tableExport.jquery.plugin">extension Data export</a> pour exporter</p>

<div id="toolbar">
		<select class="form-control">
				<option value="">Export Basic</option>
				<option value="all">Export All</option>
				<option value="selected">Export Selected</option>
		</select>
</div>

<table id="table" 
			 data-toggle="table"
			 data-search="true"
			 data-filter-control="true" 
			 data-show-export="true"
			 data-click-to-select="true"
			 data-toolbar="#toolbar">
	<thead>
		<tr>
			<th data-field="state" data-checkbox="true"></th>
			<th data-field="prenom" data-filter-control="input" data-sortable="true">Prénom</th>
			<th data-field="date" data-filter-control="select" data-sortable="true">Date</th>
			<th data-field="examen" data-filter-control="select" data-sortable="true">Examen</th>
			<th data-field="note" data-sortable="true">Note</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="bs-checkbox "><input data-index="0" name="btSelectItem" type="checkbox"></td>
			<td>Valérie</td>
			<td>01/09/2015</td>
			<td>Français</td>
			<td>12/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="1" name="btSelectItem" type="checkbox"></td>
			<td>Eric</td>
			<td>05/09/2015</td>
			<td>Philosophie</td>
			<td>8/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="2" name="btSelectItem" type="checkbox"></td>
			<td>Valentin</td>
			<td>05/09/2015</td>
			<td>Philosophie</td>
			<td>4/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="3" name="btSelectItem" type="checkbox"></td>
			<td>Valérie</td>
			<td>05/09/2015</td>
			<td>Philosophie</td>
			<td>10/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="4" name="btSelectItem" type="checkbox"></td>
			<td>Eric</td>
			<td>01/09/2015</td>
			<td>Français</td>
			<td>14/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="5" name="btSelectItem" type="checkbox"></td>
			<td>Valérie</td>
			<td>07/09/2015</td>
			<td>Mathématiques</td>
			<td>19/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="6" name="btSelectItem" type="checkbox"></td>
			<td>Valentin</td>
			<td>01/09/2015</td>
			<td>Français</td>
			<td>11/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="7" name="btSelectItem" type="checkbox"></td>
			<td>Eric</td>
			<td>01/10/2015</td>
			<td>Philosophie</td>
			<td>8/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="8" name="btSelectItem" type="checkbox"></td>
			<td>Valentin</td>
			<td>07/09/2015</td>
			<td>Mathématiques</td>
			<td>14/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="9" name="btSelectItem" type="checkbox"></td>
			<td>Valérie</td>
			<td>01/10/2015</td>
			<td>Philosophie</td>
			<td>12/20</td>
		</tr>
		<tr>
			<td class="bs-checkbox "><input data-index="10" name="btSelectItem" type="checkbox"></td>
			<td>Eric</td>
			<td>07/09/2015</td>
			<td>Mathématiques</td>
			<td>14/20</td>
		</tr>
		<tr>
		<td class="bs-checkbox "><input data-index="11" name="btSelectItem" type="checkbox"></td>
			<td>Valentin</td>
			<td>01/10/2015</td>
			<td>Philosophie</td>
			<td>10/20</td>
		</tr>
	</tbody>
</table>
</div>























#063ce5

 {% if sub_category.get_indicator_type_display == 'Actuals' %}
                                        <td>
                                            <input type="number" name="actuals_{{sub_category.id}}" value="" class="form-control" maxlength="5" readonly>
                                        </td> 
                                        {% else %}
                                        <td>
                                            <input type="number" name="actuals_{{sub_category.id}}" value="" class="form-control" maxlength="5">
                                        </td> 
                                        {% endif }
                                        



1.CL Gupta Eye Institute (CLGEI)-Moradabad, Uttar Pradesh


Aditya Jyot Foundation for Twinkling Little Eyes (AJFTLE)-Mumbai, Maharashtra

Partner Hospital


Divyajyoti Trust (DJT)-Mandvi, Gujarat
Aditya Jyot Foundation for Twinkling Little Eyes (AJFTLE)-Mumbai, Maharashtra


CL Gupta Eye Institute (CLGEI)-Moradabad, Uttar Pradesh


HV Desai Eye hospital (HVDEH)-Pune, Maharashtra


KB Haji Bachooali Hospital (KBHB)-Mumbai, Maharashtra


Lok Nayak Jayprakash Narayan Hospital(LNJP)-Gaya, Bihar
Lotus College of Optometry and Hospital (LCOOH)-Mumbai, Maharashtra
Hyderabad Eye Institute (HEI)- Bhubaneshwar, Odisha
Hyderabad Eye Institute (HEI)-Rayagada, Odisha
Hyderabad Eye Institute (HEI)-Brahmapur, Odisha
Hyderabad Eye Institute (HEI)-Hyderabad, Telangana
MGM Eye Institute-Raipur, Chattisgarh
Nirmal Ashram Eye Institute (NAEI)-Rishikesh, Uttarakhand
Ramkrishna Mission Hospital (RKM)-Itangar, Arunachal Pradesh
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Coimbatore, Tamil Nadu
Sri Kanchi Kamakoti Medical Trust (SKKMT)-KK-Tamil Nadu
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Bengaluru, Karnataka
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Shimoga, Karnataka
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Guntur, Andhra Pradesh
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Jaipur, Rajasthan
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Ludhiana, Punjab
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Kanpur, Uttar Pradesh
Sankara Nethralaya (SN)-Kolkata, West Bengal
Sankara Nethralaya (SN) -JCOC Chennai, Tamil Nadu
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Indore, Madhya Pradesh
Shija Eye foundation-Manipur
Shroff's Charity Eye Hospital (SCEH), Saharanpur, Uttar Pradesh
Siliguri Greater Lions Eye hospital (SGLEH)-Siliguri
SPECS (Bansara Eye Care Centre)-Shillong, Meghalaya
Sri Sankaradeva Nethralaya (SSN)-Guwahati, Assam
Sundarban Social Development Centre (SSDC)-West Bengal
Synod Hospital-Aizawal, Mizoram 
Tulsi Eye hospital (TEH)-Nasik, Maharashtra
Sewa Sadan Eye Hospital Trust (SSEHT)- Madhya Pradesh
Shri Sadguru Seva Sangh Trust (SSSST), Chitrakoot, Madhya Pradesh
Vivekananda Mission Asram's Netra Niramay Niketan (VMANNN)-West Bengal
Hyderabad Eye Institute (HEI)-Balasore, Odisha
Hyderabad Eye Institute (HEI)-Sircilla, Odisha
Sri Kanchi Kamakoti Medical Trust (SKKMT)-Panvel, Maharashtra







































































































































































































































































































































































































































































































































































































































































































































































































































mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3$ mkdir c3_web
mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3$ ls
c3_env	c3_web	c3-web-mis-model_design
mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3$ cd c3_web/
mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3/c3_web$ 
mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3/c3_web$ ls
mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3/c3_web$ git init 
Initialized empty Git repository in /home/mahiti/Documents/C3/c3_web/.git/
mahiti@mahiti-LIFEBOOK-A555:~/Documents/C3/c3_web$ git remote add origin https://git.mahiti.org/python/c3-web-mis.git
















































































































































https://mfvmisdev.mahiti.org/

1. I have created a records for Mission indicator taget models each projects
2.Side bar menu page Dynamic 
3.added new fields mission models

4.MissionIndicatorCategory inline to mission models


def mission_indicator_category():
    project_obj = Project.objects.get(id = 1)
	user_obj = User.objects.get(id = 1)
    for mis_indicat in inMissionIndicator.objects.all():
        MissionIndicatorTarget.objects.create(mission_indicator = mis_indicat,project= task,target=100,periodicity_date = '2021-04-01,created_by = user_obj)

    
    def get_sub_menus(self):
        # model method to filter menus based parent id
        return Menus.objects.filter(parent=self, active=2).order_by("menu_order")
 <!-- <span class="user-status">{{request|location_data}}</span> -->



2.sudo chown postgres:postgres /home/mahiti/Downloads/jobaid_new_09dec2021_dbdump_12sept2022.sql    #home page

3.sudo mv /home/mahiti/Downloads/jobaid_new_09dec2021_dbdump_12sept20222.sql /var/lib/postgresql/       #home page

4.ls -ltr #postgres@mahiti-LIFEBOOK-A555:~$ ls -ltr checking conform
$sudo -i -u postgres
$psql

5. create database jobaid_new_09dec;

6. grant all privileges on database jobaid_new_09dec to convene2demo;          # \l show user name

7. CTRL + D 

8. psql -d jobaid_new_09dec<jobaid_new_09dec2021_dbdump_12sept2022.sql
mis_local

investigations_results_dashboard
record_updation_dashboard

SocioDemographics.objects.filter(active=2,aadhar_number__isnull=False, patient__art_center__id = 1938).count()

    record-not-update

    investigations-result-pending

    page-slug: dashboard

patient__art_center__id = 1938
record_updation_dashboard


create

https://rajawadi.jobaidtest.com:8000/

# def task_create():
#     for user_obj in User.objects.filter(is_superuser = False):
#         if user_obj:
#             for visio_ncentre in Project.objects.all():
#                 string_cancate = visio_ncentre.partner_mission_mapping.mission.name +" "+visio_ncentre.name+" June 2022"
#                 print(string_cancate)
#                 added = Task(project = visio_ncentre,user=user_obj, name = string_cancate, start_date="2022-06-01",end_date= "2022-06-30")
#                 added.save()


  
                
# def mission_indicator_category():
#     project_obj = Project.objects.get(id = 6)
#     user_obj = User.objects.get(id = 2)
#     for mis_indicat in MissionIndicator.objects.all(): #periodicity_date = '2022-04-01'
#         if not MissionIndicatorTarget.objects.filter(mission_indicator = mis_indicat, project = project_obj, periodicity_date = '2021-04-01').exists(): 
            # MissionIndicatorTarget.objects.create(mission_indicator = mis_indicat,project= project_obj,target=150,periodicity_date = '2021-04-01',created_by = user_obj)
            # print('CREATED--',mis_indicat.name)



{% get_usermenu_list request as menu %}


<ul class="nav navbar-nav justify-content-center" id="main-menu-navigation" data-menu="menu-navigation">
                    {% get_usermenu_list request as menu %}
                    {% for i in menu %}
                                {% if i.get_sub_menus %} 
                                    <li class="dropdown nav-item" data-menu="dropdown"><a class="dropdown-toggle nav-link d-flex align-items-center" href="{{i.backend_link}}" data-toggle="dropdown"><i data-feather="{{i.icon}}"></i><span data-i18n="{{i.name}}">{{i.name}}</span></a>
                                        <ul class="dropdown-menu">
                                            {% for submenu in i.get_sub_menus %}
                                                {% with submenu.slug|make_string:"view" as keystring %}
                                                    {% if request.user.is_superuser or request|has_permission_for_action:keystring %}
                                                        <li data-menu="">
                                                            <a class="dropdown-item d-flex align-items-center" href="{{submenu.backend_link}}" data-toggle="dropdown" data-i18n="{{submenu.name}}">
                                                                <i data-feather="{{submenu.icon}}"></i>
                                                                <span data-i18n="{{submenu.name}}">{{submenu.name}}</span>
                                                            </a>
                                                        </li>
                                                    {% endif %}
                                                {% endwith %}
                                            {% endfor %}
                                        </ul>
                                    </li>
                                {% else %}
                                    <li class="dropdown nav-item {% if request.path == i.backend_link %} active {% endif %}" data-menu="dropdown">
                                        <a class="nav-link d-flex align-items-center" href="{{i.backend_link}}">
                                            <i data-feather="{{i.icon}}"></i>
                                            <span data-i18n="{{i.name}}">{{i.name}}</span>
                                        </a>
                                    </li>
                                {% endif %}
                    {% endfor %}
                </ul>






















from django.contrib.auth import get_user_model
from django.contrib import admin

# Register your models here.
from .models import RecipeIngredient, Recipe, RecipeIngredientImage

User = get_user_model()


admin.site.register(RecipeIngredientImage)

class RecipeIngredientInline(admin.StackedInline):
    model = RecipeIngredient
    extra = 0
    readonly_fields = ['quantity_as_float', 'as_mks', 'as_imperial']
    # fields = ['name', 'quanity', 'unit', 'directions']

class RecipeAdmin(admin.ModelAdmin):
    inlines = [RecipeIngredientInline]
    list_display = ['name', 'user']
    readonly_fields = ['timestamp', 'updated']
    raw_id_fields = ['user']

admin.site.register(Recipe, RecipeAdmin)



CREATE DATABASE mis_local







from PatientManagement.views import *
def pptct_bulk_upload():
    from datetime import datetime
    from datetime import timedelta
    with open('/home/mahiti/Documents/Job_Aid/job-aid/media/PPTCT1_12-07-22.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        try:
            with transaction.atomic():
                temp = 0
                for row in reader:
                    Begindatestring = row['date_last_mentrual_period']
                    Begindate = datetime.strptime(Begindatestring, "%Y-%m-%d")
                    Enddate = Begindate + timedelta(days=280)
                    if not PPTCT.objects.filter(date_last_mentrual_period = row['date_last_mentrual_period']).exists():
                        
                        for patient in ArtRegistration.objects.filter(pre_art_no = row['pre_art_number'], art_center__code = row['art_center_code'], art_reg_no = row['art_reg_no']):
                            temp+=1
                            print(temp, row['pre_art_number'])
                            if patient:
                                PPTCT.objects.create(patient = patient,
                                    current_pregnancy_status = '1',
                                    date_last_mentrual_period = row['date_last_mentrual_period'],
                                    date_expected_delivery = Enddate,
                                    date_of_delivery = row['date_of_delivery'] if row['date_of_delivery'] else None,
                                    outcome_of_delivery = row['outcome_of_delivery'] if row['outcome_of_delivery'] else None,
                                )
                                print(patient,"import start")

        except Exception as e:
            print(e)
        print("import end")





















$ alter user testuser with encrypted password 'qwerty';
$ grant all privileges on database testdb to testuser;




DROP TABLE application_master_partnermissiondonormapping;

partner_mission_donor_mapping
application_master_facility

0020_auto_20220718_1056.py
DROP TABLE player, sport;
python manage.py migrate <app> 0002 --fake

python manage.py migrate application_master 0020_auto_20220718_1056 --fake

manage.py migrate --fake mis zero



./manage.py migrate mis zero

python manage.py migrate --run-syncdb



https://mfvmisdev.mahiti.org/ 
Task 
search = name
filter = task_status


MissionIndicatorAchievement
search_fields = task_name

Menus
search_fields = name,
list display= active

State
search_fields = name,

District
search_fields = name,
list_filter = state

Partner
search_fields = name,slug
list_filter = active


UserPartnerMapping
search_fields = parnter, user
search_fields = ['parnter','user']
list_filter = ['active']

Donor
search_fields = name


Mission
search_fields = name


PartnerMissionDonorMapping
search_fields = all 
list_filter = donor mission


Facility
search_fields = name
list_filter = 

MissionIndicatorCategory
search_fields = name
list_filter = mission, category_type


MissionIndicator
search_fields = name
list_filter = category,indicator_type


MissionIndicatorTarget
search_fields = mission_indicator__NAME, facility_name
 


FacilityFiles
search_fields = name facility__name
list 





action="/mission_edit/{{slug}}/{{id}}/"
<button type="link" class="btn btn-primary btn-lg">View Work</button>

facility.partner_mission_mapping

def task_create():
    for user_obj in User.objects.filter(is_superuser = False):
        if user_obj:
            for visio_ncentre in Facility.objects.all():
                string_cancate = visio_ncentre.partner_mission_mapping.mission.name +" "+visio_ncentre.name+" july 2022"
                # print(string_cancate)
                added = Task(facility = visio_ncentre,user=user_obj, name = string_cancate, start_date="2022-07-01",end_date= "2022-07-31")
                added.save()
# task_create()


class MissionQuestion(BaseContent):
    TYPE_CHOICES = (
        (1, 'Text'), 
        (2, 'Radio'), 
        (3, 'Number'), 
        (4, 'File Upload'), 
        (5, 'Date')
    )
    mission = models.ForeignKey(Mission, on_delete = models.DO_NOTHING)
    field_name = models.CharField(max_length=350)
    field_type = models.IntegerField(choices= TYPE_CHOICES)
    required = models.BooleanField(default=True)
    field_config = JSONField(default=dict)

    class Meta:
        verbose_name_plural = "Mission Question"

    def __str__(self):
        return self.mission.name
















art_center_code	
pre_art_number	
current_pregnancy_status	
date_last_mentrual_period	
date_of_delivery	
outcome_of_delivery

Name of ART Center	
Pre ART Number	
ON ART Number	
Date of LMP	
Date of Delivery	
Outcome of delivery

2021-11-29

2022-09-04
OUTCOME_OF_CHOICES = (
    (1, 'Live birth'),
    (2, 'Still birth'),
    (3, 'Abortion')
)

2020-04-30
2019-07-25

ART-MU-BMC-07	MH/MU/MMG/PRE/18/4536	3708	2018-05-25	2018-11-25	3

from PatientManagement.views import *
pptct_bulk_upload()

Active art center

K.J. Somaiya Medical College	ART-MU-BMC-20
BJ Wadia Hospital	ART-MU-BMC-19
GTB Hospital, Sewri	ART-MU-BMC-18
Municipal STD Clinic, Mumbai	ART-MU-BMC-17
MBPT ART Center	ART-MU-BMC-16
Rajawadi ART Center	ART-MU-BMC-15 
K B Bhabha (Bandra) ART Center	ART-MU-BMC-14 
Dr R N Cooper ART Center	ART-MU-BMC-13 
BDBA ART Center	ART-MU-BMC-12                  
Godrej ART Center	ART-MU-BMC-11 
L & T ART Center	ART-MU-BMC-10 
M T Agarwal ART Center	ART-MU-BMC-09 
Siddharth ART Center	ART-MU-BMC-08 
Shatabdi Govandi ART Center	ART-MU-BMC-07 
Pediatric Center of Excellence	ART-MU-BMC-06 
LTMGH Sion ART Center	ART-MU-BMC-05 
KEM ART Center	ART-MU-BMC-03 

Inactive art center 

Sir. J.J.ART Center 2   
Sir. J.J.ART Center 
BYL Nair ART Center


MDACS@123


active	
created	modified	
uuid	
site_id	patient	
current_pregnancy_status	
date_last_mentrual_period	
date_expected_delivery	
date_of_delivery	
outcome_of_delivery

Current Pregnancy Status
Date of Expected Date of Delivery (EDD)

Name of ART Center	
Pre ART Number	
ON ART Number	

Date of LMP	
Date of Delivery	
Outcome of delivery	 																			


STATUS_CHOICES = ((1, 'Pending'), (2, 'Submitted for approval'), (3, 'Approved'), (4,  'Rejected'), (5, 'Cancelled'))




record = PPTCT.objects.get(id = 25)
record.delete()


from django.contrib.auth import get_user


# user = get_user(request)
    # if user.groups.filter(name = 'Partner Admin').exists():
    #     user_list = UserPartnerMapping.objects.get(user = request.user)
    #     for user_list1 in UserPartnerMapping.objects.filter(partner = user_list.partner).exclude(user = request.user):
    #         task_obj = Task.objects.filter(user = user_list1.user)
    #         # print(task_obj,obj_list)
    # else:
    #     task_obj = Task.objects.filter(user = request.user)

   
    task_obj = Task.objects.filter(user = request.user)










from django.contrib.auth.models import Group



1. Which animal is known as the 'Ship of the Desert"?
Ans. Camel

2. How many days are there in a week?
Ans. 7 days

3. How many hours are there in a day?
Ans. 24 hours

4. How many letters are there in the English alphabet?
Ans. 26 letters

5. Rainbow consist of how many colours?
Ans. 7 colours

6. How many days are there in a year?
Ans. 365 days (not a leap year)

7. How many minutes are there in an hour?
Ans. 60 minutes

8. How many seconds are there in a minute?
Ans. 60 seconds

9. How many seconds make one hour?
Ans. 3600 seconds

10. Baby frog is known as.......
Ans. Tadpole


23. Name the National river of India?

Ans. Ganga

24. Name the National Reptile of India?

Ans. King Cobra

25. What is the capital of India?

Ans. New Delhi

26. Name the biggest continent in the world?

Ans. Asia

27. How many continents are there in the world?

Ans. 7 continents

28. Name the primary colours?

Ans. Red, Yellow, and Blue

29. Which is the smallest month of the year?

Ans. February

30. Name the house made of ice?

Ans. Igloo

31. Which colour symbolises peace?

Ans. White

32. Name the largest mammal?

Ans. Blue Whale

33. Sun rises in the.....

Ans. East


from django.template.defaultfilters import slugify

def save(self):
	self.slug = slugify(self.first_name)
	super(Stu, self).save()



from django.utils.text import slugify
class Article(models.Model):
    headline = models.CharField(max_length=100)
    . . .
    slug = models.SlugField(unique=True)

    def save(self, *args, **kwargs):
        self.slug = slugify(self.headline)
        super(Article, self).save(*args, **kwargs)


1.slug auto save
2.pagination per page 10 number
3.mission indicator right side show the status: pending based on the task id















4 users, 6 vision center, 2 months = 48 tasks

Mission Name + Vision Center Name + Month + Year

Mission Jyot VC1 June 2022
ls -l /home/mahiti/Documents
periodicity_date = "2022-05-01"


    # mission_respose_obj = MissionIndicatorAchievement.objects.get_or_none(task__id = '15')






        # MissionIndicatorAchievement.objects.create(task = task_obj ,task_status = task_status, response = results)


















gzip mis.sql
ctl +d
sudo mv/var/lib/postgresql/mis.sql /home/mahiti/Documents

sudo chown mahiti:mahiti /home/mahiti/Documents/mis.sql.gz


asgiref==3.4.1
certifi==2022.6.15
charset-normalizer==2.0.12
defusedxml==0.7.1
diff-match-patch==20200713
Django==3.2.4
django-import-export==2.7.1
et-xmlfile==1.1.0
idna==3.3
import-export==0.2.67.dev6
jsonfield==3.1.0
MarkupPy==1.14
odfpy==1.4.1
openpyxl==3.0.10
Pillow==8.4.0
pkg-resources==0.0.0
psycopg2==2.7.5
psycopg2-binary==2.7.5
pytz==2022.1
PyYAML==6.0
requests==2.27.1
sqlparse==0.4.2
tablib==3.1.0
typing-extensions==4.1.1
urllib3==1.26.9
xlrd==2.0.1
xlwt==1.3.0


patientcovid_ref = Covid.objects.get_or_none(patient = patient_summary, active=2)


mission_respose_obj = MissionIndicatorAchievement.objects.get_or_none(id = id)



sudo mv/var/lib/postgresql/mis.sql/home/mahiti/Documents


{
    "total_33": 1,
    "adult_male_33": 2,
    "adult_female_33": 3,
    "adult_transgender_33": 4,
    "child_male_33": 5,
    "child_female_33": 6,
    "child_transgender_33": 7,
    "total_34": 1,
    "adult_male_34": 2,
    "adult_female_34": 3,
    "adult_transgender_34": 4,
    "child_male_34": 5,
    "child_female_34": 6,
    "child_transgender_34": 7,
    "total_35": 1,
    "adult_male_35": 2,
    "adult_female_35": 3,
    "adult_transgender_35": 4,
    "child_male_35": 5,
    "child_female_35": 6,
    "child_transgender_35": 7,
    "total_36": 1,
    "adult_male_36": 2,
    "adult_female_36": 3,
    "adult_transgender_36": 4,
    "child_male_36": 5,
    "child_female_36": 6,
    "child_transgender_36": 7,
    "total_37": 1,
    "adult_male_37": 2,
    "adult_female_37": 34,
    "adult_transgender_37": 5,
    "child_male_37": 6,
    "child_female_37": 6,
    "child_transgender_37": 7,
    "total_38": 1,
    "adult_male_38": 2,
    "adult_female_38": 3,
    "adult_transgender_38": 4,
    "child_male_38": 1,
    "child_female_38": 5,
    "child_transgender_38": 5,
    "total_39": 1,
    "adult_male_39": 2,
    "adult_female_39": 3,
    "adult_transgender_39": 4,
    "child_male_39": 5,
    "child_female_39": 5,
    "child_transgender_39": 6,
    "total_40": 2,
    "adult_male_40": 3,
    "adult_female_40": 4,
    "adult_transgender_40": 54,
    "child_male_40": 5,
    "child_female_40": 6,
    "child_transgender_40": 7,
    "total_41": 3,
    "adult_male_41": 4,
    "adult_female_41": 5,
    "adult_transgender_41": 6,
    "child_male_41": 7,
    "child_female_41": 8,
    "child_transgender_41": 0,
    "total_42": 4,
    "adult_male_42": 4,
    "adult_female_42": 4,
    "adult_transgender_42": 233,
    "child_male_42": 3,
    "child_female_42": 3,
    "child_transgender_42": 3,
    "total_43": 3,
    "adult_male_43": 3,
    "adult_female_43": 3,
    "adult_transgender_43": 3,
    "child_male_43": 3,
    "child_female_43": 3,
    "child_transgender_43": 3,
    "total_44": 3,
    "adult_male_44": 3,
    "adult_female_44": 3,
    "adult_transgender_44": 3,
    "child_male_44": 3,
    "child_female_44": 3,
    "child_transgender_44": 3,
    "total_45": 1,
    "adult_male_45": 3,
    "adult_female_45": 3,
    "adult_transgender_45": 3,
    "child_male_45": 3,
    "child_female_45": 3,
    "child_transgender_45": 3,
    "total_46": 3,
    "adult_male_46": 3,
    "adult_female_46": 3,
    "adult_transgender_46": 3,
    "child_male_46": 3,
    "child_female_46": 3,
    "child_transgender_46": 3,
    "total_47": 3,
    "adult_male_47": 3,
    "adult_female_47": 3,
    "adult_transgender_47": 3,
    "child_male_47": 3,
    "child_female_47": 3,
    "child_transgender_47": 3,
    "total_48": 3,
    "adult_male_48": 3,
    "adult_female_48": 3,
    "adult_transgender_48": 3,
    "child_male_48": 3,
    "child_female_48": 3,
    "child_transgender_48": 3,
    "total_49": 3,
    "adult_male_49": 3,
    "adult_female_49": 3,
    "adult_transgender_49": 3,
    "child_male_49": 3,
    "child_female_49": 3,
    "child_transgender_49": 3,
    "total_50": 3,
    "adult_male_50": 3,
    "adult_female_50": 3,
    "adult_transgender_50": 3,
    "child_male_50": 3,
    "child_female_50": 3,
    "child_transgender_50": 3,
    "actual_51": 3,
    "actual_52": 4,
    "actual_53": 5,
    "actual_54": 67,
    "actual_55": 7,
    "actual_56": 8,
    "actual_57": 8,
    "actual_58": 9,
    "actual_59": 0,
    "actual_60": 6,
    "actual_61": 6,
    "actual_62": 6,
    "actual_63": 6,
    "actual_64": 6,
    "actual_65": 6
}

def task_create():
    for user_obj in User.objects.filter(is_superuser = False):
        if user_obj:
            for visio_ncentre in Facility.objects.all():
                print(user_obj.username,'>>>>>')
                string_cancate = visio_ncentre.partner_mission_mapping.mission.name +" "+visio_ncentre.name+" june 2022"
                print(string_cancate)
task_create()



def task_create():
    for user_obj in User.objects.filter(is_superuser = False):
        if user_obj:
            for visio_ncentre in Facility.objects.all():
                print(user_obj.username)
		string_cancate = visio_ncentre.mission.name +" "+visio_ncentre.name+" june 2022"
		print(string_cancate)
		Task.objects.create( name = string_cancate, facility = visio_ncentre, start_date='2022-06-01',end_date= '2022-06-30')
task_create()


 name = models.CharField(max_length = 150)
    user = models.ForeignKey(User, on_delete=models.DO_NOTHING)
    facility = models.ForeignKey(Facility, on_delete = models.DO_NOTHING, blank=True, null=True)
    start_date = models.DateField()
    end_date = models.DateField()


def task_create():
    for user_obj in User.objects.filter(is_superuser = False):
        if user_obj:
            for visio_ncentre in Facility.objects.all():
                print(user_obj.username)
                string_cancate = visio_ncentre.mission.name +" "+visio_ncentre.name+" june 2022"
                print(string_cancate)
                Task.objects.create(facility = visio_ncentre, name = string_cancate,start_date='2022-06-01',end_date= '2022-06-30')
task_create()







from  .views import *
task_create()





                                                        <!-- <button type="button" class="btn btn-outline-primary" id='add_buton_list' onclick="location.href='{{ mission.get_absolute_url }}'">Add Mission Indicator</button>
                                                        <button type="button" class="btn btn-outline-primary" id='add_buton_list' onclick="location.href='/mission/target/{{mission.id}}/'">Add Mission Target</button>
                                                        <button type="button" class="btn btn-outline-primary" id='add_buton_list' onclick="location.href='/mission-indicator/edit/list/'">Response Indicator</button>
                                                        <button type="button" class="btn btn-outline-primary" id='add_buton_list' onclick="location.href='/mission-target/list/'">Response Mission Target</button> -->

























 {% for data in mic_obj %}
                    <h5> {{data.get_category_type_display}} </h5>
                    <div class="table-responsive">
                        <h5> {{data.name}} </h5>
                        <table class="table table-hover a" id="hospital_report">
                            <thead >
                                <tr><th>Indicator</th>
                                    <th>Indicator Type</th> 
                                    <th>Total </th>
                                    <th>Adult Male</th>
                                    <th>Adult Female</th>
                                    <th>Adult Transgender</th>
                                    <th>Child Male</th>
                                    <th>Child Female</th>
                                    <th>Child Transgender</th>
                                </tr>
                            </thead>
                                {% for sub_category in data.sub_category %}
                                <tbody>
                                    <td>{{sub_category.name}}</td> 
                                    <td>{{sub_category.get_indicator_type_display}}</td> 

                                    <td>
                                        <input type="number"  name="total_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Total value</div>
                                    </td>

                                    <!-- <td>
                                        <input type="number"  name="indicator_type_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Target value</div>
                                    </td> 
                                    -->
                                    <td><input type="number"  name="adult_male_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="" >
                                        <div class="invalid-feedback">Please enter the Adult Male value</div>
                                    </td>

                                     <td>
                                        <input type="number"  name="adult_female_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Adult Female value</div>
                                    </td>

                                    <td>
                                        <input type="number"  name="adult_transgender_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Adult Transgender_ value</div>
                                    </td>

                                   <td>
                                        <input type="number"  name="child_male_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Target value</div>
                                    </td>

                                    <td>
                                        <input type="number"  name="child_female_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Target value</div>
                                    </td>

                                    <td>
                                        <input type="number"  name="child_transgender_{{sub_category.id}}" value="" class="form-control input_style qty" maxlength="5" required="">
                                        <div class="invalid-feedback">Please enter the Target value</div>
                                    </td>

                                    

                                </tbody>   
                                {% endfor %} 
                        </table>
                    </div>
                    {% endfor %}






























python manage.py dbshell

select * from <tablename> where false;

alter table application_master_partner drop column slug;

DROP TABLE author;


python manage.py dbshell
ALTER TABLE [name_of_field_that_already_exists] DROP column [field_table];


./manage.py migrate --database default --fake crud crud.0001_initial


python manage.py migrate --fake

<a href="{{ mission.get_absolute_url}}">Link</a>
























class Products(models.Model):
    title = models.CharField(max_length=120)
    slug = models.SlugField(blank=True, unique=True)
    description = models.TextField()

    def get_absolute_url(self):
        return f"/products/{self.slug}/"

{% for obj in object_list  %}
   <a href="{{obj.get_absolute_url}} ">{{obj.title}}</a> <br>
{% endfor %}


path('/products/<slug>/', ProductDetails.as_view()),

<a href="{{product.get_absolute_url}}">Link</a>





 slug = models.SlugField(max_length=40)


slug = models.SlugField(max_length=100, unique=True)




href="{% url 'mission' project.slug %}"









 <!-- <input type="number" name="total_{{sub_category.id}}" value="{{ mission_respose_obj.id|disply_values:total_1 }}" class="form-control input_style qty" maxlength="5" required=""> -->











{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 1
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 2
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 3
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 4
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 5
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 6
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 7
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 8
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 9
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 10
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 11
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 12
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1} number 13
{'total_1': 1, 'total_2': 1, 'total_3': 2, 'total_4': 1, 'total_5': 1, 'total_6': 1, 'total_7': 1, 'total_8': 1, 'total_9': 1, 'total_10': 1, 'total_11': 1, 'total_12': 1, 'total_13': 1, 'total_14': 1, 'adult_male_1': 1, 'adult_male_2': 1, 'adult_male_3': 13, 'adult_male_4': 2, 'adult_male_5': 1, 'adult_male_6': 1, 'adult_male_7': 1, 'adult_male_8': 1, 'adult_male_9': 1, 'child_male_1': 1, 'child_male_2': 3, 'child_male_3': 1, 'child_male_4': 1, 'child_male_5': 1, 'child_male_6': 1, 'child_male_7': 1, 'child_male_8': 1, 'child_male_9': 1, 'adult_male_10': 1, 'adult_male_11': 1, 'adult_male_12': 1, 'adult_male_13': 1, 'adult_male_14': 1, 'child_male_10': 1, 'child_male_11': 1, 'child_male_12': 1, 'child_male_13': 1, 'child_male_14': 1, 'adult_female_1': 1, 'adult_female_2': 1, 'adult_female_3': 3, 'adult_female_4': 1, 'adult_female_5': 1, 'adult_female_6': 1, 'adult_female_7': 1, 'adult_female_8': 1, 'adult_female_9': 1, 'child_female_1': 1, 'child_female_2': 2, 'child_female_3': 1, 'child_female_4': 1, 'child_female_5': 1, 'child_female_6': 1, 'child_female_7': 1, 'child_female_8': 1, 'child_female_9': 1, 'adult_female_10': 1, 'adult_female_11': 1, 'adult_female_12': 1, 'adult_female_13': 1, 'adult_female_14': 1, 'child_female_10': 1, 'child_female_11': 1, 'child_female_12': 1, 'child_female_13': 1, 'child_female_14': 1, 'adult_transgender_1': 1, 'adult_transgender_2': 2, 'adult_transgender_3': 33, 'adult_transgender_4': 1, 'adult_transgender_5': 1, 'adult_transgender_6': 1, 'adult_transgender_7': 1, 'adult_transgender_8': 1, 'adult_transgender_9': 1, 'child_transgender_1': 1, 'child_transgender_2': 2, 'child_transgender_3': 1, 'child_transgender_4': 1, 'child_transgender_5': 1, 'child_transgender_6': 1, 'child_transgender_7': 1, 'child_transgender_8': 1, 'child_transgender_9': 1, 'adult_transgender_10': 1, 'adult_transgender_11': 1, 'adult_transgender_12': 1, 'adult_transgender_13': 1, 'adult_transgender_14': 1, 'child_transgender_10': 1, 'child_transgender_11': 1, 'child_transgender_12': 1, 'child_transgender_13': 1, 'child_transgender_14': 1}




























{"total_1": 1, "total_2": 1, "total_3": 2, "total_4": 1, "total_5": 1, "total_6": 1, "total_7": 1, "total_8": 1, "total_9": 1, "total_10": 1, "total_11": 1, "total_12": 1, "total_13": 1, "total_14": 1, "adult_male_1": 1, "adult_male_2": 1, "adult_male_3": 13, "adult_male_4": 2, "adult_male_5": 1, "adult_male_6": 1, "adult_male_7": 1, "adult_male_8": 1, "adult_male_9": 1, "child_male_1": 1, "child_male_2": 3, "child_male_3": 1, "child_male_4": 1, "child_male_5": 1, "child_male_6": 1, "child_male_7": 1, "child_male_8": 1, "child_male_9": 1, "adult_male_10": 1, "adult_male_11": 1, "adult_male_12": 1, "adult_male_13": 1, "adult_male_14": 1, "child_male_10": 1, "child_male_11": 1, "child_male_12": 1, "child_male_13": 1, "child_male_14": 1, "adult_female_1": 1, "adult_female_2": 1, "adult_female_3": 3, "adult_female_4": 1, "adult_female_5": 1, "adult_female_6": 1, "adult_female_7": 1, "adult_female_8": 1, "adult_female_9": 1, "child_female_1": 1, "child_female_2": 2, "child_female_3": 1, "child_female_4": 1, "child_female_5": 1, "child_female_6": 1, "child_female_7": 1, "child_female_8": 1, "child_female_9": 1, "adult_female_10": 1, "adult_female_11": 1, "adult_female_12": 1, "adult_female_13": 1, "adult_female_14": 1, "child_female_10": 1, "child_female_11": 1, "child_female_12": 1, "child_female_13": 1, "child_female_14": 1, "adult_transgender_1": 1, "adult_transgender_2": 2, "adult_transgender_3": 33, "adult_transgender_4": 1, "adult_transgender_5": 1, "adult_transgender_6": 1, "adult_transgender_7": 1, "adult_transgender_8": 1, "adult_transgender_9": 1, "child_transgender_1": 1, "child_transgender_2": 2, "child_transgender_3": 1, "child_transgender_4": 1, "child_transgender_5": 1, "child_transgender_6": 1, "child_transgender_7": 1, "child_transgender_8": 1, "child_transgender_9": 1, "adult_transgender_10": 1, "adult_transgender_11": 1, "adult_transgender_12": 1, "adult_transgender_13": 1, "adult_transgender_14": 1, "child_transgender_10": 1, "child_transgender_11": 1, "child_transgender_12": 1, "child_transgender_13": 1, "child_transgender_14": 1}

total_1
adult_male_1
adult_female_1



{"1": "fsdffdfdfdsfdfd", "2": "1", "3": "fdsfd", "4": "dsdssfd", "5": "fddfds"}



                                    <!-- {% disply_values mission_respose_obj.response sub_category.id as temp %} -->



<QueryDict: {'csrfmiddlewaretoken': ['Bp6DcGSSbyuivmtVxZQtqlBtoJfO3cAMXJDPERHPCFzTA5fGpWbeaIkDKOdSStIq'], 'aadhar': ['56666'], 'sl_no': ['5656'], 'medical_record_no': ['fdssdf'], 'patient_name': ['shanthegowda'], 'gender': ['1'], 'age': ['2022-07-20'], 'bpl': ['1'], 'monthly_income': ['2'], 'address_of_patient': ['5656'], 'district': ['gf'], 'state': ['gfgf'], 'date_of_admission': ['2022-07-14'], 'date_of_surgery': ['2022-07-28'], 'date_of_discharge': ['2022-07-16'], 'eye_operated_upon': ['fddfssdf'], 'surgery_type': ['dsfsf'], 'visual_acuity': ['1'], 'visual_acuity_as': ['1']}> TEST Data >>>>>



{'csrfmiddlewaretoken': ['sj9clFICVTVCKzRKkqzWAn1kmx6ILKFTODGoNQxzm00dPiDvcnUHkKKuIC4MA1Nx'], 'male_1': ['1'], 'female_1': ['2'], 'male_2': ['1'], 'female_2': ['2'], 'male_3': ['1'], 'female_3': ['2'], 'male_4': ['2'], 'female_4': ['1'], 'male_5': ['1'], 'female_5': ['2'], 'male_6': ['1'], 'female_6': ['2'], 'male_7': ['1'], 'female_7': ['2'], 'male_8': ['1'], 'female_8': ['2'], 'male_9': ['1'], 'female_9': ['2'], 'male_10': ['1'], 'female_10': ['2'], 'male_11': ['1'], 'female_11': ['2'], 'male_12': ['1'], 'female_12': ['2'], 'male_13': ['1'], 'female_13': ['2'], 'male_14': ['1'], 'female_14': ['2']}


{% with "total_1" as key %}
                                        {% endwith %}
disply_values

{{mission_respose_obj.response|disply_values:sub_category.id}}


{"1": "2022-07-23", "2": "1", "sl_no": "545", "state": "karnataka", "aadhar": "545454", "gender": "1", "district": "wqrrwrr", "patient_name": "shanthegowda", "surgery_type": "dsfsf", "visual_acuity": "1", "monthly_income": "2", "date_of_surgery": "2022-07-21", "visual_acuity_as": "2", "date_of_admission": "2022-07-29", "date_of_discharge": "2022-07-21", "eye_operated_upon": "fddfssdf", "medical_record_no": "545454", "address_of_patient": "5656"}


1.created model 

class MissionResponse(BaseContent):
    INTERFACE_TYPES = (('0','Web'),('1','App'),('2','Migrated Data'))
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)
    mission = models.ForeignKey(Mission, on_delete=models.CASCADE, blank=True, null=True)
    interface = models.CharField(choices = INTERFACE_TYPES, default = 0, max_length = 2)
    response = JSONField(default={})

    def __str__(self):
        return self.mission.name

2.Form data getting the backend

1 -what is your name - text
2 -your gender 
	Male(1)
	Female(2)
3 - Date 
4 - your image/file
{4:'/media/folder/imagename'}

POST Params -  {1:"Akash", 2:1, 3:'2022-07-04', 4:'/media/folder/imagename'}

indicator table form
POST Params : {1:{'m':1,'f':2},2:{'m':1,'f':2},3:{'m':1,'f':2},4:{'m':1,'f':2}}
saving the "response" fields 








################################################################################################################################################


def create_answers(user, **ans_params):
    insertion_list, qids_list = [], []
    answers_list = ans_params.get('answers_list')
    app_answer_obj = ans_params.get('app_answer_obj')
    cluster_id = ans_params.get('cluster_id')
    creation_key = ans_params.get('creation_key')
    periodicity_value = ans_params.get("periodicity_value")
    
    response_id = ans_params.get('response_id')
    ben_uuid = ans_params.get('beneficiary')
    beneficiary_type = int(ans_params.get('beneficiary_type_id'))
    facility_type = int(ans_params.get('facility_type_id'))
    fac_uuid = ans_params.get('facility')
    if str(ben_uuid) != '0':
        beneficiary = Beneficiary.objects.filter(uuid=ben_uuid,beneficiary_type_id=beneficiary_type).latest('created').id
    else:
        beneficiary = 0
    if str(fac_uuid) != '0':
        facility = Facility.objects.get(uuid=fac_uuid).id
    else:
        facility = 0
    survey_ids = ans_params.get('survey_ids')
    #creation_key = str(uuid4())
    survey = Survey.objects.get(id=survey_ids)
    surveyconfig = SurveyDataEntryConfig.objects.get(survey__id=survey_ids)
    if periodicity_value == None:
        periodicity_value = get_piriodicity_value(survey.id)
    if survey.data_entry_level.slug == 'facility' and not surveyconfig.is_profile:
        cluster = [{"facility":{"facility_type_id":facility_type,"id":facility},
                    "beneficiary":{"beneficiary_type_id": beneficiary_type, "id":beneficiary}}]
        cluster.append({'periodicity_value' : periodicity_value})
    else:

        field_resolver = {'beneficiary':'beneficiary_type_id','facility':'facility_type_id'}
        survey_data_level = survey.data_entry_level.slug
        if survey_data_level == 'location':

            cluster = [{"boundary":{"boundary_type_id": 0,"id":int(cluster_id)}}]
            cluster.append({'periodicity_value' : periodicity_value})
        else:
            id_value = facility if survey_data_level == "facility" else beneficiary
            type_value = facility_type if survey_data_level == "facility" else beneficiary_type
            
            cluster = [{survey_data_level:{field_resolver.get(survey_data_level):type_value,'id':id_value}}]
            cluster.append({'periodicity_value' : periodicity_value})
    survey = Survey.objects.get(id=int(survey_ids))
    questions = Question.objects.filter(block__survey=survey,active=2)
    if ans_params.get('task_id') and not ans_params.get('task_id') == '0':
        cluster.append({'task_id' : ans_params.get('task_id')})
    resp_dict = question_answer_dict(questions,answers_list)

    if not response_id:
        #check and insert the changed periodictiy date while saving
        ansobj = JsonAnswer.objects.create(user=user,creation_key=creation_key,\
                                survey=survey,response=resp_dict,cluster=cluster)

        ansobj.app_answer_data = int(app_answer_obj.id)
        ansobj.submission_date = ans_params.get('created')
        if not str(cluster_id) == '0':
            ansobj.boundary_id = cluster_id
        ansobj.save()
    else:
        ansobj = JsonAnswer.objects.get(id=int(response_id))
        ansobj.response = resp_dict
        ansobj.save()
    return (True,ansobj.id)

def question_answer_dict(questions,answers_list):
    resp_dict ={}
    for ques in questions:
        try:
            if ques.qtype == 'D':
                date_str=answers_list.get(str(ques.id))[0].values()[0].replace('\\/','-')
                date_fmt = date_str.split('-')
                date_fmt.reverse()
                date_rev = date_fmt[0]+'-'+date_fmt[1]+'-'+date_fmt[2]
                resp_dict[ques.id] = date_rev
            elif ques.qtype in ['S','R'] and ques.master_choice == False:
                resp_dict[ques.id]=int(answers_list.get(str(ques.id))[0].values()[0])
            elif ques.qtype in ['S','R'] and ques.master_choice == True:
		resp_dict[ques.id]=answers_list.get(str(ques.id))[0].values()[0]
	    else:
                resp_dict[ques.id]=answers_list.get(str(ques.id))[0].values()[0]
        except:
            pass
    return resp_dict





Survey =  mission


block__survey =  mission indicator


def ipt_bulk_upload():
    temp = SocioDemographics.objects.get(aadhar_number = '200038089274')
    print(temp.patient.name_patient, temp.patient.art_center, temp.patient.art_center.code)
ipt_bulk_upload()


name_patient

art_center

temp = SocioDemographics.objects(aadhar_number = '200038089274')
print(temp.patient.name_patient, temp.patient.art_center, temp.patient.code)

200038089274


rncooper.jobaidtest.com:8000

2018-02-16	2018-08-16	2


Sir JJ ART Center 2
Sir JJ ART Center
BYL Nair ART Center

K.J. Somaiya Medical College	ART-MU-BMC-20
BJ Wadia Hospital	ART-MU-BMC-19
GTB Hospital, Sewri	ART-MU-BMC-18
Municipal STD Clinic, Mumbai	ART-MU-BMC-17
MBPT ART Center	ART-MU-BMC-16
Rajawadi ART Center	ART-MU-BMC-15
K B Bhabha (Bandra) ART Center	ART-MU-BMC-14
Dr R N Cooper ART Center	ART-MU-BMC-13
BDBA ART Center	ART-MU-BMC-12
Godrej ART Center	ART-MU-BMC-11
L & T ART Center	ART-MU-BMC-10
M T Agarwal ART Center	ART-MU-BMC-09
Siddharth ART Center	ART-MU-BMC-08
Shatabdi Govandi ART Center	ART-MU-BMC-07
Pediatric Center of Excellence	ART-MU-BMC-06
LTMGH Sion ART Center	ART-MU-BMC-05
KEM ART Center	ART-MU-BMC-03


ART-MU-BMC-16	MBPT/PA/179	2022-02-15
ART-MU-BMC-16	MBPT/PA/173	2022-02-21
ART-MU-BMC-16	MBPT/PA/103	2022-02-23

BDBA_Pediatric

(1, 'On IPT'),1
(2, 'Completed'), 2
(3, 'Stopped'), 1
(4, 'Restarted'), 1
(5, 'Stopped & Restarted'),
(6, 'Restarted & Stopped'),
(7, 'Transfer out'), 1
(8, 'Died'), 1
(9, 'LFU'), 9
(10,'Opted out'),10
(11, 'Refused'),
(12, 'Defaulter')

ART-MU-BMC-19 ART-MU-BMC-13 ART-MU-BMC-12

from PatientManagement.views import *
ipt_bulk_upload()

covid_bulk_upload()

BYL Nair ART Center

Dr R N Cooper ART Center


art_center_code 	pre_art_number	covid_19_vaccine_taken	date_of_1st_dose	date_of_2nd_dose


{% for item in missionform_obj %}

                        {% if item.field_config.field_type == 'select' %}

                            <label for="{{item.field_config.name}}">{{item.field_name}}
                                {% if item.required == True %}<span class="text-danger required">*</span>{% endif %}
                            </label>
                            <select name="{{item.field_config.name}}" class="form-control" 
                                {% if item.required == True %} required {% endif %}>
                                {% if item.field_config.empty_choice == True %} <option value="">Select Option</option>{% endif %}
                                    {% for key,value in item.field_config.choices.items %}
                                        <option value={{key}}>{{value}}</option>
                                    {% endfor %}
                            </select>

                            {% if item.required == True %}
                            <div class="invalid-feedback">{{item.field_name}} is Required.</div>
                            {% endif %}

                        {% elif item.field_config.field_type == 'radio' %}    

                            <label for="{{item.field_config.name}}" class=""> {{item.field_name}} 
                                {% if item.required == True %}<span class="text-danger required">*</span>{% endif %}
                            </label>

                            <div class="custom_radiobtn pt10">
                                {% for key,value in item.field_config.choices.items %}
                                <label for="option_{{forloop.counter}}" class="form-check-inline">
                                    <input type="radio" name="{{item.field_config.name}}" value={{key}} class="mr5" 
                                    {% if item.required == True %} required {% endif %}>
                                    {{value}}
                                </label>
                                {% endfor  %}
                            </div>

                            {% if item.required == True %}
                            <div class="invalid-feedback">{{item.field_name}} is Required.</div>
                            {% endif %}

                        {% else %}
                            <label for="mission_name">{{item.field_name}}{% if item.required == True %}<span class="text-danger required">*</span>{% endif %}</label>
                            <input type="{{item.field_config.field_type}}" name="{{item.field_config.name}}" class="form-control input_style pt10"  value=""
                            {% if item.required == True %}required = ""{% endif %}
                            />

                            {% if item.required == True %}
                            <div class="invalid-feedback">{{item.field_name}} is Required.</div>
                            {% endif %}

                        {% endif %}
                    {% endfor %}













{"name": "course_type", "choices": {"1": "Yes", "2": "No"}, "field_type": "radio"}


{"name": "visual_acuity_as", "choices": {"1": "Before Surgery-RE", "2": "Final Followup"}, "field_type": "radio"}


Before Surgery-RE
Before Surger-LE
At the time of Discharge


Before Surgery-RE
Final Followup


{% if item.field_config.field_type == 'select' %}

   <select name="df_{{forloop.counter}}" id="df_{{forloop.counter}}" class="form-control input_style pt10" 
    {% if item.is_mandatory == True %} required {% endif %}>
    {% if item.empty_choice == True %} <option value="">Select Option</option>{% endif %}
    {% for key,value in item.choices.items %}
        <option value={{key}}>{{value}}</option>
    {% endfor %}
</select>

{% endif %}














{% extends "reportbase.html" %}
{% block midpart %}
<div class="row" >
    <div class="col-sm-6">
        <h3> Approved Procurement Detail </h3>
    </div>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                    <div class="card-header card-header-icon" data-background-color="blue">
                        <h3 class="card-title"> {{hospital.name}} - Budget : {{procurement.budget}} - Cycle Date : {{cycle_date}} -  Type : {{procurement.get_type_display}} - Funder : {{procurement.funder}} </h3>
                    </div>
                <form action="" class="form-horizontal" method="POST" id="editproblem">
                    {%csrf_token%}
                    <div class="table-responsive">
                        <table class="table table-hover" id="hospital_report">
                            <thead >
                            <tr>
                                <th>Item Name</th>
                                <th>Requested Qty</th>
                                <th>Approved Qty</th>
                                <th>MRP</th>
                                <th>Price</th>
                            </tr>
                            </thead>
                            {% for data in p_data %}
                                <tbody>
                                    {% if  procurement.procurement_approved_by %}
                                        <td>{{data.item_name}}</td>
                                        <td>{{data.required_qty}}</td>
                                    {% endif %}
                                    {% if  procurement.procurement_approved_by %}
                                        <td><input type="number" name="pro_{{data.id}}" value="{{data.approved_qty}}" class="form-control input_style qty" maxlength="5" required id="id_approved_qty" ></td>
                                    {% endif %}
                                    {% if  procurement.procurement_approved_by %}
                                        <td><input type="number" name="mrp_{{data.id}}" value="{{ data.s_mrp }}" class="form-control input_style price" maxlength="5" required id="id_mrp" ></td>
                                        <td class = "amount" >{{data.price}}</td>
                                    {% endif %}    
                                </tbody>    
                            {% endfor %}
                            <td><b>Total</b></td>
                            <td><b>{{required_qty_sum}}</b></b></td>
                            <input type='hidden' name='procurement_approved_by' id = 'id_procurement_approved_by' value = {{procurement.procurement_approved_by}}>
                            <td id = "approved_qty_total"><b>{{approved_qty_sum}}</b></td>
                            <td><b></b></td>
                            {% if  procurement.procurement_approved_by %}
                                <td id="total"><b></b></td>
                            {% else %}
                                <td ><b>{{price_sum}}</b></td>
                            {% endif %}
                        </table>
                    </div>
                    {% if  procurement.procurement_approved_by %}
                    <div class="form-group">
                        <label for="comment">Naration:</label>
                        <textarea class="form-control" rows="2" name ="naration" id="id_naration"></textarea>
                    </div>
                    <td>
                        <label for="comment">Funder:</label>
                        <select class="custom-select form-control-border" name="funder_id"  required data-style="btn btn-primary btn-round" data-size="5" tabindex="-98">     
                            <option value>Funder</option>
                            {% for funder in funder_list %}
                                <option value ='{{funder.id}}' >{{funder.name}}</option>
                            {% endfor %}
                        </select>
                    </td>
                    <div class="col-md-1">
                        <label for="exampleSelectBorder"></label>
                        <input type="submit" class="btn btn-success" value="Submit"  onclick="return confirmAction()" >
                    </div>
                    {% else %}
                        <div class="form-group">
                            <label for="comment">Naration:</label>
                            <td>{{procurement.naration}}</td>
                        </div>
                        <h4>Submited</h4>
                        <!-- <div class="row"> -->
                            <button style="margin:5px;" type="button" class="btn btn-primary float-right hide_button_procurement" id="export_procurement" onclick="window.location='/programtracker/procurement_export_data/?p_uuid={{p_uuid}}&export=true';return false;" id="export" style="margin-right:80px;">Export<div class="ripple-container"></div></button>
                            <!-- <button class="btn btn-rose pull-right" id="export" onclick="window.location='/programtracker/procurement_export_data/?export=true&p_uuid={{p_uuid}}';return false;" class="btn btn-sm btn-rose">Export <div class="ripple-container"></div></button>
                            --> <!-- <button class="btn btn-rose pull-right" id="export" style="margin-right:80px;">Export<div class="ripple-container"></div></button> -->
                             <!-- <div class="row">
                                <button class="btn btn-rose pull-right go_btn" id="export;">Export<div class="ripple-container"></div></button>
                            </div> -->
                    {% endif %}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-4">
                <button type="cancel" class="btn btn-warning" onclick="window.location='/programtracker/manage/approved-data/';return false;">Back</button>
            </div>
        </div>
    </div>
</div>
<script>
    function confirmAction() {
        let confirmAction = confirm("Are you sure to execute this action?");
        console.log(confirmAction);
        if (confirmAction == true) {
          alert("Action successfully executed");
        } else {
          alert("Action cancelled");
        }
    }
    $(document).ready(function () {
        function calculate_grand_total()
        {
            var qty = $('.qty');
            sum = 0;
            var procurement_approved_by = $('#id_procurement_approved_by').val();
            if (procurement_approved_by != "") {
               console.log(procurement_approved_by);
            } else {
                $('#approved_qty_total').html(0);
            }
            qty.each(function () {
                sum = parseFloat($('#approved_qty_total').html());
                sum += parseFloat($(this).val())
                $('#approved_qty_total').html(sum);
            });
            var amt = $('.amount');
            sum = 0;
            $('#total').html(0);
            amt.each(function () {
                sum = parseFloat($('#total').html());
                sum += parseFloat($(this).text())
                $('#total').html(sum);
            });
        }
        $('.qty,.price').keyup(function(){
            var tr = $(this).closest('tr');
            var qty = tr.find('#id_approved_qty').val();
            var price = tr.find('#id_mrp').val();
            tr.find('.amount').html(parseFloat(qty) * parseFloat(price));
            calculate_grand_total();
        });
        calculate_grand_total();
    });  
</script>
<script type="text/javascript">
    $(document).ready(function() {
    $.ajax({
    function export_report(param){ 
        console.log(param)
        url = "/programtracker/procurement_export_data/?"+param;
        window.location = url;
    };
})
});
</script>
{% endblock %}
>>>>>>>>>>>

def procurement_approved_detail_list(request,p_uuid):
    query = """select ps.id,ppd.uuid,ppd.item_name,ppd.required_qty,ppd.approved_qty,ps.mrp as s_mrp,round(ppd.mrp::numeric,2) as p_mrp,round((ppd.approved_qty * ps.mrp)::numeric,2)as price  from programtracker_procurementdetail ppd left join patientcounselling_supplementmaster ps on ppd.item_id=ps.id left join patientcounselling_fooditemmaster pf on ppd.item_id=pf.id  where procurement_uuid = '"""+p_uuid+"""'  order by item_name"""
    p_data = return_sql_results(query)  
    total_req_quantity_query = """SELECT SUM(required_qty) AS required_qty_total FROM programtracker_procurementdetail  where procurement_uuid = '"""+p_uuid+"""' """
    data1 = return_sql_results(total_req_quantity_query)
    required_qty_sum = data1[0]['required_qty_total']
    total_approved_quantity_query = """SELECT SUM(approved_qty) AS approved_qty_total FROM programtracker_procurementdetail  where procurement_uuid = '"""+p_uuid+"""' """
    data2 = return_sql_results(total_approved_quantity_query)
    approved_qty_sum = data2[0]['approved_qty_total']
    price_item_sum_query = """select SUM(ppd.approved_qty * ps.mrp) as price_sum  from programtracker_procurementdetail ppd left join patientcounselling_supplementmaster ps on ppd.item_id=ps.id left join patientcounselling_fooditemmaster pf on ppd.item_id=pf.id  where procurement_uuid = '"""+p_uuid+"""' """
    data3 = return_sql_results(price_item_sum_query)
    price_sum = data3[0]['price_sum']
    procurement = Procurement.objects.get(uuid = p_uuid)
    cycle_date = cycle_date = procurement.cycle_date.strftime('%Y-%b')
    if procurement.type == 1 :
        cycle_date = cycle_date = procurement.cycle_date.strftime('%Y-%b')
    else:
        cycle_date = cycle_date = procurement.cycle_date.strftime('%Y-%b-%d')
    hospital = Hospital.objects.get(id = procurement.hospital_id)
    funder_list = Funder.objects.all().order_by('name')
    # import ipdb;ipdb.set_trace()
    if request.method == 'POST':
        for add_supp in p_data:
            print(add_supp)
            if request.POST.get('pro_'+str(add_supp['id'])) > '0' :
                obj, created = ProcurementDetail.objects.update_or_create(
                uuid = str(uuid.uuid4()),
                procurement_uuid = procurement.uuid,
                defaults ={
                    "hospital" : procurement.hospital,
                    "procurement_uuid" : procurement.uuid,
                    "item_type" : 4,
                    "item_id" : add_supp['id'],
                    "item_name" : add_supp['item_name'],
                    "mrp" : request.POST.get('mrp_'+str(add_supp['id'])),
                    "approved_qty": request.POST.get('pro_'+str(add_supp['id'])),
                })
            # update_query = """UPDATE programtracker_procurementdetail SET approved_qty = """+request.POST.get('pro_'+str(d_procuremnt['id']))+""" ,mrp = """+request.POST.get('mrp_'+str(d_procuremnt['id']))+""" WHERE uuid = '"""+d_procuremnt['id']+"""' """
            # cur=connection.cursor()
            # cur.execute(update_query)
        if procurement.type == 2 :
            approved_price_item_sum_query = """select SUM(ppd.approved_qty * ps.mrp) as approved_price_sum  from programtracker_procurementdetail ppd left join patientcounselling_supplementmaster ps on ppd.item_id=ps.id left join patientcounselling_fooditemmaster pf on ppd.item_id=pf.id  where procurement_uuid = '"""+p_uuid+"""' """
            data4= return_sql_results(approved_price_item_sum_query)
            approved_price_sum = data4[0]['approved_price_sum']
            Procurement.objects.filter(uuid = p_uuid).update(budget = approved_price_sum)
        Procurement.objects.filter(uuid = p_uuid).update(funder_id = request.POST.get('funder_id'),naration = request.POST.get('naration'),procurement_approved_by = request.user.username,procurement_approved_timestamp = datetime.now())
        procurement_query = """with hospital as(select id,name from hospital_hospital  ),
        procurement_detail as (select procurement_uuid,item_id, item_name,required_qty, approved_qty ,mrp as p_mrp from programtracker_procurementdetail inner join hospital on hospital_id =hospital.id  ),
        supplementdata as (select procurement_uuid,item_id, item_name,required_qty, approved_qty,p_mrp,approved_qty * p_mrp as price  from patientcounselling_supplementmaster ps inner join procurement_detail on procurement_detail.item_id=ps.id)
        select * from supplementdata where procurement_uuid = '"""+p_uuid+"""'"""
        procurement_data = return_sql_results(procurement_query)
        approved_procuremnt(request,p_uuid,str(procurement.hospital_id),procurement_data)
        return redirect('programtracker:approved_hospital')
    return render(request,'procurement_approval/approvedDetails.html',locals())

>>>>>>>>>>>


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16/05/2022;;;;;;;;;;;;;;;;;;;;;;
mpr/report/





var education = '{{sociodemographic_obj.education}}'
$('#education').val(education)

1532

var education = '{{sociodemographic_obj.education}}'
$('#education').val(education)

<a href="/manage/project/view/?pid={{projectobj.id}}&tab=location&export=True" class="ng-star-inserted" style="">
    <button class="btn btn-just-icon btn-round btn-info" rel="tooltip" title='Export'>
        <em class="material-icons">import_export</em>
    </button>
    </a>

     <script>
        $(document).ready(function(){
            var option = '<option value="month">month</option>';
            var selectedMon ="month";
            for (var i=1;i <= 12;i++){
                option += '<option value="'+ i + '">' + i + '</option>';
            }
            $('#month').append(option);
            $('#month').val(selectedMon);

            var d = new Date();
            var option = '<option value="year">year</option>';
            selectedYear ="year";
            for (var i=1929;i <= d.getFullYear();i++){// years start i
                option += '<option value="'+ i + '">' + i + '</option>';
            }
            $('#year').append(option);
            $('#year').val(selectedYear);
        });
     </script>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                    
                                    <label >MPR Report Filter:</label>
                                    <SELECT id ="year" name = "yyyy" onchange="change_year(this)"></SELECT>
                                    <SELECT  id ="month" name = "mm" onchange="change_month(this)"></SELECT>

                                    <button type="submit" class="btn btn-primary mr-1 waves-effect waves-float waves-light" tabindex="5">export</button>


                                    <a href="/dashboard/export/excel/?year= " class="ng-star-inserted">
                                    <em class="material-icons">export</em>
                                    </a>



dashboard/export/excel/


<a href="{% url 'dashboard:export_excel' %}" class="ng-star-inserted">
                                        <em class="material-icons">export</em>
                                    </a>

  ?year=donor-amount&month=True ?export=True
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<form class = "container">
    <label >MPR report filter : <span>*</span></label>
    <SELECT id ="year" name = "yyyy" onchange="change_year(this)">
    </SELECT>
    <SELECT  id ="month" name = "mm" onchange="change_month(this)">
    </SELECT>
</form>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
var Days =[31,28,31,30,31,30,31,31,30,31,30,31];// index => month [0-11]
$(document).ready(function(){
    var option = '<option value="month">month</option>';
    var selectedMon ="month";
    for (var i=1;i <= 12;i++){
        option += '<option value="'+ i + '">' + i + '</option>';
    }
    $('#month').append(option);
    $('#month').val(selectedMon);

    var d = new Date();
    var option = '<option value="year">year</option>';
    selectedYear ="year";
    for (var i=1929;i <= d.getFullYear();i++){// years start i
        option += '<option value="'+ i + '">' + i + '</option>';
    }
    $('#year').append(option);
    $('#year').val(selectedYear);
});
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.container{
  padding: 15px;
}
SELECT{
  padding: 5px;
}
input.date{
  width:50px;
  padding: 5px;
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



def indicator_create():
     for boundary_obj in Boundary.objects.filter(boundary_level__code=3, active=2):
         for ms_in in MasterIndicator.objects.filter(active=2):
             print(boundary_obj, ms_in.id)
             MPR.objects.create(indicator = ms_in, art_center = boundary_obj)
indicator_create()


year = 2012
month = 09
MPR.objects.filter(periodicity_date__year=year,periodicity_date__month=month)


filename=MPR_Report-{date}.xlsx'.format(
        date=datetime.now().strftime('%Y-%m-%d'),


<a href="{% url 'dashboard:export_excel' %}" class="ng-star-inserted" style="">
<button class="btn btn-just-icon btn-round btn-info" rel="tooltip" title='Export'>
<em class="material-icons">import_export</em>
</button>
</a>


Create a folder and put all the files inside it.
Create a virtual environtment – virtualenv env
Activate VirtualENV – source env/bin/activate
Run requirements.txt – pip3 install -r requirements.txt
Run the Application – python3 manage.py runserver














ExpectedDate = datetime.datetime.strptime(request.POST.get('session_date'), "%d/%m/%Y")


from datetime import date
def sessions(request):
    # schools = School.objects.filter(active=2)
    teachers = Teacher.objects.filter(active=2)
    events = Session.objects.filter(active=2)
    school = request.GET.get('school', '')
    school = int(school) if school != '' else ''

    ExpectedDate = datetime.datetime.strptime(request.POST.get('session_date'), "%d/%m/%Y")
    if request.method == 'POST' and ExpectedDate == date.today():
        data = request.POST
        teacher = data.get('teacher')
        teachers = Teacher.objects.get(id=teacher)
        school_id = data.get('school')
        schools = School.objects.get(id=school_id)
        session_date = data.get('session_date')

	session_start_time = data.get('session_start_time')
	session_end_time = data.get('session_end_time')
	session_start_time = parse(session_start_time)
	session_date = parse(session_date)
	session_end_time = parse(session_end_time)
	session_start_date_time = datetime.datetime.combine(
	    session_date, session_start_time.time())
	session_end_date_time = datetime.datetime.combine(
	    session_date, session_end_time.time())
	current_status = MasterLookup.objects.get(name='Scheduled')
	event_obj = Session.objects.create(teacher=teachers, school=schools, session_start_time=session_start_date_time,
	                                   session_end_time=session_end_date_time, session_status=current_status)
	event_obj.save()

	return redirect('/session/')
    else:
	return redirect('/session/')

    return render(request, 'calendar_session/session.html', locals())



request.POST.get('session_date')










@ login_required(login_url='/admin/')
def sessions(request):
    # schools = School.objects.filter(active=2)
    teachers = Teacher.objects.filter(active=2)
    events = Session.objects.filter(active=2)
    school = request.GET.get('school', '')
    school = int(school) if school != '' else ''
        if request.method == 'POST':
            data = request.POST
            teacher = data.get('teacher')
            teachers = Teacher.objects.get(id=teacher)
            school_id = data.get('school')
            schools = School.objects.get(id=school_id)
            session_date = data.get('session_date')

            session_start_time = data.get('session_start_time')
            session_end_time = data.get('session_end_time')
            session_start_time = parse(session_start_time)
            session_date = parse(session_date)
            session_end_time = parse(session_end_time)
            session_start_date_time = datetime.datetime.combine(
                session_date, session_start_time.time())
            session_end_date_time = datetime.datetime.combine(
                session_date, session_end_time.time())
            current_status = MasterLookup.objects.get(name='Scheduled')
            event_obj = Session.objects.create(teacher=teachers, school=schools, session_start_time=session_start_date_time,
                                            session_end_time=session_end_date_time, session_status=current_status)
            event_obj.save()
            return redirect('/session/')

    return render(request, 'calendar_session/session.html', locals())



from datetime import date
def sessions_edit(request, session_id):
    # schools = School.objects.all()
    # teachers = Teacher.objects.all()
    events = Session.objects.get(id=session_id,)
    # current_status = MasterLookup.objects.filter(parent__name='session status')
    if events.server_created_on ==date.today():
        if request.method == 'POST':
        data = request.POST
        teacher = data.get('teacher')
        teachers = Teacher.objects.get(id=teacher)
        school = data.get('school')
        schools = School.objects.get(id=school)
        session_start_time = data.get('session_start_time')
        session_end_time = data.get('session_end_time')
        session_status = data.get('session_status') 
        current_status = MasterLookup.objects.get(id=session_status)  
        events.teacher=teachers 
        events.school=schools
        events.session_start_time=session_start_time
        events.session_end_time=session_end_time
        events.session_status=current_status 
        return redirect('/session/')
     else:
	return redirect('/session/')

	













statushistory_obj = StatusHistory.objects.create(
                patient = patient_registration,
                past_status_in_pre_art_care = status_pre_art_care,
                created_by = login_user)

            if status_art_care:
                statushistory_obj.past_art_care_status = status_art_care

            statushistory_obj.save()
art_care_status



# if StatusHistory.objects.filter(patient = patient_registration).exists():
#     statushistory_obj = StatusHistory.objects.get(patient = patient_registration)
#     statushistory_obj.prasent_status_in_pre_art_care = status_pre_art_care
#     if status_art_care:
#         statushistory_obj.prasent_art_care_status = status_art_care
#     statushistory_obj.save()  




Decimal fields
ART Visit Form
1.Height (in cm)
2.Weight (in Kg)
3.Blood Pressure Systolic
4.Blood Pressure Diastolic

Result Form
1.Hemoglobin (mg/dl)
2.S. Bilirubin
3.C Reactive Protein
, date_of_1st_dose = row['date_of_1st_dose'], date_of_2nd_dose = row['date_of_2nd_dose']

login_user = request.user

lac_link_out_created_by = login_user,


def social_report():
    file_name = "ART_center_wise_report_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['ART_Name', 'address_verified']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 

        for art_center_obj in Boundary.objects.filter(boundary_level__id = 3):
            for socialdemographics_obj in SocioDemographics.objects.filter(patient__art_center = art_center_obj, address_verified = 2, aadhar_address=2):
                    writer.writerow({'ART_Name': art_center_obj, 'address_verified': socialdemographics_obj.address_verified})  

        print("Writing complete")




(select pa.name_patient,pa.pre_art_no, pa.art_reg_no,pa.art_family_id, bb.name, bb.code from "PatientManagement_artregistration" pa inner join masterdata_boundary bb on bb.id = pa.art_center_id where pa.art_center_id = 1930 AND pa.art_family_id in (select art_family_id from "PatientManagement_artregistration" where art_center_id = 1930 group by art_family_id having count(*)>1) order by pa.art_family_id) TO '/tmp/family_details.csv' with csv delimiter','header;



def social_report():
    file_name = "ART_center_wise_report_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['ART_Name', 'address_verified']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 
        for art_center_obj in Boundary.objects.filter(boundary_level__id = 3):
            for socialdemographics_obj in SocioDemographics.objects.filter(patient__art_center = art_center_obj, address_verified = 2, aadhar_address=2):
                    writer.writerow({'ART_Name': art_center_obj, 'address_verified': socialdemographics_obj.address_verified})  
        print("Writing complete")












request.session['user_boundary_list']=list(set(user_boundary_levelcode.get_location_type()))
blocks_id = Boundary.objects.filter(id__in=request.session.get("user_boundary_list")).values_list("id",flat=True)

sacep-visit form
Type of DACEP/SACEP

id="about"
tag = tag
 <script>
        $(document).ready(function() {
            var tag = '{{tag}}'
            // alert(tag)
            if(tag == 'true'){
                $('#about')[0].click();
            }
            // $("#about").hide();
        }); 
    </script>


<span class="text-danger">*</span></label>

duplicates = ArtRegistration.objects.values('art_family_id','uuid').annotate(Count('art_family_id')).order_by().filter(art_family_id__count__gt=1)

art_registration_obj in ArtRegistration.objects.filter(uuid__in=[item['uuid'] for item in duplicates]):

duplicates = ArtRegistration.objects.values('art_family_id','uuid').annotate(Count('art_family_id')).order_by('name_patient').filter(art_center__code = art_center, art_family_id__isnull=False,art_family_id__count__gt=1)
        print(duplicates)
        for art_registration_obj in ArtRegistration.objects.filter(uuid__in=[item['uuid'] for item in duplicates]):
            writer.writerow({'Patient_Name': art_registration_obj.name_patient, 'PRE_ART_number': art_registration_obj.pre_art_no, 'ART_Number': art_registration_obj.art_reg_no,'Family_ID': art_registration_obj.art_family_id})             

dupl_cates_prearts = TempImportArtRegistrationData.objects.filter(pre_art_no__isnull=False).exclude(pre_art_no__exact='').values('pre_art_no','art_center').annotate(count_status=Count('pre_art_no')).order_by().filter(count_status__gt=1).values_list('pre_art_no',flat=True).distinct()

PatientManagement_artregistration where art_center_id = 1930


select pa.name_patient,pa.pre_art_no, pa.art_reg_no,pa.art_family_id, bb.name, bb.code from "PatientManagement_artregistration" pa inner join masterdata_boundary bb on bb.id = pa.art_center_id where pa.art_center_id = 1930 AND pa.art_family_id in (select art_family_id from "PatientManagement_artregistration" where art_center_id = 1930 group by art_family_id having count(*)>1) order by pa.art_family_id; 

select art_family_id from PatientManagement_artregistration where art_center_id = 1930 group_by art_family_id having count(*)>1


sangola (not found) to Sangli *
bida (not found) to bidar *
reva(not found) to rewa *
riva (not found) to rewa *
khalidababd (not found) to Khalilabad
phatepur (not found) to Fatehpur Sikri
sholapur (not found) to Solapur *
simriya
samatia
Delhi  *
sant kabir nagar *


for art_registration_obj in ArtRegistration.objects.filter(art_center__code = art_center, art_family_id__isnull=False):
from datetime import date, timedelta
import csv  
from PatientManagement.views import *
social_report()

art_center = "ART-MU-BMC-07"
family_report(art_center)


$.validator.addMethod(
		"greaterThanTrue",
		function (value, element, params) {
			if( $(params).val().length != "0" ){
				if (!/Invalid|NaN/.test(new Date(value))) {
					return new Date(value) > new Date($(params).val());
				}
				return (isNaN(value) && isNaN($(params).val())) || Number(value) > Number($(params).val());
			}else{
				return true;
			}
		},
		"Date Must be greater than {0}."
	);










K.J. Somaiya Medical College	ART-MU-BMC-20
GTB Hospital, Sewri	ART-MU-BMC-18 
Municipal STD Clinic, Mumbai	ART-MU-BMC-17
Rajawadi ART Center	ART-MU-BMC-15
K B Bhabha (Bandra) ART Center	ART-MU-BMC-14
Dr R N Cooper ART Center	ART-MU-BMC-13
Godrej ART Center	ART-MU-BMC-11
L & T ART Center	ART-MU-BMC-10
M T Agarwal ART Center	ART-MU-BMC-09
Siddharth ART Center	ART-MU-BMC-08
Shatabdi Govandi ART Center	ART-MU-BMC-07
Pediatric Center of Excellence	ART-MU-BMC-06

art_center_code	pre_art_number	date_visit	cda4_count


MBPT ART Center	ART-MU-BMC-16!!!!!!!!!!!!!!!
BDBA ART Center	ART-MU-BMC-12!!!!!!!!

BJ Wadia Hospital	ART-MU-BMC-19


K.J. Somaiya Medical College	ART-MU-BMC-20 >>>>>>>>>>>
GTB Hospital, Sewri	ART-MU-BMC-18>>>>>>>>>>>>>>>>>>
Municipal STD Clinic, Mumbai	ART-MU-BMC-17>>>>>>>>>>>>>>>
Rajawadi ART Center	ART-MU-BMC-15 >>>>>>>>>>>>>>>>>
K B Bhabha (Bandra) ART Center	ART-MU-BMC-14 >>>>>>>>>>>>>>
Dr R N Cooper ART Center	ART-MU-BMC-13 >>>>>>>>>>>>>>>
Godrej ART Center	ART-MU-BMC-11 >>>>>>>>>>>>>>>>
L & T ART Center	ART-MU-BMC-10 >>>>>>>>>>>>
M T Agarwal ART Center	ART-MU-BMC-09 >>>>>>>>>>>
Siddharth ART Center	ART-MU-BMC-08 >>>>>>>>>>>>>
Shatabdi Govandi ART Center	ART-MU-BMC-07 >>>>>>>>>>
Pediatric Center of Excellence	ART-MU-BMC-06 >>>>>>>>>>>


	$.validator.addMethod(
		"greaterThantrue",
		function (value, element, params) {
			if(value.length != "0" ){
				var value = value.split("-").reverse().join("-")
				var params = $(params).val().split("-").reverse().join("-")	
				if (!/Invalid|NaN/.test(new Date(value))) {
					return new Date(value) > new Date(params);
				}
				return (isNaN(value) && isNaN(params) || Number(value) > Number(params));
			}else{
				return true;
			}
		},
		"Date Must be greater than {0}."
	);





>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>legacy_cd4_bulk_upload>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import csv  
from PatientManagement.views import *     
from django.db import DatabaseError, transaction  
def legacy_cd4_bulk_upload():
    with open('/home/mahiti/jobaid_dev/media/Pediatric_Center_of_Excellence.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        try:
            with transaction.atomic():
                for row in reader:
                    if not LegacyCD4.objects.filter(date_visit=row['date_visit'], cda4_count=row['cda4_count'], pre_art_number=row['pre_art_number'], art_center_code = row['art_center_code']).exists():
                        patient = ArtRegistration.objects.filter(pre_art_no = row['pre_art_number'], art_center__code = row['art_center_code']).first()
                        if patient:
                            legacy_cd4_add = LegacyCD4(patient = patient,
                                                patient_uuid = patient.uuid,
                                                date_visit = row['date_visit'],
                                                cda4_count = row['cda4_count'],
                                                pre_art_number = patient.pre_art_no,
                                                pid_number = patient.pid_number,
                        			art_center_code = row['art_center_code']
                            )
                            legacy_cd4_add.save()
                            print(legacy_cd4_add.id,"import start")
        except Exception as e:
            print(e)
        print("import end")
legacy_cd4_bulk_upload()
>>>>>>>>>>>>>>>>>>>>>>>>

import csv  
from PatientManagement.views import *     
from django.db import DatabaseError, transaction  
def legacy_cd4_bulk_upload():
    with open('/home/mahiti/Documents/Job_Aid/job-aid/media/Godrej_ART_Center.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        try:
            with transaction.atomic():
                for row in reader:
                    if not LegacyCD4.objects.filter(date_visit=row['date_visit'], cda4_count=row['cda4_count'], pre_art_number=row['pre_art_number'], art_center_code = row['art_center_code']).exists():
                        patient = ArtRegistration.objects.filter(pre_art_no = row['pre_art_number'], art_center__code = row['art_center_code']).first()
                        if patient:
                            legacy_cd4_add = LegacyCD4(patient = patient,
                                                patient_uuid = patient.uuid,
                                                date_visit = row['date_visit'],
                                                cda4_count = row['cda4_count'],
                                                pre_art_number = patient.pre_art_no,
                                                pid_number = patient.pid_number,
						art_center_code = row['art_center_code']
                            )
                            legacy_cd4_add.save()
                            print(legacy_cd4_add.id,"import start")
        except Exception as e:
            print(e)
        print("import end")
legacy_cd4_bulk_upload()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>legacy_viral_load_bulk_upload>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import csv
from PatientManagement.views import *
def legacy_viral_load_bulk_upload():
    with open('/home/mahiti/jobaid_dev/media/BDBA_legacy_viral_load_data.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
            if not LegacyViralLoad.objects.filter(date_visit=row['date_visit'], viral_load_count=row['viral_load_count'], art_center_code = row['art_center_code'], pre_art_number = row['pre_art_number']).exists():
                date_visit = row['date_visit']
                viral_load_count = row['viral_load_count']
                art_center_code = row['art_center_code']
                pre_art_number = row['pre_art_number']
                new_vl = LegacyViralLoad(date_visit=date_visit, viral_load_count=viral_load_count, art_center_code = art_center_code, pre_art_number = pre_art_number)
                new_vl.save()
                print(new_vl.id,"import start")
        print("import end")
legacy_viral_load_bulk_upload()


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>






from django.db import DatabaseError, transaction

try:
    with transaction.atomic():
        your script code
except Exception as e:
    print the error






















KEM_ART_LegacyViralLoad-2022-05-23.csv

import csv
from PatientManagement.views import *
def legacy_viral_load_bulk_upload():
    with open('/home/mahiti/Documents/Job_Aid/job-aid/media/KEM_ART_LegacyViralLoad-2022-05-23.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
		new_vl = LegacyViralLoad.objects.filter(date_visit=row['date_visit'], viral_load_count=row['viral_load_count'], art_center_code = row['art_center_code'], pre_art_number = row['pre_art_number']).delete()

        print("import end")
legacy_viral_load_bulk_upload()










path('api/call-info/', get_call_incoming),

API login api AKRSPI


I


















f there is a visit entry , we should not allow to select date in legacy CD4 which is greater than visit date

def sub_questions_import(inp, spamwriter):
    spamwriter.writerow(['survey','id','active','created','modified','block','qtype','api_qtype','text','validation',\
   'question_order','code','help_text','parent','mandatory','display','hidden','display_name','is_profile',\
   'is_grid','language_code','master_question','display_inline','address_question','allow_multiple','api_json',\
   'display_has_name','parent_question','is_editable','training_config','code_display'])
   
    for i in Question.objects.filter(block__survey_id=int(inp)).order_by('id'):
       s = [i.block.survey.name,i.id,i.active,i.created,i.modified,i.block,i.qtype,i.api_qtype,i.text,i.validation,\
       i.question_order,i.code,i.help_text,i.parent,i.mandatory,i.display,i.hidden,i.display_name,i.is_profile,\
       i.is_grid,i.language_code,i.master_question,i.display_inline,i.address_question,i.allow_multiple,i.api_json,\
       i.display_has_name,i.parent_question,i.is_editable,i.training_config,i.code_display]
       spamwriter.writerow(s)

@login_required(login_url="/login/")
def questions_import(request):
   import unicodecsv as csv
   inp = request.GET.get('id')
   response = HttpResponse(content_type='text/csv')
   survey_name = Survey.objects.get(id=inp).name
   survey_name = survey_name.replace(' ','_')
   response['Content-Disposition'] = 'attachment; filename="Question"'+survey_name+'.csv"'
   spamwriter = csv.writer(response)
   sub_questions_import(inp, spamwriter)
   return response



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


=======================================09/05/2022==========================================

SGOT(AST)
SGPT(ALT)
C Reactive Protein
hemoglobin


Systolic
Diastolic


 def get_treatment(self):
        treatment_name = None
        treatments = Treatment.objects.filter(patient = self.patient).filter((Q(start_date__lte = self.date_visit) & Q(end_date__isnull = True)) | (Q(start_date__lte = self.date_visit) & Q(end_date__gte = self.date_visit)))
        if treatments:
            regimen_uuid = treatments.last().treatment_initiated_regimen_uuid
            treatment_name = Regimen.objects.get(uuid = regimen_uuid).name
        return treatment_name


            if not LegacyCD4.objects.filter(date_visit=date_visit, cda4_count=cda4_count).exists():



art_center_code = row['art_center_code']




09947013-c468-4de1-9257-24df9742a6de
{
    "results": [
        {
            "id": 42,
            "instance_id": 15,
            "i_title": "DULT Staff",
            "l_level": 1,
            "l_icon": "https://comp2ass.s3.ap-south-1.amazonaws.com/file/files/11_13RKec0.jpg",
            "completion_text": null,
            "completion_image": "https://comp2ass.s3.ap-south-1.amazonaws.com/file/files/22_Id3HAiU.jpg",
            "clue_image": "https://comp2ass.s3.ap-south-1.amazonaws.com/file/files/commute-trip-reduction-software-1500x844_HGp7H1a.png",
            "l_qrcode": "",
            "l_title": "Fun time with some thought",
            "l_stitle": "",
            "l_body": "FOCUS",
            "l_bodytype": "PARAGRAPHED",
            "l_bodyoptions": null,
            "locations": "",
            "l_media": null,
            "l_qr_id": "14e81290-f95e-41f6-933c-36c71c396380",
            "unlock_after": "",
            "l_misc": null,
            "scan_complete": false,
            "created_at": "2021-12-08T11:05:49.103230Z",
            "progress": 33,
            "is_locked": false,
            "updated_at": "2022-05-07T19:01:03.630842Z",
            "TextData": [],
            "GameDataLog": []
        },
        {
            "id": 51,
            "instance_id": 15,
            "i_title": "DULT Staff",
            "l_level": 2,
            "l_icon": "https://comp2ass.s3.ap-south-1.amazonaws.com/file/files/loc_d4xAIVl.jpg",
            "completion_text": null,
            "completion_image": "https://comp2ass.s3.ap-south-1.amazonaws.com/file/files/loc_Je5nFVp.jpg",
            "clue_image": "https://comp2ass.s3.ap-south-1.amazonaws.com/file/files/loc_8gHJz8g.jpg",
            "l_qrcode": "",
            "l_title": "some more?",
            "l_stitle": "",
            "l_body": "Quickly",
            "l_bodytype": "PARAGRAPHED",
            "l_bodyoptions": null,
            "locations": "",
            "l_media": null,
            "l_qr_id": "6f643aad-b976-4917-8891-c987aa1c0f3a",
            "unlock_after": "",
            "l_misc": null,
            "scan_complete": false,
            "created_at": "2022-05-07T19:09:57.181534Z",
            "progress": 14,
            "is_locked": false,
            "updated_at": "2022-05-09T04:59:21.505382Z",
            "TextData": [],
            "GameDataLog": [
                {
                    "id": 331,
                    "instance_id": 15,
                    "level_sublevel_id": 51,
                    "level_ids_id": null,
                    "level_sublevel_ids_id": 51,
                    "level_sublevel": "LEVEL",
                    "user_id": 26,
                    "data": "",
                    "misc": "",
                    "status": "ACTIVE",
                    "created_at": "2022-05-08T17:47:58.071099Z",
                    "updated_at": "2022-05-08T18:12:35.263177Z"
                }
            ]
        }
    ]
}


















created_by = models.ForeignKey(User,on_delete=models.DO_NOTHING, null=True, blank=True)
===========================================================================================

<td class="text-nowrap">{% for regimen in regimens %}
{% if treatment_summary.first.treatment_initiated_regimen_uuid == regimen.uuid|stringformat:"s" %}{{regimen.name}}{% endif %}
{% endfor %}</td>

<td class="text-nowrap">{{visit.get_treatment}}</td>



from django.db.models import Q
def get_treatment(self):
        treatment_name = None
        treatments = Treatment.objects.filter(patient = self.patient).filter(Q(start_date__gte = self.date_visit) | Q(end_date__lte = self.date_visit))
        print(treatments)
        if treatments:
            regimen_uuid = treatments.last().treatment_initiated_regimen_uuid
            treatment_name = Regimen.objects.get(uuid = regimen_uuid).name
        return treatment_name
    




Treatment.objects.filter(start_date__lt=date,end_date__gt=date)

start_date = models.DateField(null=True, blank=True)
end_date = models.DateField(null=True, blank=True)





    def get_treatment(self):
        treatment_name = None
        treatments = Treatment.objects.filter(patient = self.patient).filter(Q(start_date__gte = self.date_visit) | Q(end_date__lte = self.date_visit))
        print(treatments)
        if treatments:
            regimen_uuid = treatments.last().treatment_initiated_regimen_uuid
            treatment_name = Regimen.objects.get(uuid = regimen_uuid).name
        return treatment_n



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>21/04/2022>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

daily_report_art_cetner








class TripStartForm(forms.ModelForm):

    class Meta:
        model = Trip
        fields = ('vehicle', 'source', 'destination', 'ulp', 'vpm', 'hsd', 'svpd', 'start_date', 'start_odometer', 'created_by')


        widgets = {
            'vehicle': forms.Select(attrs={'class': 'selectpicker'}),
            'source': forms.Select(attrs={'class': 'selectpicker'}),
            'destination': forms.Select(attrs={'class': 'selectpicker'}),
            'ulp': forms.NumberInput(attrs={'class': 'form-control'}),
            'vpm': forms.NumberInput(attrs={'class': 'form-control'}),
            'hsd': forms.NumberInput(attrs={'class': 'form-control'}),
            'svpd': forms.NumberInput(attrs={'class': 'form-control'}),
            'start_date': forms.TextInput(attrs={'type': 'date'}),
            'created_by': forms.TextInput(attrs={'type': 'hidden'}),
        }

        self.helper.form_method = 'post'
        self.helper.add_input(Submit('add_new_trip', 'Start Trip'))
        self.helper.layout = Layout(
            Row(
                Column('vehicle'),
                Column('source'),
                Column('destination'),
            ),
            Row(
                Column('ulp'),
                Column('vpm'),
                Column('hsd'),
                Column('svpd'),
            ),
            Row(
                Column('start_date'),
                Column('start_odometer'),
            ),
            Row(
                Column('created_by'),
            )
        )



class TrainingForm(forms.ModelForm):

    class Meta:
        model = Training
        fields = ('name', 'type', 'content_link', 'start_date', 'end_date', 'created_by')

    widgets = {
        'name': forms.TextInput(attrs={'class': 'form-control'}),
        'type': forms.Select(attrs={'class': 'selectpicker'}),
        'content_link': forms.TextInput(attrs={'class': 'form-control mt-5 p-2'}),
        #'start_date': forms.DateInput(attrs={'type': 'date'}),
        'start_date': forms.TextInput(attrs={'type': 'date'}),
        'end_date': forms.TextInput(attrs={'type': 'date'}),
        'created_by': forms.TextInput(attrs={'type': 'hidden'}),
    }


    def _init_(self, *args, **kwargs):
        super()._init_(*args, **kwargs)
        self.helper = FormHelper()
        self.fields['name'].label = "Training Name"
        self.fields['type'].label = "Select Training Type"
        self.fields['content_link'].label = "Google drive training pack link"
        self.fields['start_date'].label = "Start Date"
        self.fields['end_date'].label = "End Date"

        self.helper.form_method = 'post'
        self.helper.add_input(Submit('add_training', 'Add'))
        self.helper.layout = Layout(
            Row(
                Column('name'),
            ),
            Row(
                Column('type'),
                Column('content_link')
            ),
            Row(
                Column('start_date'),
                Column('end_date')
            ),
            Row(
                Column('created_by'),
            ),
        )






from PatientManagement.models import *

art_link_obj = ARTPatientLinkage.objects.filter(active=2)
for art_link_ob in art_link_obj:
	ArtRegistration.objects.filter(uuid = art_link_ob.patient.uuid).update(art_center = art_link_ob.art_center)
print('update')

Satish chandra


sociodemographics_updated_obj = SocioDemographics.objects.filter(patient__art_center = art_center_obj, modified__date = datetime.date.today()).exclude(created__date = datetime.date.today())
                if art_registration_obj.count() > 0 or art_visit_obj.count() > 0 or profile_updated_obj.count() > 0 or sociodemographics_updated_obj.count()>0: 
                    reg_visit.append({'boundary_name': art_center_obj, 'patient_count':  art_registration_obj.count(),'visit_count':art_visit_obj.count(),'profile_updated': profile_updated_obj.count(),'sociodemographics_updated':sociodemographics_updated_obj.count()})

print(reg_visit)

<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
  border: 1.3px solid black;
  border-collapse: collapse;
}
</style>
</head>
<body>

<!-- <th>art_visit_self</th>
    <th>proxy_count</th>
    <th>s4_screening_status_count</th>
    <th>eac_updated_obj</th>
    <th>counselling_updated_obj</th>
    <th>family_updated_obj</th>
    <th>widowPension_updated_obj</th>
    <th>co_infection_updated_obj</th>
    <th>tbreg_updated_obj</th>
    <th>tbline_updated_obj</th>
    <th>comorbidity_updated_obj</th>
    <th>ipt_updated_obj</th>
    <th>pptct_updated_obj</th>
    <th>legacycd4_updated_obj</th>
    <th>treatment_updated_obj</th> -->

<table>
  <tr>
    <th rowspan="2">ART Name</th>
    <td colspan="4">Entries	</td>
    <td colspan="11">ART Visit</td>
    <th colspan="2">Family</th>
    <th colspan="3">TB</th>
    <th colspan="3">Other Illness</th>
  </tr>
  <tr>
    <td>Register New Patient</td>
    <td>Existing patient visits</td>
    <td>Profile updated</td>
    <td>Socio demographic updated</td>
    
    <td>Self</td>
    <td>Proxy</td>
    <td>4S +ve</td>
    <td>BP recorded</td>
    <td>RBS recorded</td>
    <td>Investigation recorded</td>
    <td>Treatment recorded</td>
    <td>Legacy CD4  recorded</td>
    <td>EAC recorded</td>
    <td>PPTCT recorded</td>
    <td>Counselling recorded</td>
    
    <td>Family recorded</td>
    <td>Widow Pension recorded</td>
    
     <td>IPT recorded</td>
     <td>TB line list recorded</td>
     <td>TB Register recorded</td>
     
     <td>Co-infection Recorded</td>
     <td>Co-morbidity recorded</td>
  </tr>
  <tr>
      <tr>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        
        <td>1</td>
        <td>2</td>
        
        <td>2</td>
        <td>1</td>
        <td>2</td>
        
        <td>1</td>
        <td>2</td>
       
        
      </tr>
   
  </tr>
</table>
</body>
</html>
 <tr>
    <th rowspan="2">Phone</th>
    <td>555-1234</td>
  </tr>
  <tr>
    <td>555-8745</td>
  </tr>


<table>
  <tr>
    <th rowspan="2">ART Name</th>
    <td colspan="4">Entries	</td>
    <td colspan="4">ART Visit</td>
    
  </tr>
  <tr>
    <td>Register New Patient</td>
    <td>Existing patient visits</td>
    <td>Profile updated</td>
    <td>Socio demographic updated</td>
    
    <td>Self</td>
    <td>Proxy</td>
    <td>4S +ve</td>
    <td>BP recorded</td>
    <td>RBS recorded</td>
    <td>Investigation recorded</td>
  </tr>
  <tr>
   
      <tr>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
      </tr>
   
  </tr>
</table>



<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
  border: 1.3px solid black;
  border-collapse: collapse;
}
</style>
</head>
<body>



<table>
  <tr>
    <th rowspan="2">ART Name</th>
    <td colspan="4">Entries	</td>
    <td colspan="11">ART Visit</td>
    <th colspan="2">Family</th>
    <th colspan="3">TB</th>
    <th colspan="3">Other Illness</th>
  </tr>
  <tr>
    <td>Register New Patient</td>
    <td>Existing patient visits</td>
    <td>Profile updated</td>
    <td>Socio demographic updated</td>
    
    <td>Self</td>
    <td>Proxy</td>
    <td>4S +ve</td>
    <td>BP recorded</td>
    <td>RBS recorded</td>
    <td>Investigation recorded</td>
    <td>Treatment recorded</td>
    <td>Legacy CD4  recorded</td>
    <td>EAC recorded</td>
    <td>PPTCT recorded</td>
    <td>Counselling recorded</td>
    
    <td>Family recorded</td>
    <td>Widow Pension recorded</td>
    
     <td>IPT recorded</td>
     <td>TB line list recorded</td>
     <td>TB Register recorded</td>
     
     <td>Co-infection Recorded</td>
     <td>Co-morbidity recorded</td>
  </tr>
  <tr>
      <tr>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        
        <td>1</td>
        <td>2</td>
        
        <td>2</td>
        <td>1</td>
        <td>2</td>
        
        <td>1</td>
        <td>2</td>
       
        
      </tr>
   
  </tr>
</table>
</body>
</html>

//////////////////
temp = []
art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
for art_center_obj in art_center_lists:
	art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = datetime.date.today())
        art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = datetime.date.today())
        if art_registration_obj.count() > 0 or art_visit_obj.count() > 0:
 	   temp.append({'ART_Name': art_center_obj, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})
print(temp)
//////////////////
>>>>>>>>>>>>>
 <td>{{post.ART_Name}}</td>
        <td>{{post.New_registrations}}</td>
        <td>{{post.Patient_visits}}</td>
      </tr>
    #email = model.EmailField(**OPTIONAL)




reg_visit = []
    art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
    
    for art_center_obj in art_center_lists:
        art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = datetime.date.today())
        art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = datetime.date.today())

        art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, modified__date = datetime.date.today())
        
        if art_registration_obj.count() > 0 or art_visit_obj.count() > 0 :
            reg_visit.append({'ART_Name': art_center_obj, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})
    


    print(reg_visit)
    msg_html = render_to_string('daily_patient_report_mail.html',{"results": reg_visit})
























temp = []
art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
for art_center_obj in art_center_lists:
	art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = datetime.date.today())
	art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = datetime.date.today())
	if art_registration_obj.count() > 0 or art_visit_obj.count() > 0:
		temp.append({'ART_Name': art_center_obj, 'Date': day, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})
print(temp)  
>>>>>>>>>>>>>
def report(sd,ed):
    start_date = datetime.strptime(sd, '%Y-%m-%d').date()
    end_date =datetime.strptime(ed, '%Y-%m-%d').date()
    delta = end_date - start_date
    file_name = "ART_center_wise_report_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['ART_Name', 'Date', 'New_registrations', 'Patient_visits']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 
        temp = []
        for i in range(delta.days + 1):
            day = start_date + timedelta(days=i)
            
            art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
            for art_center_obj in art_center_lists:
                art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = day)
                art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = day)
                if art_registration_obj.count() > 0 or art_visit_obj.count() > 0: 
                    writer.writerow({'ART_Name': art_center_obj, 'Date': day, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})  
                    temp.append({'ART_Name': art_center_obj, 'Date': day, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})
                    print(art_visit_obj.count(), art_registration_obj.count(), day ,art_center_obj)
        print(temp)    
        print("Writing complete")







>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
art_objs = ArtRegistration.objects.filter(active=2)
for art_obj in art_objs:
    legacy_cd4_edit = LegacyCD4.objects.filter(patient = art_obj).update(pid_number=art_obj.pid_number,patient_uuid = art_obj.uuid)
print('update')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
art_links = ARTPatientLinkage.objects.filter(active=2)
for art_link in art_links:
    LegacyViralLoad.objects.filter(art_center_code = art_link.art_center.code, pre_art_number = art_link.patient.pre_art_no).update(pid_number=art_link.patient.pid_number,patient_uuid = art_link.patient.uuid)
print('update')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


art_links = ARTPatientLinkage.objects.filter(active=2)
for art_link in art_links:
    LegacyViralLoad.objects.filter(art_center_code = art_link.art_center.code, pre_art_number = art_link.patient.pre_art_no).update(patient_uuid = art_link.patient.uuid)
print('update')


art_objs = ArtRegistration.objects.filter(active=2)
for art_obj in art_objs:
    legacy_cd4_edit = LegacyCD4.objects.filter(patient = art_obj).update(pre_art_number=art_obj.pre_art_no,patient_uuid = art_obj.uuid)
print('update')


1. check the multiselect EAC form, couselling form, ADR form and TB line list
2. Art register form update page should be redirect to patient summary page
3. Legacy CD4 date validation Done

class ARTVisitResources(resources.ModelResource):
    # code = Field(attribute='code', column_name='Sector')
    
    class Meta:
        model = ARTVisit
        import_id_fields = ('uuid',)

@admin.register(ARTVisit)
class AdminARTVisit(ImportExportActionModelAdmin,admin.ModelAdmin):
    resource_class = ARTVisitResources
    filter_horizontal = ('any_oi_uuid',)
    def get_list_display(self, request):
        return [field.name for field in self.model._meta.concrete_fields]  

onclick="cd4()"
L&T ART Viral load data for import
# ART center wise report 
def report(sd,ed):
    start_date = datetime.strptime(sd, '%Y-%m-%d').date()
    end_date =datetime.strptime(ed, '%Y-%m-%d').date()
    delta = end_date - start_date
    file_name = "ART_center_wise_report_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['ART_Name', 'Date', 'New_registrations', 'Patient_visits']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 

        for i in range(delta.days + 1):
            day = start_date + timedelta(days=i)
            
            art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
            for art_center_obj in art_center_lists:
                art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = day)
                art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = day)
                if art_registration_obj.count() > 0 or art_visit_obj.count() > 0: 
                    writer.writerow({'ART_Name': art_center_obj, 'Date': day, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})  

                    print(art_visit_obj.count(), art_registration_obj.count(), day ,art_center_obj)
            
        print("Writing complete") 


























import csv
from PatientManagement.views import *
def legacy_viral_load_bulk_upload():
    with open('/home/mahiti/jobaid_dev/media/New_MT-Agarwal-ARTC_LegacyViralLoad-2022-04-21.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
            if not LegacyViralLoad.objects.filter(date_visit=row['date_visit'], viral_load_count=row['viral_load_count'], art_center_code = row['art_center_code'], pre_art_number = row['pre_art_number']).exists():
                date_visit = row['date_visit']
                viral_load_count = row['viral_load_count']
                art_center_code = row['art_center_code']
                pre_art_number = row['pre_art_number']

                new_vl = LegacyViralLoad(date_visit=date_visit, viral_load_count=viral_load_count, art_center_code = art_center_code, pre_art_number = pre_art_number)
                new_vl.save()
                print(new_vl.id,"import start")
        print("import end")
legacy_viral_load_bulk_upload()




art_links = ADR.objects.filter(active=2)
for art_link in art_links:
    ADR.objects.filter(uuid = uuid).update(concomitant_medication = 44)
print('update')









{% if tb_line_obj %}
	<script>
		$(document).ready(function(){
			var  report_received = "{{tb_line_obj.report_received}}"
			var report = parseInt(report_received);
			if (report == "2"){
				$('.report_received_tb').removeClass('d-none');
			}

			var report_with = report.toString();
			$("#report_received").val(report_with)
			
		var  diagnosed_with_tb = "{{ tb_line_obj.patient_diagnosed }}"
		var diagnosed = parseInt(diagnosed_with_tb);
		if (diagnosed == "2" && report == "2"){
			$('.diagnosed_with_tb').removeClass('d-none');
		}
		var diagnosed_with = diagnosed.toString();
		$("#diagnosed_with_tb").val(diagnosed_with)

		const slectedval=[];
		var type_tests = {{tagged_type_tests|safe}}
		for (let i = 0; i < type_tests.length; i++) {
			var type_tests_name = type_tests[i]['name']
			var uuid = type_tests[i]['id'];
			slectedval.push(uuid);
		}

		$(".select2").select2({containerCssClass: function(e) { 
				return $(e).attr('required') ? 'required' : '';
			}
		});
	
		if(type_tests.length>0){
			$('#type_of_test').val(slectedval).trigger('change');
		} 		
	});

	document.getElementById("tb_line_form_submit_btn").onclick = function () { 
		setTimeout(() => {
			if($('#type_of_test').hasClass("is-invalid")){ 
				$(".required").addClass("error-msg");
			}else {
				$(".required").removeClass("error-msg");
			}
		}, 100);
	}
	function validatefn(){ 
		const sl2val = $("#type_of_test").val()
		if(sl2val.length>0){
			$("#type_of_test").removeClass("is-invalid");
			$("#type_of_test-error").hide(); 
		} else {
			$("#type_of_test").addClass("is-invalid");
			$("#type_of_test-error").show(); 
			$(".required").addClass("error-msg");
		}
	}
	</script>
	{% else %}
	<script>
		$(document).ready(function(){
			$(".select2").select2({containerCssClass: function(e) { 
				return $(e).attr('required') ? 'required' : '';
			}
			});
		})

		document.getElementById("tb_line_form_submit_btn").onclick = function () { 

			setTimeout(() => {
				if($('#type_of_test').hasClass("is-invalid")){
					$(".required").addClass("error-msg");
				} else {
					$(".required").removeClass("error-msg");
				}
			}, 100);
		}

		function validatefn(){ 
			const sl2val = $("#type_of_test").val()
			if(sl2val.length>0){
				$("#type_of_test").removeClass("is-invalid");
				$("#type_of_test-error").hide(); 
			} else {
				$("#type_of_test").addClass("is-invalid");
				$("#type_of_test-error").show(); 
				$(".required").addClass("error-msg");
			}
		}
		
	</script>
	
	{% endif %} 














{% if inication_chice.0 == patient_art_visit.indication_lam %}selected{% endif %}
ArtRegistration.objects.filter(active=2)

pre_art_number
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
art_objs = ArtRegistration.objects.filter(active=2)
for art_obj in art_objs:
    legacy_cd4_edit = LegacyCD4.objects.filter(patient = art_obj).update(pre_art_number=art_obj.pre_art_no,patient_uuid = art_obj.uuid)
print('update')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
art_links = ARTPatientLinkage.objects.filter(active=2)
for art_link in art_links:
 	LegacyViralLoad.objects.filter(art_center_code = art_link.art_center.code, pre_art_number = art_link.patient.pre_art_no).update(patient_uuid = art_link.patient.uuid)
print('update')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

art_objs = ArtRegistration.objects.filter(active=2)
for art_obj in art_objs:
	LegacyViralLoad.objects.filter(art_center_code = art_obj.art_center.code, pre_art_number = art_obj.pre_art_no).update(pid_number=art_obj.pid_number)


---------------------------------------------------------
$("#date_of_diagnosis").change(function(event) {
			/* Act on the event */
			// Due Date of visit at ARTC Date Picker Set
			$(".diagnosis_next_day").flatpickr({
				dateFormat: "d-m-Y",
				// date of visit date select min date after 1 day
				minDate: new Date($(this).val().split("-").reverse().join("-")).fp_incr(0),
				maxDate: new Date()
			});
		});

		$("#date_of_treatment_start").change(function(event) {
			/* Act on the event */
			// Due Date of visit at ARTC Date Picker Set
			$(".treatment_start_next_day").flatpickr({
				dateFormat: "d-m-Y",
				// date of visit date select min date after 1 day
				minDate: new Date($(this).val().split("-").reverse().join("-")).fp_incr(1),
				maxDate: new Date()
			});
		});
	});

	$(".diagnosis_next_day").flatpickr({
		dateFormat: "d-m-Y",
		// date of visit date select min date after 1 day
		minDate: new Date($("#date_of_diagnosis").val().split("-").reverse().join("-")).fp_incr(0),
		maxDate: new Date()
	});

	$(".treatment_start_next_day").flatpickr({
		dateFormat: "d-m-Y",
		// date of visit date select min date after 1 day
		minDate: new Date($('#date_of_treatment_start').val().split("-").reverse().join("-")).fp_incr(1),
		maxDate: new Date()
	});

----------------------------------------------------------




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<



drop function investigations_dashboard;
CREATE OR REPLACE FUNCTION investigations_dashboard(param_report_month integer, param_report_year integer)
    RETURNS void
    LANGUAGE plpgsql
AS $$ 
DECLARE 
    lcl_report_date date;
    lcl_report_month integer;
    lcl_report_year integer;
begin

if param_report_year != 0 and param_report_month != 0 then
    select concat(param_report_year, '-',param_report_month, '-01') into lcl_report_date;
else 
    select (current_date - interval '31 days')::date into lcl_report_date;
end if;

raise notice 'report for : %', lcl_report_date;
select to_char(lcl_report_date,'MM')::integer into lcl_report_month;
select to_char(lcl_report_date,'yyyy')::integer into lcl_report_year;

drop table if exists art_visits_temp;

create TEMPORARY table art_visits_temp
(
    patient_id uuid not null,
    date_visit varchar not null,
    art_center_id integer null,
    plha_dob date null,
    weight numeric(7,2) null,
    systolic numeric(7,2) null,
    diastolic numeric(7,2) null,
    screening_conducted integer null,
    s4_screening_status integer null,
    blood_test_conducted integer null,
    random integer null,
    plha_visit_status integer null,
    previous_weight numeric(7,2) null,
    primary key(patient_id, date_visit)
);

insert into art_visits_temp(patient_id, date_visit, weight, systolic, diastolic, screening_conducted, s4_screening_status, blood_test_conducted, random, plha_visit_status) 
select patient_id, date_visit, weight, systolic, diastolic, screening_conducted, s4_screening_status, blood_test_conducted, random, plha_visit_status
from "PatientManagement_artvisit" 
where to_char(date_visit,'MM-YYYY') =  to_char(lcl_report_date,'MM-YYYY')
and active = 2;

update art_visits_temp set plha_dob = a.dob
from "PatientManagement_sociodemographics" a 
where a.patient_id = art_visits_temp.patient_id and a.active = 2;

update art_visits_temp set art_center_id = a.art_center_id
from "PatientManagement_artregistration" a 
where a.uuid = art_visits_temp.patient_id and a.active = 2;

create table if not exists investigations_dashboard
(
    art_center_id integer not null,
    report_month integer not null,
    report_year integer not null,
    total_visits integer not null default 0,
    unique_plha_visits integer not null default 0,
    total_self_visits integer not null default 0,
    total_proxy_visits integer not null default 0,
    total_virtual_visits integer not null default 0,
    unique_plha_self_visits integer not null default 0,
    unique_plha_proxy_visits integer not null default 0,
    unique_plha_virtual_visits integer not null default 0,
    weight_check_done integer not null default 0,
    bp_check_done integer not null default 0,
    rbs_check_done integer not null default 0,
    s4_screening_check_done integer not null default 0,
    abnormal_weight integer not null default 0,
    abnormal_bp integer not null default 0,
    abnormal_rbs integer not null default 0,
    s4_screening_positive integer not null default 0,
    primary key (art_center_id, report_month, report_year)
);

delete from investigations_dashboard 
where report_month = lcl_report_month and report_year = lcl_report_year;

insert into investigations_dashboard(art_center_id, report_month, report_year)
select id, lcl_report_month, lcl_report_year 
from masterdata_boundary 
where boundary_level_id = 3 and active != 0
and operational is true;

update investigations_dashboard 
set total_visits = a.total_visits, 
unique_plha_visits = a.unique_plha_visits,
total_self_visits = a.total_self_visits,
total_proxy_visits = a.total_proxy_visits,
total_virtual_visits = a.total_virtual_visits
from (select art_center_id, count(*) total_visits, count(distinct patient_id) unique_plha_visits,
    sum(case when plha_visit_status = 1 then 1 else 0 end) as total_self_visits,
    sum(case when plha_visit_status = 2 then 1 else 0 end) as total_proxy_visits,
    sum(case when plha_visit_status = 3 then 1 else 0 end) as total_virtual_visits
    from art_visits_temp
    group by art_center_id
) as a
where a.art_center_id = investigations_dashboard.art_center_id
and investigations_dashboard.report_month = lcl_report_month
and investigations_dashboard.report_year = lcl_report_year;

update art_visits_temp
set previous_weight = a.weight
from (select distinct on(patient_id) patient_id, date_visit, weight 
    from "PatientManagement_artvisit"
    where date_visit < concat(lcl_report_year, '-',lcl_report_month, '-01')::date
    order by patient_id, date_visit desc
) as a 
where a.patient_id = art_visits_temp.patient_id;

update investigations_dashboard
set unique_plha_self_visits = x.unique_plha_self_visits,
unique_plha_proxy_visits = x.unique_plha_proxy_visits,
unique_plha_virtual_visits = x.unique_plha_virtual_visits,
weight_check_done = x.weight_checked,
abnormal_weight = x.weight_abnormal,
bp_check_done = x.bp_checked,
abnormal_bp = x.bp_abnormal,
rbs_check_done = x.rbs_checked,
abnormal_rbs = x.rbs_abnormal,
s4_screening_check_done = x.screening_conducted,
s4_screening_positive = x.positive_4s
from (select art_center_id, sum(case when a.plha_visit_status = 1 then 1 else 0 end) as unique_plha_self_visits,
    sum(case when a.plha_visit_status = 2 then 1 else 0 end) as unique_plha_proxy_visits,
    sum(case when a.plha_visit_status = 3 then 1 else 0 end) as unique_plha_virtual_visits,
    sum(case when a.plha_visit_status = 1 and a.weight is not null and a.weight > 0 then 1 else 0 end) as weight_checked,
    sum(case when a.plha_visit_status = 1 and a.weight is not null and a.previous_weight is not null and a.weight > 0 and a.previous_weight > 0 and a.previous_weight > a.weight then 1 else 0 end) as weight_abnormal,
    sum(case when a.plha_visit_status = 1 and a.systolic is not null and a.diastolic is not null and a.systolic > 0 and a.diastolic > 0 then 1 else 0 end) as bp_checked,
    sum(case when a.plha_visit_status = 1 and a.plha_dob is not null and a.plha_dob <= (now() - interval '18 years') and ((a.systolic is not null and a.systolic >= 140) or (a.diastolic is not null and a.diastolic >= 90)) then 1 else 0 end) as bp_abnormal,
    sum(case when a.plha_visit_status = 1 and a.screening_conducted = 2 then 1 else 0 end) as screening_conducted,
    sum(case when a.plha_visit_status = 1 and a.screening_conducted = 2 and a.s4_screening_status = 1 then 1 else 0 end) as positive_4s,
    sum(case when a.plha_visit_status = 1 and a.blood_test_conducted = 2 then 1 else 0 end) as rbs_checked,
    sum(case when a.plha_visit_status = 1 and a.blood_test_conducted = 2 and a.random >= 150 then 1 else 0 end) as rbs_abnormal
    from (select distinct on(patient_id) * 
            from art_visits_temp
            order by patient_id, date_visit desc
    ) as a
    group by art_center_id
) as x
where x.art_center_id = investigations_dashboard.art_center_id 
and investigations_dashboard.report_month = lcl_report_month
and investigations_dashboard.report_year = lcl_report_year;


END;
$$
>>>>>>>>>>>>>>>>>
create TEMPORARY table art_visits_temp
(
    patient_id uuid not null,
    date_visit varchar not null,
    art_center_id integer null,
    plha_dob date null,
    weight numeric(7,2) null,
    systolic numeric(7,2) null,
    diastolic numeric(7,2) null,
    screening_conducted integer null,
    s4_screening_status integer null,
    blood_test_conducted integer null,
    random integer null,
    plha_visit_status integer null,
    previous_weight numeric(7,2) null,
    primary key(patient_id, date_visit)
);
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



ALTER TABLE investigations_dashboard OWNER to convene2demo;
ALTER FUNCTION investigations_dashboard OWNER TO convene2demo;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<
ALTER DATABASE jobaid_staging_dbdump_27apr2022 OWNER TO convene2demo3


ALTER DATABASE jobaid_staging_dbdump_27apr2022 OWNER TO convene2demo

ALTER TABLE django_site OWNER TO convene2demo


1.unzip # come to home page in terminal

2.sudo chown postgres:postgres /home/mahiti/Downloads/jobaid_staging_dbdump_27apr2022.sql #home page 

3.sudo mv /home/mahiti/Downloads/jobaid_staging_dbdump_27apr2022.sql /var/lib/postgresql #home page 

4.ls -ltr #postgres@mahiti-LIFEBOOK-A555:~$ ls -ltr checking conform

5. create database jobaid_staging_dbdump_27apr2022;#sudo -i -u postgre, psql entry

6. grant all privileges on database jobaid_staging_dbdump_27apr2022 to convene2demo;#\l show user name

7. ctl + D

8. psql -d jobaid_staging_dbdump_27apr2022<jobaid_staging_dbdump_27apr2022.sql

9. https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e

\d+ investigations_dashboard;

TbLine.objects.create(patient = patient_registration, diagnosis_register = diagnosed_tb)

var art_reg_diabete = parseInt("{{patient_art_obj.art_reg_diabetes}}")
$("#art_reg_diabetes").val(art_reg_diabete)

var art_reg_hyper = parseInt("{{patient_art_obj.art_reg_hypertention}}")
$("#art_reg_hypertention").val(art_reg_hyper)



Please pull client_staging_backup to https://mdacs-jobaid.in/
Site.objects.get_or_create(domain = "jobaidtest.com:8000", name = "Display name")
Site.object.create(name = "jobaidtest.com:8000")

sudo gedit /etc/hosts/

default=0


var art_reg_diabete = "{{patient_art_obj.art_reg_diabetes}}"
var reg_diabetes = parseInt(art_reg_diabete);

var art_reg = reg_diabetes.toString();
$("#art_reg_diabetes").val(art_reg)



Swal.fire({
        title: 'Are you sure you want to add in TB register ?',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        }).then((result) => {
        if (result.isConfirmed) {
            event.preventDefault();
            window.location=`/patient/tb-register/{{uuid}}/${tb_line_uuid}/`;
        } 
        });



function checkart_access(iseligibleforart,uuid ){
            if(iseligibleforart == "True"){
                Swal.fire({
            title: 'Are you sure you want to add in  ?',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            }).then((result) => {
            if (result.isConfirmed) {
                event.preventDefault();
                window.location.href=`/patient/artvisit/${uuid}/`
            } 
            });
            }else{




1.CD4/ Viral load section bring it below 4S section
2.Add 1 more option in the dropdown - "Not applicable"
3.TB line list task also Done


<!--Multi Select -->
<script src="/static/app-assets/vendors/js/forms/select/select2.full.min.js"></script>
<script src="/static/app-assets/js/scripts/forms/form-select2.min.js"></script>
<!--Multi Select Ends-->


<div class="col-lg-4 col-12">
<label class="form-label" for="select2-multiple">Counselling Sessions Conducted</label>
<div class="position-relative">
	<select class="select2 form-select select2-hidden-accessible" name="counselling_sessions_conducted" id="counselling_sessions_conducted" multiple="" data-select2-id="select2-multiple" tabindex="-1" aria-hidden="true">
	{% for masterlookup in masterlookups %}
		<option value="{{masterlookup.id}}">{{masterlookup.name}}</option>
	{% endfor %}
</select>
</div>
</div>

counselling_sessions_conducted = data.getlist('counselling_sessions_conducted')

 # sessions_conducted = counselling_sessions_conducted,
        # added multiple data in counselling table
        if counselling_sessions_conducted:
            sessions_conducted_ids = MasterLookUp.objects.filter(id__in = counselling_sessions_conducted, active=2)
            counselling_add.sessions_conducted.add(*sessions_conducted_ids)
        counselling_add.save()


masterlookups = MasterLookUp.objects.filter(parent__slug = 'sessions_conducted', active=2).values("id","name")
tagged_sessions_conducted = json.dumps([ {"id":str(data.get("id")),"name":data.get("name")}for data in 






 counselling_edit = Counselling.objects.get(patient = patient, uuid = counsellinguuid, active=2)
        tagged_sessions_conducted = json.dumps([ {"id":str(data.get("id")),"name":data.get("name")}for data in  counselling_edit.sessions_conducted.values("id","name")])

        # multiple data update 
        # counselling_edit.sessions_conducted = counselling_sessions_conducted
        if counselling_sessions_conducted:
            sessions_conducted_ids = MasterLookUp.objects.filter(id__in = counselling_sessions_conducted, active=2)
            counselling_edit.sessions_conducted.clear()
            counselling_edit.sessions_conducted.add(*sessions_conducted_ids)
        counselling_edit.save()

masterlookups = MasterLookUp.objects.filter(parent__slug = 'sessions_conducted')



 counselling_obj.sessions_conducted.values("id","name")])
class CounsellingAdd(View):
    template_name = "jobaid/survey_forms/counselling.html"

    @method_decorator(login_required(login_url='/login/'))
    def get(self, request, uuid,artvisit_uuid):
        title = "Counselling"
        uuid = strip_uuid_space(uuid)
        artvisit_uuid = strip_uuid_space(artvisit_uuid)
        patient_summary = ArtRegistration.objects.get(uuid=uuid, active=2)
        ses_choices = SES_CHOICES
        masterlookups = MasterLookUp.objects.filter(parent__slug = 'sessions_conducted')
        return render(request,self.template_name,locals())

    @method_decorator(login_required(login_url='/login/'))
    def post(self, request, uuid, artvisit_uuid):
        patient_uuid = strip_uuid_space(uuid)
        artvisit_uuid = strip_uuid_space(artvisit_uuid)
        patient = ArtRegistration.objects.get(uuid = patient_uuid, active=2)
        artvisit = ARTVisit.objects.get(uuid = artvisit_uuid, active=2)
        data = request.POST
        counselling_sessions_conducted = data.getlist('counselling_sessions_conducted')
        counselling_add = Counselling.objects.create(patient = patient, 
        patient_artvisit = artvisit,
        site_id_id             = request.session.get('site_id')
        )
        # sessions_conducted = counselling_sessions_conducted,
        # added multiple data in counselling table
        if counselling_sessions_conducted:
            sessions_conducted_ids = MasterLookUp.objects.filter(id__in = counselling_sessions_conducted, active=2)
            counselling_add.sessions_conducted.add(*sessions_conducted_ids)
        counselling_add.save()

        added = True
        return render(request,self.template_name,locals())



class CounsellingEdit(View):
    template_name = "jobaid/survey_forms/counselling.html"

    @method_decorator(login_required(login_url='/login/'))
    def get(self, request, uuid,artvisit_uuid, counsellinguuid):
        title = "Counselling Update"
        uuid = strip_uuid_space(uuid)
        artvisit_uuid = strip_uuid_space(artvisit_uuid)
        counsellinguuid = strip_uuid_space(counsellinguuid)
        patient_summary = ArtRegistration.objects.get(uuid=uuid, active=2)
        counselling_obj = Counselling.objects.get(uuid = counsellinguuid)
        ses_choices = SES_CHOICES
        masterlookups = MasterLookUp.objects.filter(parent__slug = 'sessions_conducted', active=2).values("id","name")
        tagged_sessions_conducted = json.dumps([ {"id":str(data.get("id")),"name":data.get("name")}for data in  counselling_obj.sessions_conducted.values("id","name")])
        return render(request,self.template_name,locals())

    @method_decorator(login_required(login_url='/login/'))
    def post(self, request, uuid, artvisit_uuid, counsellinguuid):
        patient_uuid = strip_uuid_space(uuid)
        counsellinguuid = strip_uuid_space(counsellinguuid)
        patient = ArtRegistration.objects.get(uuid = patient_uuid, active=2)
        data = request.POST
        counselling_sessions_conducted = data.getlist('counselling_sessions_conducted')

        counselling_edit = Counselling.objects.get(patient = patient, uuid = counsellinguuid, active=2)
        tagged_sessions_conducted = json.dumps([ {"id":str(data.get("id")),"name":data.get("name")}for data in  counselling_edit.sessions_conducted.values("id","name")])

        # multiple data update 
        # counselling_edit.sessions_conducted = counselling_sessions_conducted
        if counselling_sessions_conducted:
            sessions_conducted_ids = MasterLookUp.objects.filter(id__in = counselling_sessions_conducted, active=2)
            counselling_edit.sessions_conducted.clear()
            counselling_edit.sessions_conducted.add(*sessions_conducted_ids)
        counselling_edit.save()

        edited = True
        return render(request,self.template_name,locals())























{% if counselling_obj %}
	<script>
		$(document).ready(function(){
		var tagged_sessions_conducted = {{tagged_sessions_conducted|safe}}
		for (let i = 0; i < tagged_sessions_conducted.length; i++) {
		var sessions_conducted = tagged_sessions_conducted[i]['name']
		var uuid = tagged_sessions_conducted[i]['id']
		$(".select2-selection__rendered").append(`<li class="select2-selection__choice" title="${sessions_conducted}" data-select2-id="${i}"><span class="select2-selection__choice__remove" role="presentation">×</span>${sessions_conducted}</li>`)
		$("#select2-issues_identified-results").append(`<li class="select2-results__option" id="select2-issues_identified-result-6jxz-${uuid}" role="option" aria-selected="true" data-select2-id="select2-issues_identified-result-6jxz-${uuid}">${sessions_conducted}</li>`)
	}
	})
	</script>
	{% endif %}



...........................

<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<script src="http://code.jquery.com/jquery-1.8.3.js"></script>
<script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chosen/1.4.2/chosen.jquery.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/chosen/1.4.2/chosen.css">

<div class="col-lg-4 col-12">
	<label class="form-label" for="select2-multiple">Counselling Sessions Conducted</label>
		<div class="position-relative">
			<select class="chzn-select" multiple="true" name="faculty" style="width:200px;">
			<option value="AC">A</option>
			<option value="AD">B</option>
			<option value="AM">C</option>
			<option value="AP">D</option>
			</select>
		</div>
</div>


<script>
	$(document).ready(function() {
		$('.chzn-select').chosen();
	});
</script>

................................

























<div class="card-header pl-0 d-none is_cd4_test_conducated">
                                        <h4 class="card-title">CD4/ Viral Load</h4>
                                    </div >
                                    <div class="row">
                                        <div class="col-lg-4 col-12">
                                            <div class="form-group">
                                                <label for="first-name-column">No of pills remaining with PLHA<span class="text-danger">*</span></label>
                                                {% if patient_art_visit %}
                                                <input type="text" id="no_of_pills" name="no_of_pills" value={{patient_art_visit.pills_remaining}} class="form-control number_only" minlength="1" maxlength="3" placeholder="" value="" tabindex="3" />
                                                {% else %}
                                                <input type="text" id="no_of_pills" name="no_of_pills" class="form-control number_only" minlength="1" maxlength="3" placeholder="" value="" tabindex="3" />
                                                {% endif %}
                                            </div>
                                        </div>
                                        <div class="col-lg-4 col-12">
                                            <div class="form-group">
                                                <label for="pills_prescribed_per_day">Pills prescribed per day <span class="text-danger">*</span></label>
                                                {% if patient_art_visit %}
                                                <input type="text" id="pills_prescribed_per_day" name="pills_prescribed_per_day" value={{patient_art_visit.pills_prescribed_per_day}} class="form-control number_only" minlength="1" maxlength="3" placeholder="" value="" tabindex="3" />
                                                {% else %}
                                                <input type="text" id="pills_prescribed_per_day" name="pills_prescribed_per_day" class="form-control number_only" minlength="1" maxlength="3" placeholder="" value="" tabindex="3" />
                                                {% endif %}
                                            </div>
                                        </div>
                                        <div class="col-lg-4 col-12">
                                            <div class="form-group">
                                                <label for="pills_prescribed_last_visit">Pills given during last visit<span class="text-danger">*</span></label>
                                                {% if patient_art_visit %}
                                                <input type="text" id="pills_prescribed_last_visit" name="pills_prescribed_last_visit" value={{patient_art_visit.pills_prescribed_last_visit}} class="form-control number_only" minlength="1" maxlength="3" placeholder="" value="" tabindex="3" />
                                                {% else %}
                                                <input type="text" id="pills_prescribed_last_visit" name="pills_prescribed_last_visit" class="form-control number_only" minlength="1" maxlength="3" placeholder="" value="" tabindex="3" />
                                                {% endif %}
                                                
                                            </div>
                                        </div>
                                        </div>
                                        <div class="card-header pl-0 d-none is_cd4_test_conducated">
                                            <h4 class="card-title">CD4/ Viral Load</h4>
                                        </div >  
                                        <div class="row">
                                        <div class="col-lg-4 col-12 d-none is_cd4_test_conducated">
                                            <div class="form-group">
                                                <label for="cd4_test_conducated">CD4 Test Conducted?<span class="text-danger">*</span></label>
                                                <select class="custom-select" id="cd4_test_conducated" name="cd4_test_conducated" tabindex="4">
                                                    <option value="" selected>Select</option>
                                                    <option value="2">Yes</option>
                                                    <option value="1">No</option>
                                                </select>
                                            </div>
                                        </div>
                                    
                                        <div class="col-lg-4 col-12 d-none is_viral_load">
                                            <div class="form-group">
                                                <label for="viral_load">Viral load Test Conducted?<span class="text-danger">*</span></label>
                                                {% if varial %}
                                                <select class="custom-select" id="viral_load" name="viral_load" tabindex="6">
                                                    <option value="" selected>Select</option>
                                                    <option value="2">Yes</option>
                                                    <option value="1">No</option>
                                                </select>
                                                {% else %}
                                                <select class="custom-select" id="viral_load1" disabled="disabled" name="viral_load1" tabindex="6">
                                                    <option value="" selected>Not Applicable</option>
                                                </select>
                                                {% endif %}
                                            </div>
                                        </div>
                                    
                                    </div>

































# already_diagnosed_tb Tb line table record created if Yes
            if diagnosed_tb == '2':
                TbLine.objects.create(patient = patient_registration, diagnosis_register = diagnosed_tb)










https://stackoverflow.com/questions/41277344/select2-is-not-working

<div class="col-lg-4 col-12">
<div class="form-group">
	<div>
		<label for="counselling_sessions_conducted"></label>
		<select class="sl" id="counselling_sessions_conducted" name="counselling_sessions_conducted" multiple="multiple">
			{% for ses_choice in ses_choices %}
		<option value="{{ses_choice.0}}">{{ses_choice.1}}</option>
		{% endfor %}
		</select>
	</div>

</div>
</div>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
................
@is_user_allowed
@login_required(login_url='/account/login')
def edit_violation(request, violation_id):
    edit_violation = Violation.objects.get(id=violation_id)
    edit_violation_form = ViolationForm(instance=edit_violation)

    if request.method == 'POST':
        edit_violation_form = ViolationForm(
            request.POST, instance=edit_violation)
        if edit_violation_form.is_valid():
            edit_violation_form.save()
            Log.objects.create(model_name='Violation', record_id=violation_id, action='2', created_by=request.user)
            messages.warning(request, 'Violation updated')
            return redirect('violations')
    return render(request, 'hsse_engine/edit_violation.html', {
        'edit_violation_form': edit_violation_form,
    })


@is_user_allowed
@login_required(login_url='/account/login')
def add_driver_details(request):
    driver_form = DriverForm(initial={'created_by': request.user})

    if request.method == 'POST':
        driver_form = DriverForm(request.POST, request.FILES)
        if driver_form.is_valid():
            driver_form = driver_form.save()
            driver_form_id = driver_form.id
            Log.objects.create(model_name='DriverDetails', record_id=driver_form.id, action='0', created_by=request.user)
            messages.success(request, 'Driver added.')
            return redirect('driver_hiring')
    return render(request, 'driver_engine/add_driver_details.html', {
        'driver_form': driver_form,
        
    })


class DriverForm(forms.ModelForm):
    class Meta:
        model = Driver
        fields = ('name', 'mobile_number', 'blood_group', 'dob', 'education', 'can_read', 'can_write', 'driving_licence_num', 'issuing_authority', 'driving_licence_issue_date', 'driving_licence_expiry_date', 'hgv_licence_issue_date', 'hazard_issue_date', 'address', 'id_card_type', 'card_number', 'bank_ac_holder_name', 'bank_ac_number', 'bank_name', 'ifsc_code', 'joining_date', 'interviewed_by', 'licencse_image', 'hazard_image', 'driver_image', 'reference_driver1', 'reference_driver2', 'reference_driver3', 'reference_driver4', 'created_by')  # noqa : E501

        widgets = {
            'blood_group': forms.Select(attrs={'class': 'selectpicker', 'data-style': 'btn btn-primary', 'title': 'select Blood Group'}),
            'dob': forms.DateInput(attrs={'class': 'mt-4', 'type': 'date'}),
            'education': forms.DateInput(attrs={'class': 'mt-3'}),
            'can_read': forms.Select(attrs={'class': 'selectpicker', 'data-style': 'btn btn-primary'}),
            'can_write': forms.Select(attrs={'class': 'selectpicker', 'data-style': 'btn btn-primary'}),
            'driving_licence_issue_date': forms.DateInput(attrs={'type': 'date'}),
            'driving_licence_expiry_date': forms.DateInput(attrs={'type': 'date'}),
            'hgv_licence_issue_date': forms.DateInput(attrs={'type': 'date'}),
            'hazard_issue_date': forms.DateInput(attrs={'type': 'date'}),
            'id_card_type': forms.Select(attrs={'class': 'selectpicker', 'data-style': 'btn btn-primary', 'title': 'select ID Card type'}),
            'joining_date': forms.DateInput(attrs={'type': 'date'}),
            'status': forms.Select(attrs={'class': 'selectpicker', 'data-style': 'btn btn-primary', 'title': 'select Status'}),
            'created_by': forms.TextInput(attrs={'type': 'hidden'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('add_driver', 'Add New Driver'))
        self.helper.layout = Layout(
            Row(
                Column('name'),
                Column('mobile_number'),
            ),
            Row(
                Column('blood_group'),
                Column('dob'),
            ),
            Row(
                Column('education'),
                Column('can_read'),
                Column('can_write'),
            ),
            Row(
                Column('driving_licence_num'),
                Column('issuing_authority'),
            ),
            Row(
                Column('driving_licence_issue_date'),
                Column('driving_licence_expiry_date'),
            ),
            Row(
                Column('hgv_licence_issue_date'),
                Column('hazard_issue_date'),
            ),
            Row(
                Column('address'),
            ),
            Row(
                Column('id_card_type'),
                Column('card_number'),
            ),
            Row(
                Column('bank_ac_holder_name'),
                Column('bank_ac_number'),
            ),
            Row(
                Column('bank_name'),
                Column('ifsc_code'),
            ),
            Row(
                Column('joining_date'),
                Column('interviewed_by'),
                Column('created_by'),
            ),
            Row(
                Column('licencse_image'),
                Column('hazard_image'),
                Column('driver_image'),
            ),
            Row(
                Column('reference_driver1'),
                Column('reference_driver2'),
                Column('reference_driver3'),
                Column('reference_driver4'),
            )
        )



class Driver(models.Model):
    name = models.CharField(max_length=200)
    mobile_number = models.CharField(max_length=10)

    BLOOD_GROUP_LIST = [
        ('', 'Select Blood Group'),
        ('0', 'O +ve'),
        ('1', 'O -ve'),
        ('2', 'A +ve'),
        ('3', 'A -ve'),
        ('4', 'B +ve'),
        ('5', 'B -ve'),
        ('6', 'AB +ve'),
        ('7', 'AB -ve'),
    ]

    blood_group = models.CharField(max_length=100, choices=BLOOD_GROUP_LIST)
    dob = models.DateField()
    education = models.CharField(max_length=200)

    CAN_READ_LIST = [
        ('', 'CAN READ?'),
        (True, 'Yes'),
        (False, 'No'),
    ]

    can_read = models.BooleanField(choices=CAN_READ_LIST)

    CAN_WRITE_LIST = [
        ('', 'CAN WRITE?'),
        (True, 'Yes'),
        (False, 'No'),
    ]

    can_write = models.BooleanField(choices=CAN_WRITE_LIST)
    driving_licence_num = models.CharField(max_length=16)
    issuing_authority = models.CharField(max_length=200)
    driving_licence_issue_date = models.DateField()
    driving_licence_expiry_date = models.DateField()
    hgv_licence_issue_date = models.DateField()
    hazard_issue_date = models.DateField()
    address = models.TextField()

    IDENTITY_PROOF_LIST = [
        ('aadhar card', 'Aadhar Card'),
        ('Election Card', 'Election Card'),
        ('passport', 'Passport'),
        ('driving licencse', 'Driving Licencse'),
    ]

    id_card_type = models.CharField(max_length=100, choices=IDENTITY_PROOF_LIST, default='aadhar card')
    card_number = models.CharField(max_length=200)

    bank_ac_holder_name = models.CharField(max_length=200)
    bank_ac_number = models.CharField(max_length=200)
    bank_name = models.CharField(max_length=200)
    ifsc_code = models.CharField(max_length=200)

    joining_date = models.DateField()
    interviewed_by = models.CharField(max_length=200)

    STATUS_LIST = [
        ('0', 'In Active'),
        ('1', 'Active'),
    ]

    status = models.CharField(max_length=10, choices=STATUS_LIST, default='0')

    HIRING_LIST = [
        ('0', 'In process'),
        ('1', 'On Hold'),
        ('2', 'Selected'),
        ('3', 'Rejected'),
    ]

    hiring_status = models.CharField(max_length=10, choices=HIRING_LIST, default='0')

    LEAVE_LIST = [
        ('', 'ON LEAVE'),
        (True, 'Yes'),
        (False, 'No'),
    ]

    on_leave = models.BooleanField(choices=LEAVE_LIST, default=False)

    licencse_image = models.ImageField(upload_to='media/dl/', null=True, blank=True)
    hazard_image = models.ImageField(upload_to='media/hazard/', null=True, blank=True)
    driver_image = models.ImageField(upload_to='media/profile_pic/', null=True, blank=True)
    shell_id = models.CharField(max_length=50, null=True)

    reference_driver1 = models.ForeignKey('self', on_delete=models.CASCADE, related_name='reference_driver_one')
    reference_driver2 = models.ForeignKey('self', on_delete=models.CASCADE, related_name='reference_driver_two')
    reference_driver3 = models.ForeignKey('self', on_delete=models.CASCADE, related_name='reference_driver_three')
    reference_driver4 = models.ForeignKey('self', on_delete=models.CASCADE, related_name='reference_driver_four')

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(CustomUser, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.name)

    def age(self):
        today = datetime.date.today()
        dob = self.dob
        years = today.year - dob.year
        if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
            years -= 1
        return years

    def age_in_company(self):
        today = datetime.date.today()
        r = relativedelta.relativedelta(today, self.joining_date)
        return_string = str(r.years) + ' years, ' + str(r.months) + ' months'
        return return_string

    def get_senior_junior(self):
        today = datetime.date.today()
        r = relativedelta.relativedelta(today, self.joining_date)
        total_months = r.years * 12 + r.months
        if total_months > 6:
            return {'senior_or_junior': 'Senior', 'colour': 'success'}
        else:
            return {'senior_or_junior': 'Junior', 'colour': 'warning'}

    def get_status_colour(self):
        if self.status == '0':
            return 'danger'
        if self.status == '1':
            return 'success'
        if self.status == '2':
            return 'warning'

    def get_license_status(self):
        today = datetime.date.today()
        r = relativedelta.relativedelta(self.driving_licence_expiry_date, today)
        total_months = r.years * 12 + r.months
        if total_months < 0:
            return {'status': 'License expired', 'colour': 'danger'}
        if total_months == 1:
            return {'status': 'License expiring', 'colour': 'warning'}
        else:
            return {'status': 'License Valid', 'colour': 'success'}

    def get_hazard_expiry_status(self):
        today = datetime.date.today()
        hazard_expiry_date = self.hazard_issue_date + timedelta(days=365)
        r = relativedelta.relativedelta(hazard_expiry_date, today)
        total_months = r.years * 12 + r.months
        if total_months < 0:
            return {'status': 'Hazard expired', 'colour': 'danger'}
        if total_months == 1:
            return {'status': 'Hazard expiring', 'colour': 'warning'}
        else:
            return {'status': 'Hazard Valid', 'colour': 'success'}

    def get_hiring_status(self):
        status = {'bio_data_status': 'completed', 'bank_details_status': 'completed', 'behaviour_test_status': 'pending', 'document_status': 'pending', 'recruitment_status': 'pending'}  # noqa : E501

        try:
            behaviour_test = DriverBehaviourTest.objects.get(driver=self)
            if behaviour_test:
                status['behaviour_test_status'] = 'completed'
            else:
                status['behaviour_test_status'] = 'pending'
        except Exception:
            status['behaviour_test_status'] = 'pending'

        if self.licencse_image is not None and self.hazard_image is not None and self.driver_image is not None:
            status['document_status'] = 'completed'
        else:
            status['document_status'] = 'pending'

        try:
            recruitment = DriverRecruitment.objects.get(driver=self)
            if recruitment:
                status['recruitment_status'] = 'completed'
            else:
                status['recruitment_status'] = 'pending'
        except Exception:
            status['recruitment_status'] = 'pending'

        return status

    def is_ready_to_hire(self):
        status = self.get_hiring_status()
        if status['bio_data_status'] == 'completed' and status['bank_details_status'] == 'completed' and status['behaviour_test_status'] == 'completed' and status['document_status'] == 'completed' and status['recruitment_status'] == 'completed':  # noqa : E501
            return True
        else:
            return False

.....................
Tb line List form



highlight: function (element, errorClass, validClass) {
            
	var elem = $(element);
	
	if(elem.hasClass('s-select2')) {
		var isMulti = (!!elem.attr('multiple')) ? 's' : '';
		elem.siblings('.sl').find('.select2-choice'+isMulti+'').addClass(errorClass);            
	} else {
		elem.addClass(errorClass);
	}
	
},
unhighlight: function (element, errorClass, validClass) {
	var elem = $(element);
	
	if(elem.hasClass('sl')) {
		elem.siblings('.sl').find('.select2-choice').removeClass(errorClass);
	} else {
		elem.removeClass(errorClass);
	}
}





<!-- <label for="counselling_sessions_conducted">Counselling Sessions Conducted<span class="text-danger">*</span></label>
<select class="custom-select" name="counselling_sessions_conducted" id="counselling_sessions_conducted" tabindex="1">
	<option value="" selected>Select</option>
	{% for ses_choice in ses_choices %}
	<option value="{{ses_choice.0}}" {% if ses_choice.0 == counselling_obj.sessions_conducted %}selected{% endif %} >{{ses_choice.1}}</option>
	{% endfor %}
	
</select> -->








$('#counselling_sessions_conducted').select2({
	placeholder:'Select'   
})

$('#counselling_sessions_conducted').select2({
	placeholder:'Select'   
})






issues_identified = data.getlist('issues_identified')

if issues_identified:
    issues_identified_ids = MasterLookUp.objects.filter(id__in = issues_identified, active=2)
    eacuuid.issues_identified.clear()
    eacuuid.issues_identified.add(*issues_identified_ids)


if issues_identified:
    issues_identified_ids = MasterLookUp.objects.filter(id__in = issues_identified, active=2)
    eac.issues_identified.add(*issues_identified_ids)
eac.save()   


masterlookups = MasterLookUp.objects.filter(parent__slug = 'issues-identified', active=2).values("id","name")
        tagged_ios = json.dumps([ {"id":str(data.get("id")),"name":data.get("name")}for data in  eacuuid_obj.issues_identified.values("id","name")])



masterlookups = MasterLookUp.objects.filter(parent__slug = 'issues-identified')

edit>>
masterlookups = MasterLookUp.objects.filter(parent__slug = 'issues-identified', active=2).values("id","name")
tagged_ios = json.dumps([ {"id":str(data.get("id")),"name":data.get("name")}for data in  eacuuid_obj.issues_identified.values("id","name")])


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 <div class="col-lg-4 col-12 d-none is_self">
        <label class="form-label" for="select2-multiple">Any OI</label>
        <div class="position-relative">
        <select class="select2 form-select select2-hidden-accessible" name="any_oi" id="any_oi" multiple="" data-select2-id="select2-multiple" tabindex="-1" aria-hidden="true">
            {% for oi in any_ios %}
            <option value="{{oi.id}}">{{oi.name}}</option>
            {% endfor %}
        </select>
        </div>
    </div>




var any_io = {{tagged_ios|safe}}
                for (let i = 0; i < any_io.length; i++) {
                var io = any_io[i]['name']
                var uuid = any_io[i]['id']
                $(".select2-selection__rendered").append(`<li class="select2-selection__choice" title="${io}" data-select2-id="${i}"><span class="select2-selection__choice__remove" role="presentation">×</span>${io}</li>`)
                $("#select2-any_oi-results").append(`<li class="select2-results__option" id="select2-any_oi-result-6jxz-${uuid}" role="option" aria-selected="true" data-select2-id="select2-any_oi-result-6jxz-${uuid}">${io}</li>`)
            }




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>





























step1: Create the dropdown chioce fields added to MasterLookUp then makemigrations migrate

step2: Counselling model use ManyToManyField MasterLookUp field name sessions_conducted Non mandatory

step3: get the details based on session slug fields

step4: create Counselling table create get the Master Lookup table show the drop down UI page

step5: export the present records the csv files and the import the Counselling table based on uuid or create script and import the existing records

step6: added JavaScript code js files and html also

step7: Test the create and edit records UI page "sessions_conducted" field should be mandatory

step8: code push to staging Server after that one round test the server side also

step9: work on the current branch (Art registrations)

sessions_conducted = models.ManyToManyField(MasterLookUp, blank=True, null=True)


sessions_conducted = models.ManyToManyField(MasterLookUp, blank=True, null=True)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import csv
from PatientManagement.views import *

def legacy_viral_load_bulk_upload():
    with open('/home/mahiti/jobaid_dev/media/Siddharth_ARTC_LegacyViralLoad-2022-04-05.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
            if not LegacyViralLoad.objects.filter(date_visit=row['date_visit'], viral_load_count=row['viral_load_count'], art_center_code = row['art_center_code'], pre_art_number = row['pre_art_number']).exists():
                date_visit = row['date_visit']
                viral_load_count = row['viral_load_count']
                art_center_code = row['art_center_code']
                pre_art_number = row['pre_art_number']
                new_vl = LegacyViralLoad(date_visit=date_visit, viral_load_count=viral_load_count, art_center_code = art_center_code, pre_art_number = pre_art_number)
                new_vl.save()
                print(new_vl.id,"import start")
        print("import end")

legacy_viral_load_bulk_upload()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

from datetime import date, timedelta
import csv
from PatientManagement.views import *


sd = '2022-02-01'
ed = '2022-04-21'

# ART center wise report 
def report(sd,ed):
    start_date = datetime.strptime(sd, '%Y-%m-%d').date()
    end_date =datetime.strptime(ed, '%Y-%m-%d').date()
    delta = end_date - start_date
    file_name = "ART_center_wise_report_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['ART_Name', 'Date', 'New_registrations', 'Patient_visits']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 

        for i in range(delta.days + 1):
            day = start_date + timedelta(days=i)
            
            art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
            for art_center_obj in art_center_lists:
                art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = day)
                art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = day)
                if art_registration_obj.count() > 0 or art_visit_obj.count() > 0: 
                    writer.writerow({'ART_Name': art_center_obj, 'Date': day, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})  

                    print(art_visit_obj.count(), art_registration_obj.count(), day ,art_center_obj)
            
        print("Writing complete")  


report(sd,ed)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




















>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>19/04/2022>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

reg_visit = {}
registrations = list(ArtRegistration.objects.filter(created__date = today_date).exclude(art_center = None).values('art_center__name','art_center').order_by('art_center').annotate(count=Count('art_center')))

visit = list(ARTVisit.objects.filter(created__date = today_date).exclude(patient__art_center = None).values('patient__art_center__name','patient__art_center').order_by('patient__art_center').annotate(count=Count('patient__art_center')))
    registrations.extend(visit)

    for registration in registrations:
        if 'patient__art_center__name' in registration.keys():
            boundary_id = registration['patient__art_center']
            boundary_name = registration['patient__art_center__name']
            count = registration['count']
            data ={'boundary_name': boundary_name, 'visit_count': count }
        else:
            boundary_id = registration['art_center']
            boundary_name = registration['art_center__name']
            count = registration['count']
            data ={'boundary_name':boundary_name, 'patient_count': count }

        if boundary_id not in reg_visit.keys():
            reg_visit[boundary_id] = data
        else:
            reg_visit[boundary_id].update(data)

        if 'patient_count' not in reg_visit[boundary_id].keys():
            data = {'patient_count': 0 }
            reg_visit[boundary_id].update(data)

        if 'visit_count' not in reg_visit[boundary_id].keys():
            data = {'visit_count': 0 }
            reg_visit[boundary_id].update(data)    

    keys = reg_visit.keys()
    results = []
    for key in keys:
        results.append(reg_visit[key])












def legacy_viral_load_bulk_upload():
    # with open('/home/mahiti/jobaid_dev/media/Dr-RN-Cooper-ARTC_LegacyViralLoad-2022-04-05.csv') as csvfile:
    with open('/home/mahiti/Documents/Job_Aid/job-aid/media/LegacyViralLoad-2022-04-19(2).csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
            if not LegacyViralLoad.objects.filter(date_visit=row['date_visit'], viral_load_count=row['viral_load_count'], art_center_code = row['art_center_code'], pre_art_number = row['pre_art_number']).exists():
                date_visit = row['date_visit']
                viral_load_count = row['viral_load_count']
                art_center_code = row['art_center_code']
                pre_art_number = row['pre_art_number']
            
                new_vl = LegacyViralLoad(date_visit=date_visit, viral_load_count=viral_load_count, art_center_code = art_center_code, pre_art_number = pre_art_number)
                new_vl.save()
                print(new_vl.id,"import start")
        print("import end")





client_staging_backup to https://mdacs-jobaid.in/


import csv
from PatientManagement.views import *

legacy_viral_load_bulk_upload()


39420

sd = '2022-02-01'

ed = '2022-04-19'

report(sd,ed)



from datetime import date, timedelta

# ART center wise report 
def report(sd,ed):
    start_date = datetime.strptime(sd, '%Y-%m-%d').date()
    end_date =datetime.strptime(ed, '%Y-%m-%d').date()
    delta = end_date - start_date
    file_name = "ART_center_wise_report_"+str(datetime.now().date())
    with open('{}.csv'.format(file_name), 'w') as csvfile:    
        fieldnames = ['ART_Name', 'Date', 'New_registrations', 'Patient_visits']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)   
        writer.writeheader() 

        for i in range(delta.days + 1):
            day = start_date + timedelta(days=i)
            
            art_center_lists = Boundary.objects.filter(boundary_level__id = 3)
            for art_center_obj in art_center_lists:
                art_registration_obj = ArtRegistration.objects.filter(art_center = art_center_obj, created__date = day)
                art_visit_obj = ARTVisit.objects.filter(patient__art_center = art_center_obj, created__date = day)
                if art_registration_obj.count() > 0: 
                    writer.writerow({'ART_Name': art_center_obj, 'Date': day, 'New_registrations':  art_registration_obj.count(),'Patient_visits':art_visit_obj.count()})  

                    print(art_visit_obj.count(), art_registration_obj.count(), day ,art_center_obj)
            
        print("Writing complete") 

from datetime import datetime
datetime.strptime('2014-12-04', '%Y-%m-%d').date()


fields = ['Name', 'Branch', 'Year', 'CGPA'] 
    
# data rows of csv file 
rows = [ ['Nikhil', 'COE', '2', '9.0'], 
         ['Sanchit', 'COE', '2', '9.1'], 
         ['Aditya', 'IT', '2', '9.3'], 
         ['Sagar', 'SE', '1', '9.5'], 
         ['Prateek', 'MCE', '3', '7.8'], 
         ['Sahil', 'EP', '2', '9.1']] 
    
# name of csv file 
filename = "university_records.csv"
    
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv writer object 
    csvwriter = csv.writer(csvfile) 
        
    # writing the fields 
    csvwriter.writerow(fields) 
        
    # writing the data rows 
    csvwriter.writerows(rows)



rom django.utils.text import slugify
# expale https://mdacs-jobaid.in
art_center = ["BYL Nair ART Center","KEM ART Center","LTMGH Sion ART Center","Pediatric Center of Excellence","Sir. J.J.ART Center","Sir. J.J.ART Center 2","BDBA ART Center","Dr R N Cooper ART Center","K B Bhabha (Bandra) ART Center","M T Agarwal ART Center","Rajawadi ART Center","Shatabdi Govandi ART Center","Siddharth ART Center","BJ Wadia Hospital","Godrej ART Center","K.J. Somaiya Medical College","L & T ART Center","GTB Hospital, Sewri","MBPT ART Center","Municipal STD Clinic, Mumbai"]
b= Boundary.objects.filter(active=2, boundary_level__id = 3).update(slug=None)


art_center_list = Boundary.objects.filter(active=2, boundary_level__id = 3)

for art_center in art_center_list:
    art_name = art_center.name
    print(art_name)
    art_center_slug = slugify(art_name)
    if Boundary.objects.filter(slug=art_center_slug).exists():
        art_center_slug = art_center_slug + str(art_center.id)
    if len(art_center_slug) >50:
        art_center_slug = art_center_slug[:50]
    art_center.slug = art_center_slug
    art_center.save()
    art_domain = art_center_slug + ".mdacs-jobaid.in"
    # art_domain = art_center_slug + ".jobaidtest.com"
    dispaly_name =  art_name[:43]+ " domain"
    print('len of the name '+ str(len(dispaly_name)))
    print(art_domain)
    print(art_center.id)
    print(dispaly_name)
    print("====")
    Site.objects.get_or_create(domain = art_domain, name = dispaly_name)











with open('/home/mahiti/Documents/Job_Aid/job-aid/media/LegacyViralLoad-2022-04-19.xlsx') as csvfile:
        reader = xlrd.open_workbook(csvfile)
        print("import start")
        for row in reader:



 with open('/home/mahiti/Documents/Job_Aid/job-aid/media/LegacyViralLoad-2022-04-19.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
def legacy_viral_load_bulk_upload(request):
    with open('/home/mahiti/Documents/Job_Aid/job-aid/media/LegacyViralLoad-2022-04-19.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
            date_visit = row['date_visit']
            viral_load_count = row['viral_load_count']
            art_center_code = row['art_center_code']
            pre_art_number = row['pre_art_number']
         
            new_vl = LegacyViralLoad(date_visit=date_visit, viral_load_count=viral_load_count, art_center_code = art_center_code, pre_art_number = pre_art_number)
            new_vl.save()
            print(new_vl.id,"import start")
        print("import end")


def legacy_viral_load_bulk_upload():
    with open('/home/mahiti/Documents/Job_Aid/job-aid/media/LegacyViralLoad-2022-04-19.csv') as csvfile:
        reader = csv.DictReader(csvfile)
        print("import start")
        for row in reader:
            date_visit = row['date_visit']
            viral_load_count = row['viral_load_count']
            art_center_code = row['art_center_code']
            pre_art_number = row['pre_art_number']
         
            new_vl = LegacyViralLoad(date_visit=date_visit, viral_load_count=viral_load_count, art_center_code = art_center_code, pre_art_number = pre_art_number)
            new_vl.save()
            print(new_vl.id,"import start")
        print("import end")




({'self wieght': 2, 'self BP': 2, 'self RBS': 2, 'self 4S Screening': 2}, {'investigation wieght': 2, 'investigation BP': 2, 'investigation RBS': 1, 'investigation 4S Screening': 2}, {'abnormal wieght': 0, 'abnormal BP': 2, 'abnormal RBS': 1, 'abnormal 4S Screening': 2})


@action(
        methods=['post'],
        detail=False, permission_classes=[],
    )


LegacyViralLoad


def legacy_viral_load_bulk_upload(self, request):
"""
LegacyViralLoad bulk upload
"""
	f = request.FILES['file']
	file = f.read().decode('utf-8').splitlines()



	try:
	    dr = csv.DictReader(file)
	    cand = LegacyViralLoad()
	    legacy_viral_load = []
	    for row in dr:

		legacy_viral_load_obj = LegacyViralLoad(**row)
		try:
		    legacy_viral_load_obj.full_clean()
		except ValidationError:
		    continue
		legacy_viral_load.append(candidate_obj)
	    d1 = (len(legacy_viral_load))
	    if d1 == 0:
		return Response({"status":"records already exist"},status=status.HTTP_400_BAD_REQUEST)
	    else:
		data = LegacyViralLoad.objects.bulk_create(legacy_viral_load)
		return Response({"status": "Successfully inserted", "total": d1}, status=status.HTTP_201_CREATED)

	except Exception as e:
	    return Response({"status": str(e)}, status.HTTP_404_NOT_FOUND)




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>













>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>18/04/2022>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>






# @login_required(login_url='/login/')
# def dashboard(request):
#     title = "Dashboard"
#     role_slug = request.session.get('role_slug')
#     locations = request.session.get('user_locations',[])

#     if role_slug == 'mdacs':
#         art_centers_count = Boundary.objects.filter(active=2, boundary_level__id = 3).count()

#         registrations_count = ArtRegistration.objects.filter(active = 2).count()

#         queryset = ARTVisit.objects.all()
        
#         artvist_count = queryset.filter(active = 2).count()

#         today_visit = queryset.filter(created__date = today_date ).count()

#     elif (role_slug in ['data-manager', 'care-coordinator', 'counselor', 'lab-technician', 'smo', 'data-manager', 'staff-nurse', 'lac-data-manager','sacep-datamanager']):
#         art_centers_count = Boundary.objects.filter(id__in = locations, active = 2, boundary_level__id = 3).count()

#         registrations_count = ARTPatientLinkage.objects.filter(art_center__id__in = locations, active = 2).count()

#         queryset = ARTVisit.objects.filter(patient__art_center__id__in = locations)

#         artvist_count = queryset.filter(active=2).count()

#         today_visit = queryset.filter(created__date = today_date ).count()

#         self_visited_weight = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1').count()

#         investigation_done_weight = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1').count()
       
#         abnormal_result_weight = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1').count()
        
#         self_visited_blood = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1', ).count()
            
        # abnormal_blood = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1', systolic__gt = 139,diastolic__gt = 89).count()
        
        # usersAge = SocioDemographics.objects.filter(active=2).annotate(age = today_date.year - F('dob__year')).values('patient__uuid')

        
        # def get_investigation(patient_uuid):
        #     art_vist_dict = {}
        #     last_one = ARTVisit.objects.filter(patient__uuid = patient_uuid,date_visit__month = today_date.month, plha_visit_status = '1').latest('created')
            
        #     last_two = ARTVisit.objects.filter(patient__uuid = patient_uuid ,date_visit__month = today_date.month, plha_visit_status = '1').order_by('-created')[:2:-2]

        #     weight_value = False
        #     for i in last_two:
        #         if last_one.weight < i.weight:
        #             weight_value = True 
        #         art_vist_dict['wieght'] = weight_value

        #     return art_vist_dict
       
#     return render(request,'jobaid/dashboard/dashboard.html',locals())




self_visited_weight = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1').count()

#         investigation_done_weight = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1').count()
       
#         abnormal_result_weight = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1').count()
        
#         self_visited_blood = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1', ).count()
            
        # abnormal_blood = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1', systolic__gt = 139,diastolic__gt = 89).count()
        
        # usersAge = SocioDemographics.objects.filter(active=2).annotate(age = today_date.year - F('dob__year')).values('patient__uuid')

        
        # def get_investigation(patient_uuid):
        #     art_vist_dict = {}
        #     last_one = ARTVisit.objects.filter(patient__uuid = patient_uuid,date_visit__month = today_date.month, plha_visit_status = '1').latest('created')
            
        #     last_two = ARTVisit.objects.filter(patient__uuid = patient_uuid ,date_visit__month = today_date.month, plha_visit_status = '1').order_by('-created')[:2:-2]

        #     weight_value = False
        #     for i in last_two:
        #         if last_one.weight < i.weight:
        #             weight_value = True 
        #         art_vist_dict['wieght'] = weight_value

        #     return art_vist_dict







from datetime import datetime

today_date = datetime.now().date()


result = date.today().year -usersAge.dob.year

usersAge = SocioDemographics.objects.filter(patient__uuid = '499dc710-55dc-4527-a227-e77227d4955f')


# for 



result in queryset.filter(weight__isnull = False,date_visit__month = today_date.month):
        #     print(result.weight)


        # print(queryset.filter(weight__isnull = False,date_visit__month = today_date.month).count())

        # query = 'select Count(date_visit) from "PatientManagement_artvisit"'
       
        # with connection.cursor() as cursor:
        #     cursor.execute(query)
        #     print(cursor.fetchall())

DashboardWidgetTypes, DashboardIndicatorFilter 


# class DashboardChartWidgets(BaseContent):
#     title = models.CharField(max_length=100)
#     stats_title = models.CharField('Statistics title',max_length=100, null=True, blank=True)
#     label = models.CharField(max_length=500)
#     widgetypes = models.ForeignKey(DashboardWidgetTypes,on_delete=models.DO_NOTHING)
#     userroles = models.ManyToManyField(UserRoles)
#     indicator = models.ManyToManyField(DashboardIndicatorFilter,blank=True)
#     widgetquery = models.TextField()
#     survey_id = models.PositiveIntegerField(default=0)
#     chart_type = models.CharField(max_length=100, choices=(('NC','Normal Chart'), ('CC','Comparative Charts'), ('SW','State wise'), ('TS','Time series')), default="NC", null=True, blank=True)
#     chart_size = models.CharField(max_length=25, null=True, blank=True)
#     chart_header = models.CharField(max_length=250, null=True, blank=True)
#     haxis_title = models.CharField(max_length=100, null=True, blank=True)
#     vaxis_title = models.CharField(max_length=100, null=True, blank=True)
#     query_type = models.CharField(max_length=100, choices=(('ORM','ORM'), ('SQL','SQL'),('SQL_P','SQL with Params')), default="ORM", null=True, blank=True)
#     order = models.PositiveIntegerField(default=0)
#     slug = models.SlugField('Slug', max_length=60, null=True, blank=True)
#     slug_choice = models.CharField(max_length=100, choices=(('R','Report'), ('D','Dashboard')), null=True, blank=True)
#     config = models.JSONField(default=dict,blank=True,null=True)




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>






depts = Department.objects.all().annotate(
    num_products=Count('product', filter=Q(product__review__time__range=["2012-01-01", "2012-01-08"]))
)

investigation_blood = queryset.filter(date_visit__month = today_date.month, plha_visit_status = '1', systolic__gt = 139,diastolic__gt = 89).annotate(choice_count=Count('date_visit'))



registrations = list(ArtRegistration.objects.filter(created__date = today_date).exclude(art_center = None).values('art_center__name','art_center').order_by('art_center').annotate(count=Count('art_center')))



therapist = SocioDemographics.objects.filter(Q(therapist_uuid__exact='')|Q(therapist_uuid__isnull=True)).values_list('student_uuid')
usersAge = SocioDemographics.objects.filter(active=2).annotate(age = today_date.year - F('dob__year')).values('patient__uuid')

child_disability = ActQuestionnaire.objects.filter(student_uuid__in=therapist)
for i in child_disability:
user = UserProfile.objects.filter(role_type='therapist',specialization=i.a7).values_list('uuid').order_by('patientuuid')




class DashboardChartWidgets(BaseContent):title = models.CharField(max_length=100)stats_title = models.CharField('Statistics title',max_length=100, null=True, blank=True)label = models.CharField(max_length=500)widgetypes = models.ForeignKey(DashboardWidgetTypes,on_delete=models.DO_NOTHING)userroles = models.ManyToManyField(UserRoles)indicator = models.ManyToManyField(DashboardIndicatorFilter,blank=True)widgetquery = models.TextField()survey_id = models.PositiveIntegerField(default=0)chart_type = models.CharField(max_length=100, choices=(('NC','Normal Chart'), ('CC','Comparative Charts'), ('SW','State wise'), ('TS','Time series')), default="NC", null=True, blank=True)
chart_size = models.CharField(max_length=25, null=True, blank=True)chart_header = models.CharField(max_length=250, null=True, blank=True)haxis_title = models.CharField(max_length=100, null=True, blank=True)vaxis_title = models.CharField(max_length=100, null=True, blank=True)query_type = models.CharField(max_length=100, choices=(('ORM','ORM'), ('SQL','SQL'),('SQL_P','SQL with Params')), default="ORM", null=True, blank=True)order = models.PositiveIntegerField(default=0)slug = models.SlugField('Slug', max_length=60, null=True, blank=True)slug_choice = models.CharField(max_length=100, choices=(('R','Report'), ('D','Dashboard')), null=True, blank=True)config = models.JSONField(default=dict,blank=True,null=True)

Blood

cursor.execute('SELECT name_patient FROM "PatientManagement_artregistration"')

row = cursor.fetchall()








def TrainingeDetails(self):
    objlist =[]
    for data in self.get('training'):
        obj, created = Training.objects.update_or_create(
            uuid=data.get('uuid'),
            defaults ={"uuid" :data.get('uuid'),
                        "name" : data.get('name'),
                        "code" : data.get('code'),
                        "start_date" : data.get('start_date'),
                        "end_date" : data.get('end_date'),
                        "trg_location" : data.get('trg_location'),
                        "trg_block" : data.get('trg_block'),
                        "master_trainer_code" : data.get('master_trainer_code'),
                        "total_participants" : data.get('total_participants'),
                        "trg_level" : data.get('trg_level'),
                        "trg_venue" : data.get('trg_venue'),
                        "trainees_type" : data.get('trainees_type'),
                        "sync_status":True,
                        "app_created_on" : data.get('app_created_on'),})
        objlist.append(obj)

    return objlist


def return_sql_results(sql):
	cursor = connection.cursor()
	cursor.execute(sql)
	descr = cursor.description
	rows = cursor.fetchall()
	data = [dict(zip([column[0] for column in descr], row)) for row in rows]
	# print("------------------\n\n\n"+sql)
	return data

art_reg_diabetes = models.CharField(max_length=250, blank=True, null=True)

art_reg_hypertention = models.CharField(max_length=250, blank=True, null=True)

(case when  art_reg_diabetes != '' then art_reg_diabetes::integer else null end)

(case when  art_reg_hypertention != '' then art_reg_hypertention::integer else null end)


art_reg_diabetes = trim(art_reg_diabetes)
art_reg_hypertention = trim(art_reg_hypertention)


result_of_hbv_test


{% if patient_co.hbv_test_result == 1%}Positive{% elif patient_co.hbv_test_result == 2%}Negative{% elif patient_co.outcome == 3%}Awaiting Result{% endif %}
